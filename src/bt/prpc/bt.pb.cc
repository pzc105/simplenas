// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bt.proto

#include "bt.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace prpc {
PROTOBUF_CONSTEXPR DownloadRequest::DownloadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.save_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadRequestDefaultTypeInternal() {}
  union {
    DownloadRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadRequestDefaultTypeInternal _DownloadRequest_default_instance_;
PROTOBUF_CONSTEXPR InfoHash::InfoHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoHashDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoHashDefaultTypeInternal() {}
  union {
    InfoHash _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoHashDefaultTypeInternal _InfoHash_default_instance_;
PROTOBUF_CONSTEXPR DownloadRespone::DownloadRespone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownloadResponeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownloadResponeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownloadResponeDefaultTypeInternal() {}
  union {
    DownloadRespone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownloadResponeDefaultTypeInternal _DownloadRespone_default_instance_;
PROTOBUF_CONSTEXPR StatusRequest::StatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
PROTOBUF_CONSTEXPR TorrentStatus::TorrentStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_.total_done_)*/ ::int64_t{0}

  , /*decltype(_impl_.download_payload_rate_)*/ 0

  , /*decltype(_impl_.progress_)*/ 0

  , /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_peers_)*/ 0

  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TorrentStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TorrentStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TorrentStatusDefaultTypeInternal() {}
  union {
    TorrentStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TorrentStatusDefaultTypeInternal _TorrentStatus_default_instance_;
PROTOBUF_CONSTEXPR StatusRespone::StatusRespone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_array_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponeDefaultTypeInternal() {}
  union {
    StatusRespone _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponeDefaultTypeInternal _StatusRespone_default_instance_;
PROTOBUF_CONSTEXPR TorrentInfoReq::TorrentInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TorrentInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TorrentInfoReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TorrentInfoReqDefaultTypeInternal() {}
  union {
    TorrentInfoReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TorrentInfoReqDefaultTypeInternal _TorrentInfoReq_default_instance_;
PROTOBUF_CONSTEXPR BtFile::BtFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0

  , /*decltype(_impl_.st_)*/ 0

  , /*decltype(_impl_.total_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.downloaded_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BtFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BtFileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BtFileDefaultTypeInternal() {}
  union {
    BtFile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BtFileDefaultTypeInternal _BtFile_default_instance_;
PROTOBUF_CONSTEXPR TorrentInfo::TorrentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.save_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resume_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_.piece_length_)*/ 0

  , /*decltype(_impl_.total_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_pieces_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TorrentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TorrentInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TorrentInfoDefaultTypeInternal() {}
  union {
    TorrentInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TorrentInfoDefaultTypeInternal _TorrentInfo_default_instance_;
PROTOBUF_CONSTEXPR TorrentInfoRes::TorrentInfoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ti_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TorrentInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TorrentInfoResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TorrentInfoResDefaultTypeInternal() {}
  union {
    TorrentInfoRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TorrentInfoResDefaultTypeInternal _TorrentInfoRes_default_instance_;
PROTOBUF_CONSTEXPR RemoveTorrentReq::RemoveTorrentReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveTorrentReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTorrentReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTorrentReqDefaultTypeInternal() {}
  union {
    RemoveTorrentReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTorrentReqDefaultTypeInternal _RemoveTorrentReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveTorrentRes::RemoveTorrentRes(
    ::_pbi::ConstantInitialized) {}
struct RemoveTorrentResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTorrentResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTorrentResDefaultTypeInternal() {}
  union {
    RemoveTorrentRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTorrentResDefaultTypeInternal _RemoveTorrentRes_default_instance_;
PROTOBUF_CONSTEXPR FileProgressReq::FileProgressReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileProgressReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileProgressReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileProgressReqDefaultTypeInternal() {}
  union {
    FileProgressReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileProgressReqDefaultTypeInternal _FileProgressReq_default_instance_;
PROTOBUF_CONSTEXPR FileProgressRes::FileProgressRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileProgressResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileProgressResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileProgressResDefaultTypeInternal() {}
  union {
    FileProgressRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileProgressResDefaultTypeInternal _FileProgressRes_default_instance_;
PROTOBUF_CONSTEXPR FileCompletedReq::FileCompletedReq(
    ::_pbi::ConstantInitialized) {}
struct FileCompletedReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileCompletedReqDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileCompletedReqDefaultTypeInternal() {}
  union {
    FileCompletedReq _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileCompletedReqDefaultTypeInternal _FileCompletedReq_default_instance_;
PROTOBUF_CONSTEXPR FileCompletedRes::FileCompletedRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_hash_)*/nullptr
  , /*decltype(_impl_.file_index_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileCompletedResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileCompletedResDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileCompletedResDefaultTypeInternal() {}
  union {
    FileCompletedRes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileCompletedResDefaultTypeInternal _FileCompletedRes_default_instance_;
}  // namespace prpc
static ::_pb::Metadata file_level_metadata_bt_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bt_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_bt_2eproto = nullptr;
const ::uint32_t TableStruct_bt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRequest, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRequest, _impl_.save_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::InfoHash, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::InfoHash, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::prpc::InfoHash, _impl_.hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRespone, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::DownloadRespone, _impl_.info_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::StatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::StatusRequest, _impl_.info_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.info_hash_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.download_payload_rate_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.total_done_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.progress_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.num_peers_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentStatus, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::StatusRespone, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::StatusRespone, _impl_.status_array_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfoReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfoReq, _impl_.info_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _impl_.st_),
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _impl_.total_size_),
    PROTOBUF_FIELD_OFFSET(::prpc::BtFile, _impl_.downloaded_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.info_hash_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.save_path_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.files_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.total_size_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.piece_length_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.num_pieces_),
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfo, _impl_.resume_data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfoRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::TorrentInfoRes, _impl_.ti_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RemoveTorrentReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RemoveTorrentReq, _impl_.info_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RemoveTorrentRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::FileProgressReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::FileProgressReq, _impl_.info_hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::FileProgressRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::FileProgressRes, _impl_.info_hash_),
    PROTOBUF_FIELD_OFFSET(::prpc::FileProgressRes, _impl_.files_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::FileCompletedReq, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::FileCompletedRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::FileCompletedRes, _impl_.info_hash_),
    PROTOBUF_FIELD_OFFSET(::prpc::FileCompletedRes, _impl_.file_index_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::prpc::DownloadRequest)},
        { 11, -1, -1, sizeof(::prpc::InfoHash)},
        { 21, -1, -1, sizeof(::prpc::DownloadRespone)},
        { 30, -1, -1, sizeof(::prpc::StatusRequest)},
        { 39, -1, -1, sizeof(::prpc::TorrentStatus)},
        { 55, -1, -1, sizeof(::prpc::StatusRespone)},
        { 64, -1, -1, sizeof(::prpc::TorrentInfoReq)},
        { 73, -1, -1, sizeof(::prpc::BtFile)},
        { 86, -1, -1, sizeof(::prpc::TorrentInfo)},
        { 103, -1, -1, sizeof(::prpc::TorrentInfoRes)},
        { 112, -1, -1, sizeof(::prpc::RemoveTorrentReq)},
        { 121, -1, -1, sizeof(::prpc::RemoveTorrentRes)},
        { 129, -1, -1, sizeof(::prpc::FileProgressReq)},
        { 138, -1, -1, sizeof(::prpc::FileProgressRes)},
        { 148, -1, -1, sizeof(::prpc::FileCompletedReq)},
        { 156, -1, -1, sizeof(::prpc::FileCompletedRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::prpc::_DownloadRequest_default_instance_._instance,
    &::prpc::_InfoHash_default_instance_._instance,
    &::prpc::_DownloadRespone_default_instance_._instance,
    &::prpc::_StatusRequest_default_instance_._instance,
    &::prpc::_TorrentStatus_default_instance_._instance,
    &::prpc::_StatusRespone_default_instance_._instance,
    &::prpc::_TorrentInfoReq_default_instance_._instance,
    &::prpc::_BtFile_default_instance_._instance,
    &::prpc::_TorrentInfo_default_instance_._instance,
    &::prpc::_TorrentInfoRes_default_instance_._instance,
    &::prpc::_RemoveTorrentReq_default_instance_._instance,
    &::prpc::_RemoveTorrentRes_default_instance_._instance,
    &::prpc::_FileProgressReq_default_instance_._instance,
    &::prpc::_FileProgressRes_default_instance_._instance,
    &::prpc::_FileCompletedReq_default_instance_._instance,
    &::prpc::_FileCompletedRes_default_instance_._instance,
};
const char descriptor_table_protodef_bt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\010bt.proto\022\004prpc\"\225\001\n\017DownloadRequest\022+\n\004"
    "type\030\001 \001(\0162\035.prpc.DownloadRequest.ReqTyp"
    "e\022\017\n\007content\030\002 \001(\014\022\021\n\tsave_path\030\003 \001(\t\"1\n"
    "\007ReqType\022\r\n\tMagnetUri\020\000\022\013\n\007Torrent\020\001\022\n\n\006"
    "Resume\020\002\")\n\010InfoHash\022\017\n\007version\030\001 \001(\005\022\014\n"
    "\004hash\030\002 \001(\014\"4\n\017DownloadRespone\022!\n\tinfo_h"
    "ash\030\001 \001(\0132\016.prpc.InfoHash\"2\n\rStatusReque"
    "st\022!\n\tinfo_hash\030\001 \003(\0132\016.prpc.InfoHash\"\311\001"
    "\n\rTorrentStatus\022!\n\tinfo_hash\030\001 \001(\0132\016.prp"
    "c.InfoHash\022\014\n\004name\030\002 \001(\t\022\035\n\025download_pay"
    "load_rate\030\003 \001(\005\022\022\n\ntotal_done\030\004 \001(\003\022\r\n\005t"
    "otal\030\005 \001(\003\022\020\n\010progress\030\006 \001(\002\022\021\n\tnum_peer"
    "s\030\007 \001(\005\022 \n\005state\030\010 \001(\0162\021.prpc.BtStateEnu"
    "m\":\n\rStatusRespone\022)\n\014status_array\030\001 \003(\013"
    "2\023.prpc.TorrentStatus\"3\n\016TorrentInfoReq\022"
    "!\n\tinfo_hash\030\001 \003(\0132\016.prpc.InfoHash\"\240\001\n\006B"
    "tFile\022\014\n\004name\030\001 \001(\t\022\r\n\005index\030\002 \001(\005\022\036\n\002st"
    "\030\003 \001(\0162\022.prpc.BtFile.State\022\022\n\ntotal_size"
    "\030\004 \001(\003\022\022\n\ndownloaded\030\005 \001(\003\"1\n\005State\022\010\n\004s"
    "top\020\000\022\017\n\013downloading\020\001\022\r\n\tcompleted\020\002\"\343\001"
    "\n\013TorrentInfo\022!\n\tinfo_hash\030\001 \001(\0132\016.prpc."
    "InfoHash\022\014\n\004name\030\002 \001(\t\022 \n\005state\030\003 \001(\0162\021."
    "prpc.BtStateEnum\022\021\n\tsave_path\030\004 \001(\t\022\033\n\005f"
    "iles\030\005 \003(\0132\014.prpc.BtFile\022\022\n\ntotal_size\030\006"
    " \001(\003\022\024\n\014piece_length\030\007 \001(\005\022\022\n\nnum_pieces"
    "\030\010 \001(\005\022\023\n\013resume_data\030\t \001(\014\"/\n\016TorrentIn"
    "foRes\022\035\n\002ti\030\001 \001(\0132\021.prpc.TorrentInfo\"5\n\020"
    "RemoveTorrentReq\022!\n\tinfo_hash\030\001 \001(\0132\016.pr"
    "pc.InfoHash\"\022\n\020RemoveTorrentRes\"4\n\017FileP"
    "rogressReq\022!\n\tinfo_hash\030\001 \001(\0132\016.prpc.Inf"
    "oHash\"Q\n\017FileProgressRes\022!\n\tinfo_hash\030\001 "
    "\001(\0132\016.prpc.InfoHash\022\033\n\005files\030\002 \003(\0132\014.prp"
    "c.BtFile\"\022\n\020FileCompletedReq\"I\n\020FileComp"
    "letedRes\022!\n\tinfo_hash\030\001 \001(\0132\016.prpc.InfoH"
    "ash\022\022\n\nfile_index\030\002 \001(\005*\216\001\n\013BtStateEnum\022"
    "\013\n\007unknown\020\000\022\022\n\016checking_files\020\001\022\030\n\024down"
    "loading_metadata\020\002\022\017\n\013downloading\020\003\022\014\n\010f"
    "inished\020\004\022\013\n\007seeding\020\005\022\030\n\024checking_resum"
    "e_data\020\0072\301\003\n\tBtService\0225\n\005Parse\022\025.prpc.D"
    "ownloadRequest\032\025.prpc.DownloadRespone\0228\n"
    "\010Download\022\025.prpc.DownloadRequest\032\025.prpc."
    "DownloadRespone\022\?\n\rRemoveTorrent\022\026.prpc."
    "RemoveTorrentReq\032\026.prpc.RemoveTorrentRes"
    "\0228\n\010OnStatus\022\023.prpc.StatusRequest\032\023.prpc"
    ".StatusRespone(\0010\001\022\?\n\rOnTorrentInfo\022\024.pr"
    "pc.TorrentInfoReq\032\024.prpc.TorrentInfoRes("
    "\0010\001\022E\n\017OnFileCompleted\022\026.prpc.FileComple"
    "tedReq\032\026.prpc.FileCompletedRes(\0010\001\022@\n\014Fi"
    "leProgress\022\025.prpc.FileProgressReq\032\025.prpc"
    ".FileProgressRes(\0010\001B\010Z\006./prpcb\006proto3"
};
static ::absl::once_flag descriptor_table_bt_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bt_2eproto = {
    false,
    false,
    1998,
    descriptor_table_protodef_bt_2eproto,
    "bt.proto",
    &descriptor_table_bt_2eproto_once,
    nullptr,
    0,
    16,
    schemas,
    file_default_instances,
    TableStruct_bt_2eproto::offsets,
    file_level_metadata_bt_2eproto,
    file_level_enum_descriptors_bt_2eproto,
    file_level_service_descriptors_bt_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bt_2eproto_getter() {
  return &descriptor_table_bt_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bt_2eproto(&descriptor_table_bt_2eproto);
namespace prpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadRequest_ReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bt_2eproto);
  return file_level_enum_descriptors_bt_2eproto[0];
}
bool DownloadRequest_ReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DownloadRequest_ReqType DownloadRequest::MagnetUri;
constexpr DownloadRequest_ReqType DownloadRequest::Torrent;
constexpr DownloadRequest_ReqType DownloadRequest::Resume;
constexpr DownloadRequest_ReqType DownloadRequest::ReqType_MIN;
constexpr DownloadRequest_ReqType DownloadRequest::ReqType_MAX;
constexpr int DownloadRequest::ReqType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BtFile_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bt_2eproto);
  return file_level_enum_descriptors_bt_2eproto[1];
}
bool BtFile_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BtFile_State BtFile::stop;
constexpr BtFile_State BtFile::downloading;
constexpr BtFile_State BtFile::completed;
constexpr BtFile_State BtFile::State_MIN;
constexpr BtFile_State BtFile::State_MAX;
constexpr int BtFile::State_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BtStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bt_2eproto);
  return file_level_enum_descriptors_bt_2eproto[2];
}
bool BtStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class DownloadRequest::_Internal {
 public:
};

DownloadRequest::DownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.DownloadRequest)
}
DownloadRequest::DownloadRequest(const DownloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownloadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_) {}

    , decltype(_impl_.save_path_) {}

    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_save_path().empty()) {
    _this->_impl_.save_path_.Set(from._internal_save_path(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:prpc.DownloadRequest)
}

inline void DownloadRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.content_) {}

    , decltype(_impl_.save_path_) {}

    , decltype(_impl_.type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DownloadRequest::~DownloadRequest() {
  // @@protoc_insertion_point(destructor:prpc.DownloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.save_path_.Destroy();
}

void DownloadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.DownloadRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.save_path_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.DownloadRequest.ReqType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::prpc::DownloadRequest_ReqType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string save_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_save_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prpc.DownloadRequest.save_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DownloadRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.DownloadRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.DownloadRequest.ReqType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // string save_path = 3;
  if (!this->_internal_save_path().empty()) {
    const std::string& _s = this->_internal_save_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "prpc.DownloadRequest.save_path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.DownloadRequest)
  return target;
}

::size_t DownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.DownloadRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_content());
  }

  // string save_path = 3;
  if (!this->_internal_save_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_save_path());
  }

  // .prpc.DownloadRequest.ReqType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadRequest::GetClassData() const { return &_class_data_; }


void DownloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownloadRequest*>(&to_msg);
  auto& from = static_cast<const DownloadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.DownloadRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_save_path().empty()) {
    _this->_internal_set_save_path(from._internal_save_path());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadRequest::CopyFrom(const DownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.DownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRequest::IsInitialized() const {
  return true;
}

void DownloadRequest::InternalSwap(DownloadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.save_path_, lhs_arena,
                                       &other->_impl_.save_path_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[0]);
}
// ===================================================================

class InfoHash::_Internal {
 public:
};

InfoHash::InfoHash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.InfoHash)
}
InfoHash::InfoHash(const InfoHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:prpc.InfoHash)
}

inline void InfoHash::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.version_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoHash::~InfoHash() {
  // @@protoc_insertion_point(destructor:prpc.InfoHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoHash::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void InfoHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoHash::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.InfoHash)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InfoHash::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.InfoHash)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.InfoHash)
  return target;
}

::size_t InfoHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.InfoHash)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoHash::GetClassData() const { return &_class_data_; }


void InfoHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoHash*>(&to_msg);
  auto& from = static_cast<const InfoHash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.InfoHash)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoHash::CopyFrom(const InfoHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.InfoHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoHash::IsInitialized() const {
  return true;
}

void InfoHash::InternalSwap(InfoHash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoHash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[1]);
}
// ===================================================================

class DownloadRespone::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const DownloadRespone* msg);
};

const ::prpc::InfoHash&
DownloadRespone::_Internal::info_hash(const DownloadRespone* msg) {
  return *msg->_impl_.info_hash_;
}
DownloadRespone::DownloadRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.DownloadRespone)
}
DownloadRespone::DownloadRespone(const DownloadRespone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownloadRespone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:prpc.DownloadRespone)
}

inline void DownloadRespone::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DownloadRespone::~DownloadRespone() {
  // @@protoc_insertion_point(destructor:prpc.DownloadRespone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownloadRespone::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void DownloadRespone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownloadRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.DownloadRespone)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadRespone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DownloadRespone::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.DownloadRespone)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.DownloadRespone)
  return target;
}

::size_t DownloadRespone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.DownloadRespone)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadRespone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownloadRespone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadRespone::GetClassData() const { return &_class_data_; }


void DownloadRespone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownloadRespone*>(&to_msg);
  auto& from = static_cast<const DownloadRespone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.DownloadRespone)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadRespone::CopyFrom(const DownloadRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.DownloadRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRespone::IsInitialized() const {
  return true;
}

void DownloadRespone::InternalSwap(DownloadRespone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_hash_, other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadRespone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[2]);
}
// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){from._impl_.info_hash_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prpc.StatusRequest)
}

inline void StatusRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:prpc.StatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_hash_.~RepeatedPtrField();
}

void StatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.StatusRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_hash_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_hash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StatusRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.StatusRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prpc.InfoHash info_hash = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_hash_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_hash(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.StatusRequest)
  return target;
}

::size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.StatusRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.InfoHash info_hash = 1;
  total_size += 1UL * this->_internal_info_hash_size();
  for (const auto& msg : this->_impl_.info_hash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRequest::GetClassData() const { return &_class_data_; }


void StatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusRequest*>(&to_msg);
  auto& from = static_cast<const StatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.StatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_hash_.MergeFrom(from._impl_.info_hash_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_hash_.InternalSwap(&other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[3]);
}
// ===================================================================

class TorrentStatus::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const TorrentStatus* msg);
};

const ::prpc::InfoHash&
TorrentStatus::_Internal::info_hash(const TorrentStatus* msg) {
  return *msg->_impl_.info_hash_;
}
TorrentStatus::TorrentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.TorrentStatus)
}
TorrentStatus::TorrentStatus(const TorrentStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TorrentStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.total_done_) {}

    , decltype(_impl_.download_payload_rate_) {}

    , decltype(_impl_.progress_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.num_peers_) {}

    , decltype(_impl_.state_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  ::memcpy(&_impl_.total_done_, &from._impl_.total_done_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.total_done_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:prpc.TorrentStatus)
}

inline void TorrentStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.total_done_) { ::int64_t{0} }

    , decltype(_impl_.download_payload_rate_) { 0 }

    , decltype(_impl_.progress_) { 0 }

    , decltype(_impl_.total_) { ::int64_t{0} }

    , decltype(_impl_.num_peers_) { 0 }

    , decltype(_impl_.state_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TorrentStatus::~TorrentStatus() {
  // @@protoc_insertion_point(destructor:prpc.TorrentStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TorrentStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void TorrentStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TorrentStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.TorrentStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  ::memset(&_impl_.total_done_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.total_done_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TorrentStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prpc.TorrentStatus.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 download_payload_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.download_payload_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total_done = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.total_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 num_peers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.num_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .prpc.BtStateEnum state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::prpc::BtStateEnum>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TorrentStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.TorrentStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "prpc.TorrentStatus.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 download_payload_rate = 3;
  if (this->_internal_download_payload_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_download_payload_rate(), target);
  }

  // int64 total_done = 4;
  if (this->_internal_total_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_total_done(), target);
  }

  // int64 total = 5;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_total(), target);
  }

  // float progress = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  ::uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_progress(), target);
  }

  // int32 num_peers = 7;
  if (this->_internal_num_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_num_peers(), target);
  }

  // .prpc.BtStateEnum state = 8;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.TorrentStatus)
  return target;
}

::size_t TorrentStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.TorrentStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  // int64 total_done = 4;
  if (this->_internal_total_done() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_done());
  }

  // int32 download_payload_rate = 3;
  if (this->_internal_download_payload_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_download_payload_rate());
  }

  // float progress = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  ::uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    total_size += 5;
  }

  // int64 total = 5;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total());
  }

  // int32 num_peers = 7;
  if (this->_internal_num_peers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_peers());
  }

  // .prpc.BtStateEnum state = 8;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TorrentStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TorrentStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TorrentStatus::GetClassData() const { return &_class_data_; }


void TorrentStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TorrentStatus*>(&to_msg);
  auto& from = static_cast<const TorrentStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.TorrentStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  if (from._internal_total_done() != 0) {
    _this->_internal_set_total_done(from._internal_total_done());
  }
  if (from._internal_download_payload_rate() != 0) {
    _this->_internal_set_download_payload_rate(from._internal_download_payload_rate());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_progress = from._internal_progress();
  ::uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_num_peers() != 0) {
    _this->_internal_set_num_peers(from._internal_num_peers());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TorrentStatus::CopyFrom(const TorrentStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.TorrentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorrentStatus::IsInitialized() const {
  return true;
}

void TorrentStatus::InternalSwap(TorrentStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TorrentStatus, _impl_.state_)
      + sizeof(TorrentStatus::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(TorrentStatus, _impl_.info_hash_)>(
          reinterpret_cast<char*>(&_impl_.info_hash_),
          reinterpret_cast<char*>(&other->_impl_.info_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TorrentStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[4]);
}
// ===================================================================

class StatusRespone::_Internal {
 public:
};

StatusRespone::StatusRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.StatusRespone)
}
StatusRespone::StatusRespone(const StatusRespone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusRespone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_array_){from._impl_.status_array_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prpc.StatusRespone)
}

inline void StatusRespone::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_array_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusRespone::~StatusRespone() {
  // @@protoc_insertion_point(destructor:prpc.StatusRespone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusRespone::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_array_.~RepeatedPtrField();
}

void StatusRespone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.StatusRespone)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_array_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusRespone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prpc.TorrentStatus status_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status_array(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StatusRespone::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.StatusRespone)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prpc.TorrentStatus status_array = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_array_size()); i < n; i++) {
    const auto& repfield = this->_internal_status_array(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.StatusRespone)
  return target;
}

::size_t StatusRespone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.StatusRespone)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.TorrentStatus status_array = 1;
  total_size += 1UL * this->_internal_status_array_size();
  for (const auto& msg : this->_impl_.status_array_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusRespone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusRespone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusRespone::GetClassData() const { return &_class_data_; }


void StatusRespone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusRespone*>(&to_msg);
  auto& from = static_cast<const StatusRespone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.StatusRespone)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.status_array_.MergeFrom(from._impl_.status_array_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusRespone::CopyFrom(const StatusRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.StatusRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRespone::IsInitialized() const {
  return true;
}

void StatusRespone::InternalSwap(StatusRespone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.status_array_.InternalSwap(&other->_impl_.status_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRespone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[5]);
}
// ===================================================================

class TorrentInfoReq::_Internal {
 public:
};

TorrentInfoReq::TorrentInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.TorrentInfoReq)
}
TorrentInfoReq::TorrentInfoReq(const TorrentInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TorrentInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){from._impl_.info_hash_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prpc.TorrentInfoReq)
}

inline void TorrentInfoReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TorrentInfoReq::~TorrentInfoReq() {
  // @@protoc_insertion_point(destructor:prpc.TorrentInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TorrentInfoReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_hash_.~RepeatedPtrField();
}

void TorrentInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TorrentInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.TorrentInfoReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_hash_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TorrentInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_hash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TorrentInfoReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.TorrentInfoReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prpc.InfoHash info_hash = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_hash_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_hash(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.TorrentInfoReq)
  return target;
}

::size_t TorrentInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.TorrentInfoReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.InfoHash info_hash = 1;
  total_size += 1UL * this->_internal_info_hash_size();
  for (const auto& msg : this->_impl_.info_hash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TorrentInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TorrentInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TorrentInfoReq::GetClassData() const { return &_class_data_; }


void TorrentInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TorrentInfoReq*>(&to_msg);
  auto& from = static_cast<const TorrentInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.TorrentInfoReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_hash_.MergeFrom(from._impl_.info_hash_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TorrentInfoReq::CopyFrom(const TorrentInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.TorrentInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorrentInfoReq::IsInitialized() const {
  return true;
}

void TorrentInfoReq::InternalSwap(TorrentInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_hash_.InternalSwap(&other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TorrentInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[6]);
}
// ===================================================================

class BtFile::_Internal {
 public:
};

BtFile::BtFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.BtFile)
}
BtFile::BtFile(const BtFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BtFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.st_) {}

    , decltype(_impl_.total_size_) {}

    , decltype(_impl_.downloaded_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.downloaded_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.downloaded_));
  // @@protoc_insertion_point(copy_constructor:prpc.BtFile)
}

inline void BtFile::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.index_) { 0 }

    , decltype(_impl_.st_) { 0 }

    , decltype(_impl_.total_size_) { ::int64_t{0} }

    , decltype(_impl_.downloaded_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BtFile::~BtFile() {
  // @@protoc_insertion_point(destructor:prpc.BtFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BtFile::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void BtFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BtFile::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.BtFile)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.downloaded_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.downloaded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BtFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prpc.BtFile.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .prpc.BtFile.State st = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_st(static_cast<::prpc::BtFile_State>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 downloaded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BtFile::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.BtFile)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "prpc.BtFile.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_index(), target);
  }

  // .prpc.BtFile.State st = 3;
  if (this->_internal_st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_st(), target);
  }

  // int64 total_size = 4;
  if (this->_internal_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_total_size(), target);
  }

  // int64 downloaded = 5;
  if (this->_internal_downloaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_downloaded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.BtFile)
  return target;
}

::size_t BtFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.BtFile)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // .prpc.BtFile.State st = 3;
  if (this->_internal_st() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_st());
  }

  // int64 total_size = 4;
  if (this->_internal_total_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_size());
  }

  // int64 downloaded = 5;
  if (this->_internal_downloaded() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_downloaded());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BtFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BtFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BtFile::GetClassData() const { return &_class_data_; }


void BtFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BtFile*>(&to_msg);
  auto& from = static_cast<const BtFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.BtFile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_st() != 0) {
    _this->_internal_set_st(from._internal_st());
  }
  if (from._internal_total_size() != 0) {
    _this->_internal_set_total_size(from._internal_total_size());
  }
  if (from._internal_downloaded() != 0) {
    _this->_internal_set_downloaded(from._internal_downloaded());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BtFile::CopyFrom(const BtFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.BtFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BtFile::IsInitialized() const {
  return true;
}

void BtFile::InternalSwap(BtFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BtFile, _impl_.downloaded_)
      + sizeof(BtFile::_impl_.downloaded_)
      - PROTOBUF_FIELD_OFFSET(BtFile, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BtFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[7]);
}
// ===================================================================

class TorrentInfo::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const TorrentInfo* msg);
};

const ::prpc::InfoHash&
TorrentInfo::_Internal::info_hash(const TorrentInfo* msg) {
  return *msg->_impl_.info_hash_;
}
TorrentInfo::TorrentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.TorrentInfo)
}
TorrentInfo::TorrentInfo(const TorrentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TorrentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.save_path_) {}

    , decltype(_impl_.resume_data_) {}

    , decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.state_) {}

    , decltype(_impl_.piece_length_) {}

    , decltype(_impl_.total_size_) {}

    , decltype(_impl_.num_pieces_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_save_path().empty()) {
    _this->_impl_.save_path_.Set(from._internal_save_path(), _this->GetArenaForAllocation());
  }
  _impl_.resume_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.resume_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resume_data().empty()) {
    _this->_impl_.resume_data_.Set(from._internal_resume_data(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_pieces_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.num_pieces_));
  // @@protoc_insertion_point(copy_constructor:prpc.TorrentInfo)
}

inline void TorrentInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.save_path_) {}

    , decltype(_impl_.resume_data_) {}

    , decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.state_) { 0 }

    , decltype(_impl_.piece_length_) { 0 }

    , decltype(_impl_.total_size_) { ::int64_t{0} }

    , decltype(_impl_.num_pieces_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.save_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.save_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resume_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.resume_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TorrentInfo::~TorrentInfo() {
  // @@protoc_insertion_point(destructor:prpc.TorrentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TorrentInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.save_path_.Destroy();
  _impl_.resume_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void TorrentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TorrentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.TorrentInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.save_path_.ClearToEmpty();
  _impl_.resume_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_pieces_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.num_pieces_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TorrentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prpc.TorrentInfo.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .prpc.BtStateEnum state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::prpc::BtStateEnum>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string save_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_save_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prpc.TorrentInfo.save_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .prpc.BtFile files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 piece_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.piece_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 num_pieces = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.num_pieces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes resume_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_resume_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TorrentInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.TorrentInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "prpc.TorrentInfo.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .prpc.BtStateEnum state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_state(), target);
  }

  // string save_path = 4;
  if (!this->_internal_save_path().empty()) {
    const std::string& _s = this->_internal_save_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "prpc.TorrentInfo.save_path");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated .prpc.BtFile files = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 total_size = 6;
  if (this->_internal_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_total_size(), target);
  }

  // int32 piece_length = 7;
  if (this->_internal_piece_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_piece_length(), target);
  }

  // int32 num_pieces = 8;
  if (this->_internal_num_pieces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_num_pieces(), target);
  }

  // bytes resume_data = 9;
  if (!this->_internal_resume_data().empty()) {
    const std::string& _s = this->_internal_resume_data();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.TorrentInfo)
  return target;
}

::size_t TorrentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.TorrentInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.BtFile files = 5;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string save_path = 4;
  if (!this->_internal_save_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_save_path());
  }

  // bytes resume_data = 9;
  if (!this->_internal_resume_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_resume_data());
  }

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  // .prpc.BtStateEnum state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 piece_length = 7;
  if (this->_internal_piece_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_piece_length());
  }

  // int64 total_size = 6;
  if (this->_internal_total_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_size());
  }

  // int32 num_pieces = 8;
  if (this->_internal_num_pieces() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_pieces());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TorrentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TorrentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TorrentInfo::GetClassData() const { return &_class_data_; }


void TorrentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TorrentInfo*>(&to_msg);
  auto& from = static_cast<const TorrentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.TorrentInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_save_path().empty()) {
    _this->_internal_set_save_path(from._internal_save_path());
  }
  if (!from._internal_resume_data().empty()) {
    _this->_internal_set_resume_data(from._internal_resume_data());
  }
  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_piece_length() != 0) {
    _this->_internal_set_piece_length(from._internal_piece_length());
  }
  if (from._internal_total_size() != 0) {
    _this->_internal_set_total_size(from._internal_total_size());
  }
  if (from._internal_num_pieces() != 0) {
    _this->_internal_set_num_pieces(from._internal_num_pieces());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TorrentInfo::CopyFrom(const TorrentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.TorrentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorrentInfo::IsInitialized() const {
  return true;
}

void TorrentInfo::InternalSwap(TorrentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.save_path_, lhs_arena,
                                       &other->_impl_.save_path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resume_data_, lhs_arena,
                                       &other->_impl_.resume_data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TorrentInfo, _impl_.num_pieces_)
      + sizeof(TorrentInfo::_impl_.num_pieces_)
      - PROTOBUF_FIELD_OFFSET(TorrentInfo, _impl_.info_hash_)>(
          reinterpret_cast<char*>(&_impl_.info_hash_),
          reinterpret_cast<char*>(&other->_impl_.info_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TorrentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[8]);
}
// ===================================================================

class TorrentInfoRes::_Internal {
 public:
  static const ::prpc::TorrentInfo& ti(const TorrentInfoRes* msg);
};

const ::prpc::TorrentInfo&
TorrentInfoRes::_Internal::ti(const TorrentInfoRes* msg) {
  return *msg->_impl_.ti_;
}
TorrentInfoRes::TorrentInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.TorrentInfoRes)
}
TorrentInfoRes::TorrentInfoRes(const TorrentInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TorrentInfoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ti_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ti()) {
    _this->_impl_.ti_ = new ::prpc::TorrentInfo(*from._impl_.ti_);
  }
  // @@protoc_insertion_point(copy_constructor:prpc.TorrentInfoRes)
}

inline void TorrentInfoRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ti_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TorrentInfoRes::~TorrentInfoRes() {
  // @@protoc_insertion_point(destructor:prpc.TorrentInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TorrentInfoRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ti_;
}

void TorrentInfoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TorrentInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.TorrentInfoRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ti_ != nullptr) {
    delete _impl_.ti_;
  }
  _impl_.ti_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TorrentInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.TorrentInfo ti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ti(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TorrentInfoRes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.TorrentInfoRes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.TorrentInfo ti = 1;
  if (this->_internal_has_ti()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ti(this),
        _Internal::ti(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.TorrentInfoRes)
  return target;
}

::size_t TorrentInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.TorrentInfoRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prpc.TorrentInfo ti = 1;
  if (this->_internal_has_ti()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ti_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TorrentInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TorrentInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TorrentInfoRes::GetClassData() const { return &_class_data_; }


void TorrentInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TorrentInfoRes*>(&to_msg);
  auto& from = static_cast<const TorrentInfoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.TorrentInfoRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ti()) {
    _this->_internal_mutable_ti()->::prpc::TorrentInfo::MergeFrom(
        from._internal_ti());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TorrentInfoRes::CopyFrom(const TorrentInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.TorrentInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorrentInfoRes::IsInitialized() const {
  return true;
}

void TorrentInfoRes::InternalSwap(TorrentInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ti_, other->_impl_.ti_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TorrentInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[9]);
}
// ===================================================================

class RemoveTorrentReq::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const RemoveTorrentReq* msg);
};

const ::prpc::InfoHash&
RemoveTorrentReq::_Internal::info_hash(const RemoveTorrentReq* msg) {
  return *msg->_impl_.info_hash_;
}
RemoveTorrentReq::RemoveTorrentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RemoveTorrentReq)
}
RemoveTorrentReq::RemoveTorrentReq(const RemoveTorrentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveTorrentReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:prpc.RemoveTorrentReq)
}

inline void RemoveTorrentReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveTorrentReq::~RemoveTorrentReq() {
  // @@protoc_insertion_point(destructor:prpc.RemoveTorrentReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveTorrentReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void RemoveTorrentReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveTorrentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RemoveTorrentReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveTorrentReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoveTorrentReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RemoveTorrentReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RemoveTorrentReq)
  return target;
}

::size_t RemoveTorrentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RemoveTorrentReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTorrentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveTorrentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTorrentReq::GetClassData() const { return &_class_data_; }


void RemoveTorrentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveTorrentReq*>(&to_msg);
  auto& from = static_cast<const RemoveTorrentReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RemoveTorrentReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTorrentReq::CopyFrom(const RemoveTorrentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RemoveTorrentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTorrentReq::IsInitialized() const {
  return true;
}

void RemoveTorrentReq::InternalSwap(RemoveTorrentReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_hash_, other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTorrentReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[10]);
}
// ===================================================================

class RemoveTorrentRes::_Internal {
 public:
};

RemoveTorrentRes::RemoveTorrentRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:prpc.RemoveTorrentRes)
}
RemoveTorrentRes::RemoveTorrentRes(const RemoveTorrentRes& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RemoveTorrentRes* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prpc.RemoveTorrentRes)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTorrentRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTorrentRes::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveTorrentRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[11]);
}
// ===================================================================

class FileProgressReq::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const FileProgressReq* msg);
};

const ::prpc::InfoHash&
FileProgressReq::_Internal::info_hash(const FileProgressReq* msg) {
  return *msg->_impl_.info_hash_;
}
FileProgressReq::FileProgressReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.FileProgressReq)
}
FileProgressReq::FileProgressReq(const FileProgressReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileProgressReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:prpc.FileProgressReq)
}

inline void FileProgressReq::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileProgressReq::~FileProgressReq() {
  // @@protoc_insertion_point(destructor:prpc.FileProgressReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileProgressReq::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void FileProgressReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileProgressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.FileProgressReq)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileProgressReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileProgressReq::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.FileProgressReq)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.FileProgressReq)
  return target;
}

::size_t FileProgressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.FileProgressReq)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileProgressReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileProgressReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileProgressReq::GetClassData() const { return &_class_data_; }


void FileProgressReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileProgressReq*>(&to_msg);
  auto& from = static_cast<const FileProgressReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.FileProgressReq)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileProgressReq::CopyFrom(const FileProgressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.FileProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileProgressReq::IsInitialized() const {
  return true;
}

void FileProgressReq::InternalSwap(FileProgressReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_hash_, other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileProgressReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[12]);
}
// ===================================================================

class FileProgressRes::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const FileProgressRes* msg);
};

const ::prpc::InfoHash&
FileProgressRes::_Internal::info_hash(const FileProgressRes* msg) {
  return *msg->_impl_.info_hash_;
}
FileProgressRes::FileProgressRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.FileProgressRes)
}
FileProgressRes::FileProgressRes(const FileProgressRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileProgressRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:prpc.FileProgressRes)
}

inline void FileProgressRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , decltype(_impl_.info_hash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileProgressRes::~FileProgressRes() {
  // @@protoc_insertion_point(destructor:prpc.FileProgressRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileProgressRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void FileProgressRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileProgressRes::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.FileProgressRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileProgressRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .prpc.BtFile files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileProgressRes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.FileProgressRes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  // repeated .prpc.BtFile files = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.FileProgressRes)
  return target;
}

::size_t FileProgressRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.FileProgressRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.BtFile files = 2;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileProgressRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileProgressRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileProgressRes::GetClassData() const { return &_class_data_; }


void FileProgressRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileProgressRes*>(&to_msg);
  auto& from = static_cast<const FileProgressRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.FileProgressRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileProgressRes::CopyFrom(const FileProgressRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.FileProgressRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileProgressRes::IsInitialized() const {
  return true;
}

void FileProgressRes::InternalSwap(FileProgressRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  swap(_impl_.info_hash_, other->_impl_.info_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileProgressRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[13]);
}
// ===================================================================

class FileCompletedReq::_Internal {
 public:
};

FileCompletedReq::FileCompletedReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:prpc.FileCompletedReq)
}
FileCompletedReq::FileCompletedReq(const FileCompletedReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FileCompletedReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prpc.FileCompletedReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileCompletedReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileCompletedReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FileCompletedReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[14]);
}
// ===================================================================

class FileCompletedRes::_Internal {
 public:
  static const ::prpc::InfoHash& info_hash(const FileCompletedRes* msg);
};

const ::prpc::InfoHash&
FileCompletedRes::_Internal::info_hash(const FileCompletedRes* msg) {
  return *msg->_impl_.info_hash_;
}
FileCompletedRes::FileCompletedRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.FileCompletedRes)
}
FileCompletedRes::FileCompletedRes(const FileCompletedRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileCompletedRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.file_index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info_hash()) {
    _this->_impl_.info_hash_ = new ::prpc::InfoHash(*from._impl_.info_hash_);
  }
  _this->_impl_.file_index_ = from._impl_.file_index_;
  // @@protoc_insertion_point(copy_constructor:prpc.FileCompletedRes)
}

inline void FileCompletedRes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.info_hash_){nullptr}
    , decltype(_impl_.file_index_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileCompletedRes::~FileCompletedRes() {
  // @@protoc_insertion_point(destructor:prpc.FileCompletedRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileCompletedRes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_hash_;
}

void FileCompletedRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileCompletedRes::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.FileCompletedRes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_hash_ != nullptr) {
    delete _impl_.info_hash_;
  }
  _impl_.info_hash_ = nullptr;
  _impl_.file_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileCompletedRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .prpc.InfoHash info_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_hash(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 file_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.file_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileCompletedRes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.FileCompletedRes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info_hash(this),
        _Internal::info_hash(this).GetCachedSize(), target, stream);
  }

  // int32 file_index = 2;
  if (this->_internal_file_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_file_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.FileCompletedRes)
  return target;
}

::size_t FileCompletedRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.FileCompletedRes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prpc.InfoHash info_hash = 1;
  if (this->_internal_has_info_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_hash_);
  }

  // int32 file_index = 2;
  if (this->_internal_file_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_file_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileCompletedRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileCompletedRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileCompletedRes::GetClassData() const { return &_class_data_; }


void FileCompletedRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileCompletedRes*>(&to_msg);
  auto& from = static_cast<const FileCompletedRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.FileCompletedRes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info_hash()) {
    _this->_internal_mutable_info_hash()->::prpc::InfoHash::MergeFrom(
        from._internal_info_hash());
  }
  if (from._internal_file_index() != 0) {
    _this->_internal_set_file_index(from._internal_file_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileCompletedRes::CopyFrom(const FileCompletedRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.FileCompletedRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCompletedRes::IsInitialized() const {
  return true;
}

void FileCompletedRes::InternalSwap(FileCompletedRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileCompletedRes, _impl_.file_index_)
      + sizeof(FileCompletedRes::_impl_.file_index_)
      - PROTOBUF_FIELD_OFFSET(FileCompletedRes, _impl_.info_hash_)>(
          reinterpret_cast<char*>(&_impl_.info_hash_),
          reinterpret_cast<char*>(&other->_impl_.info_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileCompletedRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bt_2eproto_getter, &descriptor_table_bt_2eproto_once,
      file_level_metadata_bt_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prpc::DownloadRequest*
Arena::CreateMaybeMessage< ::prpc::DownloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::DownloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::InfoHash*
Arena::CreateMaybeMessage< ::prpc::InfoHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::InfoHash >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::DownloadRespone*
Arena::CreateMaybeMessage< ::prpc::DownloadRespone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::DownloadRespone >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::StatusRequest*
Arena::CreateMaybeMessage< ::prpc::StatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::TorrentStatus*
Arena::CreateMaybeMessage< ::prpc::TorrentStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::TorrentStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::StatusRespone*
Arena::CreateMaybeMessage< ::prpc::StatusRespone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::StatusRespone >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::TorrentInfoReq*
Arena::CreateMaybeMessage< ::prpc::TorrentInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::TorrentInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::BtFile*
Arena::CreateMaybeMessage< ::prpc::BtFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::BtFile >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::TorrentInfo*
Arena::CreateMaybeMessage< ::prpc::TorrentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::TorrentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::TorrentInfoRes*
Arena::CreateMaybeMessage< ::prpc::TorrentInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::TorrentInfoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::RemoveTorrentReq*
Arena::CreateMaybeMessage< ::prpc::RemoveTorrentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::RemoveTorrentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::RemoveTorrentRes*
Arena::CreateMaybeMessage< ::prpc::RemoveTorrentRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::RemoveTorrentRes >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::FileProgressReq*
Arena::CreateMaybeMessage< ::prpc::FileProgressReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::FileProgressReq >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::FileProgressRes*
Arena::CreateMaybeMessage< ::prpc::FileProgressRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::FileProgressRes >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::FileCompletedReq*
Arena::CreateMaybeMessage< ::prpc::FileCompletedReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::FileCompletedReq >(arena);
}
template<> PROTOBUF_NOINLINE ::prpc::FileCompletedRes*
Arena::CreateMaybeMessage< ::prpc::FileCompletedRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prpc::FileCompletedRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
