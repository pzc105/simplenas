// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: danmaku.proto

#include "danmaku.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace prpc {
        template <typename>
PROTOBUF_CONSTEXPR Danmaku::Danmaku(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_id_)*/ ::int64_t{0},
      /*decltype(_impl_.s_time_)*/ ::int64_t{0},
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.color_)*/ 0,
      /*decltype(_impl_.d_time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct DanmakuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmakuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmakuDefaultTypeInternal() {}
  union {
    Danmaku _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmakuDefaultTypeInternal _Danmaku_default_instance_;
}  // namespace prpc
static ::_pb::Metadata file_level_metadata_danmaku_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_danmaku_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_danmaku_2eproto = nullptr;
const ::uint32_t TableStruct_danmaku_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.user_name_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.s_time_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.text_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::prpc::Danmaku, _impl_.d_time_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::prpc::Danmaku)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::prpc::_Danmaku_default_instance_._instance,
};
const char descriptor_table_protodef_danmaku_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rdanmaku.proto\022\004prpc\"\204\001\n\007Danmaku\022\n\n\002id\030"
    "\001 \001(\t\022\017\n\007user_id\030\002 \001(\003\022\021\n\tuser_name\030\003 \001("
    "\t\022\016\n\006s_time\030\004 \001(\003\022\014\n\004text\030\005 \001(\t\022\014\n\004type\030"
    "\006 \001(\005\022\r\n\005color\030\007 \001(\005\022\016\n\006d_time\030\010 \001(\001B\010Z\006"
    "./prpcb\006proto3"
};
static ::absl::once_flag descriptor_table_danmaku_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_danmaku_2eproto = {
    false,
    false,
    174,
    descriptor_table_protodef_danmaku_2eproto,
    "danmaku.proto",
    &descriptor_table_danmaku_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_danmaku_2eproto::offsets,
    file_level_metadata_danmaku_2eproto,
    file_level_enum_descriptors_danmaku_2eproto,
    file_level_service_descriptors_danmaku_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_danmaku_2eproto_getter() {
  return &descriptor_table_danmaku_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_danmaku_2eproto(&descriptor_table_danmaku_2eproto);
namespace prpc {
// ===================================================================

class Danmaku::_Internal {
 public:
};

Danmaku::Danmaku(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.Danmaku)
}
Danmaku::Danmaku(const Danmaku& from) : ::google::protobuf::Message() {
  Danmaku* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){},
      decltype(_impl_.user_name_){},
      decltype(_impl_.text_){},
      decltype(_impl_.user_id_){},
      decltype(_impl_.s_time_){},
      decltype(_impl_.type_){},
      decltype(_impl_.color_){},
      decltype(_impl_.d_time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.d_time_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.d_time_));

  // @@protoc_insertion_point(copy_constructor:prpc.Danmaku)
}
inline void Danmaku::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){},
      decltype(_impl_.user_name_){},
      decltype(_impl_.text_){},
      decltype(_impl_.user_id_){::int64_t{0}},
      decltype(_impl_.s_time_){::int64_t{0}},
      decltype(_impl_.type_){0},
      decltype(_impl_.color_){0},
      decltype(_impl_.d_time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Danmaku::~Danmaku() {
  // @@protoc_insertion_point(destructor:prpc.Danmaku)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Danmaku::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.text_.Destroy();
}
void Danmaku::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Danmaku::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.Danmaku)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.user_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.d_time_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.d_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Danmaku::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 44, 2> Danmaku::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Danmaku_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double d_time = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.d_time_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.id_)}},
    // int64 user_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Danmaku, _impl_.user_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.user_id_)}},
    // string user_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.user_name_)}},
    // int64 s_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Danmaku, _impl_.s_time_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.s_time_)}},
    // string text = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.text_)}},
    // int32 type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Danmaku, _impl_.type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.type_)}},
    // int32 color = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Danmaku, _impl_.color_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 user_id = 2;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string user_name = 3;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.user_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 s_time = 4;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.s_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string text = 5;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 type = 6;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 color = 7;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double d_time = 8;
    {PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.d_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\14\2\0\11\0\4\0\0\0\0\0\0\0\0\0\0"
    "prpc.Danmaku"
    "id"
    "user_name"
    "text"
  }},
};

::uint8_t* Danmaku::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.Danmaku)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.Danmaku.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_user_id(), target);
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    const std::string& _s = this->_internal_user_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.Danmaku.user_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 s_time = 4;
  if (this->_internal_s_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_s_time(), target);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.Danmaku.text");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_type(), target);
  }

  // int32 color = 7;
  if (this->_internal_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_color(), target);
  }

  // double d_time = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_time = this->_internal_d_time();
  ::uint64_t raw_d_time;
  memcpy(&raw_d_time, &tmp_d_time, sizeof(tmp_d_time));
  if (raw_d_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_d_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.Danmaku)
  return target;
}

::size_t Danmaku::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.Danmaku)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_user_id());
  }

  // int64 s_time = 4;
  if (this->_internal_s_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_s_time());
  }

  // int32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // int32 color = 7;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_color());
  }

  // double d_time = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_time = this->_internal_d_time();
  ::uint64_t raw_d_time;
  memcpy(&raw_d_time, &tmp_d_time, sizeof(tmp_d_time));
  if (raw_d_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Danmaku::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Danmaku::MergeImpl
};
const ::google::protobuf::Message::ClassData*Danmaku::GetClassData() const { return &_class_data_; }


void Danmaku::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Danmaku*>(&to_msg);
  auto& from = static_cast<const Danmaku&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.Danmaku)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_s_time() != 0) {
    _this->_internal_set_s_time(from._internal_s_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d_time = from._internal_d_time();
  ::uint64_t raw_d_time;
  memcpy(&raw_d_time, &tmp_d_time, sizeof(tmp_d_time));
  if (raw_d_time != 0) {
    _this->_internal_set_d_time(from._internal_d_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Danmaku::CopyFrom(const Danmaku& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.Danmaku)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Danmaku::IsInitialized() const {
  return true;
}

void Danmaku::InternalSwap(Danmaku* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.d_time_)
      + sizeof(Danmaku::_impl_.d_time_)
      - PROTOBUF_FIELD_OFFSET(Danmaku, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::google::protobuf::Metadata Danmaku::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_danmaku_2eproto_getter, &descriptor_table_danmaku_2eproto_once,
      file_level_metadata_danmaku_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
