// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bt.proto

#include "bt.pb.h"
#include "bt.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace prpc {

static const char* BtService_method_names[] = {
  "/prpc.BtService/Parse",
  "/prpc.BtService/Download",
  "/prpc.BtService/RemoveTorrent",
  "/prpc.BtService/FileProgress",
  "/prpc.BtService/OnStatus",
  "/prpc.BtService/OnTorrentInfo",
  "/prpc.BtService/OnFileCompleted",
};

std::unique_ptr< BtService::Stub> BtService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BtService::Stub> stub(new BtService::Stub(channel, options));
  return stub;
}

BtService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Parse_(BtService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Download_(BtService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveTorrent_(BtService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FileProgress_(BtService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnStatus_(BtService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_OnTorrentInfo_(BtService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_OnFileCompleted_(BtService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BtService::Stub::Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Parse_, context, request, response);
}

void BtService::Stub::async::Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parse_, context, request, response, std::move(f));
}

void BtService::Stub::async::Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* BtService::Stub::PrepareAsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DownloadRespone, ::prpc::DownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Parse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* BtService::Stub::AsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BtService::Stub::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Download_, context, request, response);
}

void BtService::Stub::async::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, std::move(f));
}

void BtService::Stub::async::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* BtService::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DownloadRespone, ::prpc::DownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Download_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* BtService::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BtService::Stub::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::prpc::RemoveTorrentRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveTorrent_, context, request, response);
}

void BtService::Stub::async::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveTorrent_, context, request, response, std::move(f));
}

void BtService::Stub::async::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveTorrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* BtService::Stub::PrepareAsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::RemoveTorrentRes, ::prpc::RemoveTorrentReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveTorrent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* BtService::Stub::AsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveTorrentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BtService::Stub::FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::prpc::FileProgressRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::FileProgressReq, ::prpc::FileProgressRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FileProgress_, context, request, response);
}

void BtService::Stub::async::FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::FileProgressReq, ::prpc::FileProgressRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FileProgress_, context, request, response, std::move(f));
}

void BtService::Stub::async::FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FileProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>* BtService::Stub::PrepareAsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::FileProgressRes, ::prpc::FileProgressReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FileProgress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>* BtService::Stub::AsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFileProgressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* BtService::Stub::OnStatusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::prpc::StatusRequest, ::prpc::StatusRespone>::Create(channel_.get(), rpcmethod_OnStatus_, context);
}

void BtService::Stub::async::OnStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::StatusRequest,::prpc::StatusRespone>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::prpc::StatusRequest,::prpc::StatusRespone>::Create(stub_->channel_.get(), stub_->rpcmethod_OnStatus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* BtService::Stub::AsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::StatusRequest, ::prpc::StatusRespone>::Create(channel_.get(), cq, rpcmethod_OnStatus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* BtService::Stub::PrepareAsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::StatusRequest, ::prpc::StatusRespone>::Create(channel_.get(), cq, rpcmethod_OnStatus_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* BtService::Stub::OnTorrentInfoRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>::Create(channel_.get(), rpcmethod_OnTorrentInfo_, context);
}

void BtService::Stub::async::OnTorrentInfo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::TorrentInfoReq,::prpc::TorrentInfoRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::prpc::TorrentInfoReq,::prpc::TorrentInfoRes>::Create(stub_->channel_.get(), stub_->rpcmethod_OnTorrentInfo_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* BtService::Stub::AsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>::Create(channel_.get(), cq, rpcmethod_OnTorrentInfo_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* BtService::Stub::PrepareAsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>::Create(channel_.get(), cq, rpcmethod_OnTorrentInfo_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* BtService::Stub::OnFileCompletedRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>::Create(channel_.get(), rpcmethod_OnFileCompleted_, context);
}

void BtService::Stub::async::OnFileCompleted(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::FileCompletedReq,::prpc::FileCompletedRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::prpc::FileCompletedReq,::prpc::FileCompletedRes>::Create(stub_->channel_.get(), stub_->rpcmethod_OnFileCompleted_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* BtService::Stub::AsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>::Create(channel_.get(), cq, rpcmethod_OnFileCompleted_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* BtService::Stub::PrepareAsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>::Create(channel_.get(), cq, rpcmethod_OnFileCompleted_, context, false, nullptr);
}

BtService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BtService::Service, ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DownloadRequest* req,
             ::prpc::DownloadRespone* resp) {
               return service->Parse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BtService::Service, ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DownloadRequest* req,
             ::prpc::DownloadRespone* resp) {
               return service->Download(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BtService::Service, ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::RemoveTorrentReq* req,
             ::prpc::RemoveTorrentRes* resp) {
               return service->RemoveTorrent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BtService::Service, ::prpc::FileProgressReq, ::prpc::FileProgressRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::FileProgressReq* req,
             ::prpc::FileProgressRes* resp) {
               return service->FileProgress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BtService::Service, ::prpc::StatusRequest, ::prpc::StatusRespone>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::prpc::StatusRespone,
             ::prpc::StatusRequest>* stream) {
               return service->OnStatus(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BtService::Service, ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::prpc::TorrentInfoRes,
             ::prpc::TorrentInfoReq>* stream) {
               return service->OnTorrentInfo(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BtService_method_names[6],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BtService::Service, ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>(
          [](BtService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::prpc::FileCompletedRes,
             ::prpc::FileCompletedReq>* stream) {
               return service->OnFileCompleted(ctx, stream);
             }, this)));
}

BtService::Service::~Service() {
}

::grpc::Status BtService::Service::Parse(::grpc::ServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::Download(::grpc::ServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::RemoveTorrent(::grpc::ServerContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::FileProgress(::grpc::ServerContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::OnStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::OnTorrentInfo(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BtService::Service::OnFileCompleted(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace prpc

