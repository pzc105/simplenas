// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace prpc {

static const char* ChatService_method_names[] = {
  "/prpc.ChatService/QueryChatRoomServer",
  "/prpc.ChatService/CreateChatRoom",
  "/prpc.ChatService/QueryChatRoomInfo",
  "/prpc.ChatService/JoinRoom",
  "/prpc.ChatService/LeaveRoom",
  "/prpc.ChatService/Send2ChatRoom",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryChatRoomServer_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChatRoom_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryChatRoomInfo_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinRoom_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveRoom_(ChatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send2ChatRoom_(ChatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::QueryChatRoomServer(::grpc::ClientContext* context, const ::prpc::QueryChatRoomServerReq& request, ::prpc::QueryChatRoomServerRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QueryChatRoomServerReq, ::prpc::QueryChatRoomServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryChatRoomServer_, context, request, response);
}

void ChatService::Stub::async::QueryChatRoomServer(::grpc::ClientContext* context, const ::prpc::QueryChatRoomServerReq* request, ::prpc::QueryChatRoomServerRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QueryChatRoomServerReq, ::prpc::QueryChatRoomServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryChatRoomServer_, context, request, response, std::move(f));
}

void ChatService::Stub::async::QueryChatRoomServer(::grpc::ClientContext* context, const ::prpc::QueryChatRoomServerReq* request, ::prpc::QueryChatRoomServerRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryChatRoomServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryChatRoomServerRes>* ChatService::Stub::PrepareAsyncQueryChatRoomServerRaw(::grpc::ClientContext* context, const ::prpc::QueryChatRoomServerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QueryChatRoomServerRes, ::prpc::QueryChatRoomServerReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryChatRoomServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryChatRoomServerRes>* ChatService::Stub::AsyncQueryChatRoomServerRaw(::grpc::ClientContext* context, const ::prpc::QueryChatRoomServerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryChatRoomServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::CreateChatRoom(::grpc::ClientContext* context, const ::prpc::CreateChatRoomReq& request, ::prpc::CreateChatRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::CreateChatRoomReq, ::prpc::CreateChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChatRoom_, context, request, response);
}

void ChatService::Stub::async::CreateChatRoom(::grpc::ClientContext* context, const ::prpc::CreateChatRoomReq* request, ::prpc::CreateChatRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::CreateChatRoomReq, ::prpc::CreateChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatRoom_, context, request, response, std::move(f));
}

void ChatService::Stub::async::CreateChatRoom(::grpc::ClientContext* context, const ::prpc::CreateChatRoomReq* request, ::prpc::CreateChatRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::CreateChatRoomRes>* ChatService::Stub::PrepareAsyncCreateChatRoomRaw(::grpc::ClientContext* context, const ::prpc::CreateChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::CreateChatRoomRes, ::prpc::CreateChatRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChatRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::CreateChatRoomRes>* ChatService::Stub::AsyncCreateChatRoomRaw(::grpc::ClientContext* context, const ::prpc::CreateChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChatRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::QueryChatRoomInfo(::grpc::ClientContext* context, const ::prpc::QueryChatRoomInfoReq& request, ::prpc::QueryChatRoomInfoRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QueryChatRoomInfoReq, ::prpc::QueryChatRoomInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryChatRoomInfo_, context, request, response);
}

void ChatService::Stub::async::QueryChatRoomInfo(::grpc::ClientContext* context, const ::prpc::QueryChatRoomInfoReq* request, ::prpc::QueryChatRoomInfoRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QueryChatRoomInfoReq, ::prpc::QueryChatRoomInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryChatRoomInfo_, context, request, response, std::move(f));
}

void ChatService::Stub::async::QueryChatRoomInfo(::grpc::ClientContext* context, const ::prpc::QueryChatRoomInfoReq* request, ::prpc::QueryChatRoomInfoRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryChatRoomInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryChatRoomInfoRes>* ChatService::Stub::PrepareAsyncQueryChatRoomInfoRaw(::grpc::ClientContext* context, const ::prpc::QueryChatRoomInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QueryChatRoomInfoRes, ::prpc::QueryChatRoomInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryChatRoomInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryChatRoomInfoRes>* ChatService::Stub::AsyncQueryChatRoomInfoRaw(::grpc::ClientContext* context, const ::prpc::QueryChatRoomInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryChatRoomInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::JoinRoom(::grpc::ClientContext* context, const ::prpc::JoinRoomReq& request, ::prpc::JoinRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::JoinRoomReq, ::prpc::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinRoom_, context, request, response);
}

void ChatService::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::prpc::JoinRoomReq* request, ::prpc::JoinRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::JoinRoomReq, ::prpc::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, std::move(f));
}

void ChatService::Stub::async::JoinRoom(::grpc::ClientContext* context, const ::prpc::JoinRoomReq* request, ::prpc::JoinRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::JoinRoomRes>* ChatService::Stub::PrepareAsyncJoinRoomRaw(::grpc::ClientContext* context, const ::prpc::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::JoinRoomRes, ::prpc::JoinRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::JoinRoomRes>* ChatService::Stub::AsyncJoinRoomRaw(::grpc::ClientContext* context, const ::prpc::JoinRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::LeaveRoom(::grpc::ClientContext* context, const ::prpc::LeaveRoomReq& request, ::prpc::LeaveRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::LeaveRoomReq, ::prpc::LeaveRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeaveRoom_, context, request, response);
}

void ChatService::Stub::async::LeaveRoom(::grpc::ClientContext* context, const ::prpc::LeaveRoomReq* request, ::prpc::LeaveRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::LeaveRoomReq, ::prpc::LeaveRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveRoom_, context, request, response, std::move(f));
}

void ChatService::Stub::async::LeaveRoom(::grpc::ClientContext* context, const ::prpc::LeaveRoomReq* request, ::prpc::LeaveRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::LeaveRoomRes>* ChatService::Stub::PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::prpc::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::LeaveRoomRes, ::prpc::LeaveRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeaveRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::LeaveRoomRes>* ChatService::Stub::AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::prpc::LeaveRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeaveRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::Send2ChatRoom(::grpc::ClientContext* context, const ::prpc::Send2ChatRoomReq& request, ::prpc::Send2ChatRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::Send2ChatRoomReq, ::prpc::Send2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send2ChatRoom_, context, request, response);
}

void ChatService::Stub::async::Send2ChatRoom(::grpc::ClientContext* context, const ::prpc::Send2ChatRoomReq* request, ::prpc::Send2ChatRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::Send2ChatRoomReq, ::prpc::Send2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send2ChatRoom_, context, request, response, std::move(f));
}

void ChatService::Stub::async::Send2ChatRoom(::grpc::ClientContext* context, const ::prpc::Send2ChatRoomReq* request, ::prpc::Send2ChatRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send2ChatRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::Send2ChatRoomRes>* ChatService::Stub::PrepareAsyncSend2ChatRoomRaw(::grpc::ClientContext* context, const ::prpc::Send2ChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::Send2ChatRoomRes, ::prpc::Send2ChatRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send2ChatRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::Send2ChatRoomRes>* ChatService::Stub::AsyncSend2ChatRoomRaw(::grpc::ClientContext* context, const ::prpc::Send2ChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSend2ChatRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::QueryChatRoomServerReq, ::prpc::QueryChatRoomServerRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QueryChatRoomServerReq* req,
             ::prpc::QueryChatRoomServerRes* resp) {
               return service->QueryChatRoomServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::CreateChatRoomReq, ::prpc::CreateChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::CreateChatRoomReq* req,
             ::prpc::CreateChatRoomRes* resp) {
               return service->CreateChatRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::QueryChatRoomInfoReq, ::prpc::QueryChatRoomInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QueryChatRoomInfoReq* req,
             ::prpc::QueryChatRoomInfoRes* resp) {
               return service->QueryChatRoomInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::JoinRoomReq, ::prpc::JoinRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::JoinRoomReq* req,
             ::prpc::JoinRoomRes* resp) {
               return service->JoinRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::LeaveRoomReq, ::prpc::LeaveRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::LeaveRoomReq* req,
             ::prpc::LeaveRoomRes* resp) {
               return service->LeaveRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::prpc::Send2ChatRoomReq, ::prpc::Send2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::Send2ChatRoomReq* req,
             ::prpc::Send2ChatRoomRes* resp) {
               return service->Send2ChatRoom(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::QueryChatRoomServer(::grpc::ServerContext* context, const ::prpc::QueryChatRoomServerReq* request, ::prpc::QueryChatRoomServerRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::CreateChatRoom(::grpc::ServerContext* context, const ::prpc::CreateChatRoomReq* request, ::prpc::CreateChatRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::QueryChatRoomInfo(::grpc::ServerContext* context, const ::prpc::QueryChatRoomInfoReq* request, ::prpc::QueryChatRoomInfoRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::JoinRoom(::grpc::ServerContext* context, const ::prpc::JoinRoomReq* request, ::prpc::JoinRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::LeaveRoom(::grpc::ServerContext* context, const ::prpc::LeaveRoomReq* request, ::prpc::LeaveRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::Send2ChatRoom(::grpc::ServerContext* context, const ::prpc::Send2ChatRoomReq* request, ::prpc::Send2ChatRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace prpc

