// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bt.proto
#ifndef GRPC_bt_2eproto__INCLUDED
#define GRPC_bt_2eproto__INCLUDED

#include "bt.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace prpc {

class BtService final {
 public:
  static constexpr char const* service_full_name() {
    return "prpc.BtService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>> AsyncParse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>>(AsyncParseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>> PrepareAsyncParse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>>(PrepareAsyncParseRaw(context, request, cq));
    }
    virtual ::grpc::Status Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>> AsyncDownload(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>>(AsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::prpc::RemoveTorrentRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>> AsyncRemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>>(AsyncRemoveTorrentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>> PrepareAsyncRemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>>(PrepareAsyncRemoveTorrentRaw(context, request, cq));
    }
    virtual ::grpc::Status FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::prpc::FileProgressRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>> AsyncFileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>>(AsyncFileProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>> PrepareAsyncFileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>>(PrepareAsyncFileProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>> OnStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>>(OnStatusRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>> AsyncOnStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>>(AsyncOnStatusRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>> PrepareAsyncOnStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>>(PrepareAsyncOnStatusRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> OnTorrentInfo(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(OnTorrentInfoRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> AsyncOnTorrentInfo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(AsyncOnTorrentInfoRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> PrepareAsyncOnTorrentInfo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(PrepareAsyncOnTorrentInfoRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> OnFileCompleted(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(OnFileCompletedRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> AsyncOnFileCompleted(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(AsyncOnFileCompletedRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> PrepareAsyncOnFileCompleted(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(PrepareAsyncOnFileCompletedRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OnStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::StatusRequest,::prpc::StatusRespone>* reactor) = 0;
      virtual void OnTorrentInfo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::TorrentInfoReq,::prpc::TorrentInfoRes>* reactor) = 0;
      virtual void OnFileCompleted(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::FileCompletedReq,::prpc::FileCompletedRes>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>* AsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>* PrepareAsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::DownloadRespone>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>* AsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::RemoveTorrentRes>* PrepareAsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>* AsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::prpc::FileProgressRes>* PrepareAsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>* OnStatusRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>* AsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::StatusRequest, ::prpc::StatusRespone>* PrepareAsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* OnTorrentInfoRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* AsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* PrepareAsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* OnFileCompletedRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* AsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* PrepareAsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>> AsyncParse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>>(AsyncParseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>> PrepareAsyncParse(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>>(PrepareAsyncParseRaw(context, request, cq));
    }
    ::grpc::Status Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>> AsyncDownload(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>>(AsyncDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>> PrepareAsyncDownload(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>>(PrepareAsyncDownloadRaw(context, request, cq));
    }
    ::grpc::Status RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::prpc::RemoveTorrentRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>> AsyncRemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>>(AsyncRemoveTorrentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>> PrepareAsyncRemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>>(PrepareAsyncRemoveTorrentRaw(context, request, cq));
    }
    ::grpc::Status FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::prpc::FileProgressRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>> AsyncFileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>>(AsyncFileProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>> PrepareAsyncFileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>>(PrepareAsyncFileProgressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>> OnStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>>(OnStatusRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>> AsyncOnStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>>(AsyncOnStatusRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>> PrepareAsyncOnStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>>(PrepareAsyncOnStatusRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> OnTorrentInfo(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(OnTorrentInfoRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> AsyncOnTorrentInfo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(AsyncOnTorrentInfoRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>> PrepareAsyncOnTorrentInfo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>>(PrepareAsyncOnTorrentInfoRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> OnFileCompleted(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(OnFileCompletedRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> AsyncOnFileCompleted(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(AsyncOnFileCompletedRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>> PrepareAsyncOnFileCompleted(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>>(PrepareAsyncOnFileCompletedRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)>) override;
      void Parse(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)>) override;
      void Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, std::function<void(::grpc::Status)>) override;
      void RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, std::function<void(::grpc::Status)>) override;
      void FileProgress(::grpc::ClientContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OnStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::StatusRequest,::prpc::StatusRespone>* reactor) override;
      void OnTorrentInfo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::TorrentInfoReq,::prpc::TorrentInfoRes>* reactor) override;
      void OnFileCompleted(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::prpc::FileCompletedReq,::prpc::FileCompletedRes>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* AsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* PrepareAsyncParseRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* AsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* AsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* PrepareAsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>* AsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::prpc::FileProgressRes>* PrepareAsyncFileProgressRaw(::grpc::ClientContext* context, const ::prpc::FileProgressReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* OnStatusRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* AsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::StatusRequest, ::prpc::StatusRespone>* PrepareAsyncOnStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* OnTorrentInfoRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* AsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* PrepareAsyncOnTorrentInfoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* OnFileCompletedRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* AsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* PrepareAsyncOnFileCompletedRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Parse_;
    const ::grpc::internal::RpcMethod rpcmethod_Download_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveTorrent_;
    const ::grpc::internal::RpcMethod rpcmethod_FileProgress_;
    const ::grpc::internal::RpcMethod rpcmethod_OnStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_OnTorrentInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_OnFileCompleted_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Parse(::grpc::ServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response);
    virtual ::grpc::Status Download(::grpc::ServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response);
    virtual ::grpc::Status RemoveTorrent(::grpc::ServerContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response);
    virtual ::grpc::Status FileProgress(::grpc::ServerContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response);
    virtual ::grpc::Status OnStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* stream);
    virtual ::grpc::Status OnTorrentInfo(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* stream);
    virtual ::grpc::Status OnFileCompleted(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Parse() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParse(::grpc::ServerContext* context, ::prpc::DownloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::prpc::DownloadRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Download() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::prpc::DownloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::prpc::DownloadRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTorrent(::grpc::ServerContext* context, ::prpc::RemoveTorrentReq* request, ::grpc::ServerAsyncResponseWriter< ::prpc::RemoveTorrentRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileProgress() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileProgress(::grpc::ServerContext* context, ::prpc::FileProgressReq* request, ::grpc::ServerAsyncResponseWriter< ::prpc::FileProgressRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_OnStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnTorrentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnTorrentInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OnTorrentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTorrentInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnTorrentInfo(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnFileCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OnFileCompleted() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_OnFileCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFileCompleted(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFileCompleted(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Parse<WithAsyncMethod_Download<WithAsyncMethod_RemoveTorrent<WithAsyncMethod_FileProgress<WithAsyncMethod_OnStatus<WithAsyncMethod_OnTorrentInfo<WithAsyncMethod_OnFileCompleted<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Parse() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::prpc::DownloadRequest, ::prpc::DownloadRespone>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response) { return this->Parse(context, request, response); }));}
    void SetMessageAllocatorFor_Parse(
        ::grpc::MessageAllocator< ::prpc::DownloadRequest, ::prpc::DownloadRespone>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::prpc::DownloadRequest, ::prpc::DownloadRespone>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Parse(
      ::grpc::CallbackServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Download() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::prpc::DownloadRequest, ::prpc::DownloadRespone>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response) { return this->Download(context, request, response); }));}
    void SetMessageAllocatorFor_Download(
        ::grpc::MessageAllocator< ::prpc::DownloadRequest, ::prpc::DownloadRespone>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::prpc::DownloadRequest, ::prpc::DownloadRespone>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response) { return this->RemoveTorrent(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveTorrent(
        ::grpc::MessageAllocator< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveTorrent(
      ::grpc::CallbackServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FileProgress() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::prpc::FileProgressReq, ::prpc::FileProgressRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::prpc::FileProgressReq* request, ::prpc::FileProgressRes* response) { return this->FileProgress(context, request, response); }));}
    void SetMessageAllocatorFor_FileProgress(
        ::grpc::MessageAllocator< ::prpc::FileProgressReq, ::prpc::FileProgressRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::prpc::FileProgressReq, ::prpc::FileProgressRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FileProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::prpc::StatusRequest, ::prpc::StatusRespone>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnStatus(context); }));
    }
    ~WithCallbackMethod_OnStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::prpc::StatusRequest, ::prpc::StatusRespone>* OnStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnTorrentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnTorrentInfo() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnTorrentInfo(context); }));
    }
    ~WithCallbackMethod_OnTorrentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTorrentInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::prpc::TorrentInfoReq, ::prpc::TorrentInfoRes>* OnTorrentInfo(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OnFileCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OnFileCompleted() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnFileCompleted(context); }));
    }
    ~WithCallbackMethod_OnFileCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFileCompleted(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::prpc::FileCompletedReq, ::prpc::FileCompletedRes>* OnFileCompleted(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Parse<WithCallbackMethod_Download<WithCallbackMethod_RemoveTorrent<WithCallbackMethod_FileProgress<WithCallbackMethod_OnStatus<WithCallbackMethod_OnTorrentInfo<WithCallbackMethod_OnFileCompleted<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Parse() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Download() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileProgress() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_OnStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnTorrentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnTorrentInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OnTorrentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTorrentInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnFileCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OnFileCompleted() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_OnFileCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFileCompleted(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Parse() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Download() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTorrent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileProgress() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileProgress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_OnStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnTorrentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnTorrentInfo() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OnTorrentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTorrentInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnTorrentInfo(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnFileCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OnFileCompleted() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_OnFileCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFileCompleted(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFileCompleted(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Parse() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Parse(context, request, response); }));
    }
    ~WithRawCallbackMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Parse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Download() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Download(context, request, response); }));
    }
    ~WithRawCallbackMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveTorrent(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveTorrent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FileProgress() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FileProgress(context, request, response); }));
    }
    ~WithRawCallbackMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FileProgress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnStatus(context); }));
    }
    ~WithRawCallbackMethod_OnStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::StatusRespone, ::prpc::StatusRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnTorrentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnTorrentInfo() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnTorrentInfo(context); }));
    }
    ~WithRawCallbackMethod_OnTorrentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTorrentInfo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::TorrentInfoRes, ::prpc::TorrentInfoReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnTorrentInfo(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OnFileCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OnFileCompleted() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->OnFileCompleted(context); }));
    }
    ~WithRawCallbackMethod_OnFileCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFileCompleted(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::prpc::FileCompletedRes, ::prpc::FileCompletedReq>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* OnFileCompleted(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Parse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Parse() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::prpc::DownloadRequest, ::prpc::DownloadRespone>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::prpc::DownloadRequest, ::prpc::DownloadRespone>* streamer) {
                       return this->StreamedParse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Parse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Parse(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::prpc::DownloadRequest,::prpc::DownloadRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Download() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::prpc::DownloadRequest, ::prpc::DownloadRespone>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::prpc::DownloadRequest, ::prpc::DownloadRespone>* streamer) {
                       return this->StreamedDownload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Download(::grpc::ServerContext* /*context*/, const ::prpc::DownloadRequest* /*request*/, ::prpc::DownloadRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::prpc::DownloadRequest,::prpc::DownloadRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveTorrent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveTorrent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes>* streamer) {
                       return this->StreamedRemoveTorrent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveTorrent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveTorrent(::grpc::ServerContext* /*context*/, const ::prpc::RemoveTorrentReq* /*request*/, ::prpc::RemoveTorrentRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveTorrent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::prpc::RemoveTorrentReq,::prpc::RemoveTorrentRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FileProgress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FileProgress() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::prpc::FileProgressReq, ::prpc::FileProgressRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::prpc::FileProgressReq, ::prpc::FileProgressRes>* streamer) {
                       return this->StreamedFileProgress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FileProgress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FileProgress(::grpc::ServerContext* /*context*/, const ::prpc::FileProgressReq* /*request*/, ::prpc::FileProgressRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFileProgress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::prpc::FileProgressReq,::prpc::FileProgressRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Parse<WithStreamedUnaryMethod_Download<WithStreamedUnaryMethod_RemoveTorrent<WithStreamedUnaryMethod_FileProgress<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Parse<WithStreamedUnaryMethod_Download<WithStreamedUnaryMethod_RemoveTorrent<WithStreamedUnaryMethod_FileProgress<Service > > > > StreamedService;
};

}  // namespace prpc


#endif  // GRPC_bt_2eproto__INCLUDED
