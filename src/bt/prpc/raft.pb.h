// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_raft_2eproto;
namespace prpc {
class NewNodeAction;
struct NewNodeActionDefaultTypeInternal;
extern NewNodeActionDefaultTypeInternal _NewNodeAction_default_instance_;
class RaftActionRet;
struct RaftActionRetDefaultTypeInternal;
extern RaftActionRetDefaultTypeInternal _RaftActionRet_default_instance_;
class RaftMsg;
struct RaftMsgDefaultTypeInternal;
extern RaftMsgDefaultTypeInternal _RaftMsg_default_instance_;
class RaftPing;
struct RaftPingDefaultTypeInternal;
extern RaftPingDefaultTypeInternal _RaftPing_default_instance_;
class RaftPong;
struct RaftPongDefaultTypeInternal;
extern RaftPongDefaultTypeInternal _RaftPong_default_instance_;
class RaftTransaction;
struct RaftTransactionDefaultTypeInternal;
extern RaftTransactionDefaultTypeInternal _RaftTransaction_default_instance_;
}  // namespace prpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace prpc {
enum RaftTransaction_Type : int {
  RaftTransaction_Type_Unknown = 0,
  RaftTransaction_Type_NewNode = 1,
  RaftTransaction_Type_RaftTransaction_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RaftTransaction_Type_RaftTransaction_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RaftTransaction_Type_IsValid(int value);
constexpr RaftTransaction_Type RaftTransaction_Type_Type_MIN = static_cast<RaftTransaction_Type>(0);
constexpr RaftTransaction_Type RaftTransaction_Type_Type_MAX = static_cast<RaftTransaction_Type>(1);
constexpr int RaftTransaction_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
RaftTransaction_Type_descriptor();
template <typename T>
const std::string& RaftTransaction_Type_Name(T value) {
  static_assert(std::is_same<T, RaftTransaction_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return RaftTransaction_Type_Name(static_cast<RaftTransaction_Type>(value));
}
template <>
inline const std::string& RaftTransaction_Type_Name(RaftTransaction_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RaftTransaction_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool RaftTransaction_Type_Parse(absl::string_view name, RaftTransaction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftTransaction_Type>(
      RaftTransaction_Type_descriptor(), name, value);
}
enum RaftMsg_Type : int {
  RaftMsg_Type_Unknown = 0,
  RaftMsg_Type_Action = 1,
  RaftMsg_Type_SyncAction = 2,
  RaftMsg_Type_Ping = 3,
  RaftMsg_Type_Pong = 4,
  RaftMsg_Type_RaftMsg_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RaftMsg_Type_RaftMsg_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RaftMsg_Type_IsValid(int value);
constexpr RaftMsg_Type RaftMsg_Type_Type_MIN = static_cast<RaftMsg_Type>(0);
constexpr RaftMsg_Type RaftMsg_Type_Type_MAX = static_cast<RaftMsg_Type>(4);
constexpr int RaftMsg_Type_Type_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
RaftMsg_Type_descriptor();
template <typename T>
const std::string& RaftMsg_Type_Name(T value) {
  static_assert(std::is_same<T, RaftMsg_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return RaftMsg_Type_Name(static_cast<RaftMsg_Type>(value));
}
template <>
inline const std::string& RaftMsg_Type_Name(RaftMsg_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RaftMsg_Type_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool RaftMsg_Type_Parse(absl::string_view name, RaftMsg_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftMsg_Type>(
      RaftMsg_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NewNodeAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.NewNodeAction) */ {
 public:
  inline NewNodeAction() : NewNodeAction(nullptr) {}
  ~NewNodeAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewNodeAction(::google::protobuf::internal::ConstantInitialized);

  NewNodeAction(const NewNodeAction& from);
  NewNodeAction(NewNodeAction&& from) noexcept
    : NewNodeAction() {
    *this = ::std::move(from);
  }

  inline NewNodeAction& operator=(const NewNodeAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewNodeAction& operator=(NewNodeAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewNodeAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewNodeAction* internal_default_instance() {
    return reinterpret_cast<const NewNodeAction*>(
               &_NewNodeAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewNodeAction& a, NewNodeAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NewNodeAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewNodeAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewNodeAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewNodeAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewNodeAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewNodeAction& from) {
    NewNodeAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewNodeAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.NewNodeAction";
  }
  protected:
  explicit NewNodeAction(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyIdFieldNumber = 1,
    kMyAddressFieldNumber = 2,
    kRoleFieldNumber = 3,
  };
  // string my_id = 1;
  void clear_my_id() ;
  const std::string& my_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_my_id(Arg_&& arg, Args_... args);
  std::string* mutable_my_id();
  PROTOBUF_NODISCARD std::string* release_my_id();
  void set_allocated_my_id(std::string* ptr);

  private:
  const std::string& _internal_my_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_id(
      const std::string& value);
  std::string* _internal_mutable_my_id();

  public:
  // string my_address = 2;
  void clear_my_address() ;
  const std::string& my_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_my_address(Arg_&& arg, Args_... args);
  std::string* mutable_my_address();
  PROTOBUF_NODISCARD std::string* release_my_address();
  void set_allocated_my_address(std::string* ptr);

  private:
  const std::string& _internal_my_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_address(
      const std::string& value);
  std::string* _internal_mutable_my_address();

  public:
  // int32 role = 3;
  void clear_role() ;
  ::int32_t role() const;
  void set_role(::int32_t value);

  private:
  ::int32_t _internal_role() const;
  void _internal_set_role(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.NewNodeAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr my_id_;
    ::google::protobuf::internal::ArenaStringPtr my_address_;
    ::int32_t role_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};// -------------------------------------------------------------------

class RaftTransaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.RaftTransaction) */ {
 public:
  inline RaftTransaction() : RaftTransaction(nullptr) {}
  ~RaftTransaction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RaftTransaction(::google::protobuf::internal::ConstantInitialized);

  RaftTransaction(const RaftTransaction& from);
  RaftTransaction(RaftTransaction&& from) noexcept
    : RaftTransaction() {
    *this = ::std::move(from);
  }

  inline RaftTransaction& operator=(const RaftTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftTransaction& operator=(RaftTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftTransaction* internal_default_instance() {
    return reinterpret_cast<const RaftTransaction*>(
               &_RaftTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RaftTransaction& a, RaftTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftTransaction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftTransaction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftTransaction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RaftTransaction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RaftTransaction& from) {
    RaftTransaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftTransaction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.RaftTransaction";
  }
  protected:
  explicit RaftTransaction(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = RaftTransaction_Type;
  static constexpr Type Unknown = RaftTransaction_Type_Unknown;
  static constexpr Type NewNode = RaftTransaction_Type_NewNode;
  static inline bool Type_IsValid(int value) {
    return RaftTransaction_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = RaftTransaction_Type_Type_MIN;
  static constexpr Type Type_MAX = RaftTransaction_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = RaftTransaction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return RaftTransaction_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return RaftTransaction_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return RaftTransaction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMyIdFieldNumber = 1,
    kUserRefFieldNumber = 4,
    kNewNodeFieldNumber = 5,
    kEpochFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string my_id = 1;
  void clear_my_id() ;
  const std::string& my_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_my_id(Arg_&& arg, Args_... args);
  std::string* mutable_my_id();
  PROTOBUF_NODISCARD std::string* release_my_id();
  void set_allocated_my_id(std::string* ptr);

  private:
  const std::string& _internal_my_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_id(
      const std::string& value);
  std::string* _internal_mutable_my_id();

  public:
  // string user_ref = 4;
  void clear_user_ref() ;
  const std::string& user_ref() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_ref(Arg_&& arg, Args_... args);
  std::string* mutable_user_ref();
  PROTOBUF_NODISCARD std::string* release_user_ref();
  void set_allocated_user_ref(std::string* ptr);

  private:
  const std::string& _internal_user_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_ref(
      const std::string& value);
  std::string* _internal_mutable_user_ref();

  public:
  // .prpc.NewNodeAction new_node = 5;
  bool has_new_node() const;
  void clear_new_node() ;
  const ::prpc::NewNodeAction& new_node() const;
  PROTOBUF_NODISCARD ::prpc::NewNodeAction* release_new_node();
  ::prpc::NewNodeAction* mutable_new_node();
  void set_allocated_new_node(::prpc::NewNodeAction* value);
  void unsafe_arena_set_allocated_new_node(::prpc::NewNodeAction* value);
  ::prpc::NewNodeAction* unsafe_arena_release_new_node();

  private:
  const ::prpc::NewNodeAction& _internal_new_node() const;
  ::prpc::NewNodeAction* _internal_mutable_new_node();

  public:
  // uint64 epoch = 3;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // .prpc.RaftTransaction.Type type = 2;
  void clear_type() ;
  ::prpc::RaftTransaction_Type type() const;
  void set_type(::prpc::RaftTransaction_Type value);

  private:
  ::prpc::RaftTransaction_Type _internal_type() const;
  void _internal_set_type(::prpc::RaftTransaction_Type value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.RaftTransaction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr my_id_;
    ::google::protobuf::internal::ArenaStringPtr user_ref_;
    ::prpc::NewNodeAction* new_node_;
    ::uint64_t epoch_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};// -------------------------------------------------------------------

class RaftActionRet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.RaftActionRet) */ {
 public:
  inline RaftActionRet() : RaftActionRet(nullptr) {}
  ~RaftActionRet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RaftActionRet(::google::protobuf::internal::ConstantInitialized);

  RaftActionRet(const RaftActionRet& from);
  RaftActionRet(RaftActionRet&& from) noexcept
    : RaftActionRet() {
    *this = ::std::move(from);
  }

  inline RaftActionRet& operator=(const RaftActionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftActionRet& operator=(RaftActionRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftActionRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftActionRet* internal_default_instance() {
    return reinterpret_cast<const RaftActionRet*>(
               &_RaftActionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RaftActionRet& a, RaftActionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftActionRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftActionRet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftActionRet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftActionRet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RaftActionRet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RaftActionRet& from) {
    RaftActionRet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftActionRet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.RaftActionRet";
  }
  protected:
  explicit RaftActionRet(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyIdFieldNumber = 1,
    kEpochFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // string my_id = 1;
  void clear_my_id() ;
  const std::string& my_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_my_id(Arg_&& arg, Args_... args);
  std::string* mutable_my_id();
  PROTOBUF_NODISCARD std::string* release_my_id();
  void set_allocated_my_id(std::string* ptr);

  private:
  const std::string& _internal_my_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_id(
      const std::string& value);
  std::string* _internal_mutable_my_id();

  public:
  // uint64 epoch = 2;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.RaftActionRet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 32, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr my_id_;
    ::uint64_t epoch_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};// -------------------------------------------------------------------

class RaftPing final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.RaftPing) */ {
 public:
  inline RaftPing() : RaftPing(nullptr) {}
  ~RaftPing() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RaftPing(::google::protobuf::internal::ConstantInitialized);

  RaftPing(const RaftPing& from);
  RaftPing(RaftPing&& from) noexcept
    : RaftPing() {
    *this = ::std::move(from);
  }

  inline RaftPing& operator=(const RaftPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftPing& operator=(RaftPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftPing* internal_default_instance() {
    return reinterpret_cast<const RaftPing*>(
               &_RaftPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RaftPing& a, RaftPing& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftPing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftPing* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftPing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RaftPing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RaftPing& from) {
    RaftPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftPing* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.RaftPing";
  }
  protected:
  explicit RaftPing(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyIdFieldNumber = 1,
    kEpochFieldNumber = 3,
    kRoleFieldNumber = 2,
  };
  // string my_id = 1;
  void clear_my_id() ;
  const std::string& my_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_my_id(Arg_&& arg, Args_... args);
  std::string* mutable_my_id();
  PROTOBUF_NODISCARD std::string* release_my_id();
  void set_allocated_my_id(std::string* ptr);

  private:
  const std::string& _internal_my_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_id(
      const std::string& value);
  std::string* _internal_mutable_my_id();

  public:
  // uint64 epoch = 3;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // int32 role = 2;
  void clear_role() ;
  ::int32_t role() const;
  void set_role(::int32_t value);

  private:
  ::int32_t _internal_role() const;
  void _internal_set_role(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.RaftPing)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 27, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr my_id_;
    ::uint64_t epoch_;
    ::int32_t role_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};// -------------------------------------------------------------------

class RaftPong final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:prpc.RaftPong) */ {
 public:
  inline RaftPong() : RaftPong(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RaftPong(::google::protobuf::internal::ConstantInitialized);

  RaftPong(const RaftPong& from);
  RaftPong(RaftPong&& from) noexcept
    : RaftPong() {
    *this = ::std::move(from);
  }

  inline RaftPong& operator=(const RaftPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftPong& operator=(RaftPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftPong* internal_default_instance() {
    return reinterpret_cast<const RaftPong*>(
               &_RaftPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RaftPong& a, RaftPong& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftPong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftPong* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftPong* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftPong>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RaftPong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RaftPong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.RaftPong";
  }
  protected:
  explicit RaftPong(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:prpc.RaftPong)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_raft_2eproto;
};// -------------------------------------------------------------------

class RaftMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.RaftMsg) */ {
 public:
  inline RaftMsg() : RaftMsg(nullptr) {}
  ~RaftMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RaftMsg(::google::protobuf::internal::ConstantInitialized);

  RaftMsg(const RaftMsg& from);
  RaftMsg(RaftMsg&& from) noexcept
    : RaftMsg() {
    *this = ::std::move(from);
  }

  inline RaftMsg& operator=(const RaftMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftMsg& operator=(RaftMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftMsg* internal_default_instance() {
    return reinterpret_cast<const RaftMsg*>(
               &_RaftMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RaftMsg& a, RaftMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftMsg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RaftMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RaftMsg& from) {
    RaftMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftMsg* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.RaftMsg";
  }
  protected:
  explicit RaftMsg(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = RaftMsg_Type;
  static constexpr Type Unknown = RaftMsg_Type_Unknown;
  static constexpr Type Action = RaftMsg_Type_Action;
  static constexpr Type SyncAction = RaftMsg_Type_SyncAction;
  static constexpr Type Ping = RaftMsg_Type_Ping;
  static constexpr Type Pong = RaftMsg_Type_Pong;
  static inline bool Type_IsValid(int value) {
    return RaftMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = RaftMsg_Type_Type_MIN;
  static constexpr Type Type_MAX = RaftMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = RaftMsg_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return RaftMsg_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return RaftMsg_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return RaftMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSyncActionsFieldNumber = 3,
    kActionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .prpc.RaftTransaction sync_actions = 3;
  int sync_actions_size() const;
  private:
  int _internal_sync_actions_size() const;

  public:
  void clear_sync_actions() ;
  ::prpc::RaftTransaction* mutable_sync_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::prpc::RaftTransaction >*
      mutable_sync_actions();
  private:
  const ::google::protobuf::RepeatedPtrField<::prpc::RaftTransaction>& _internal_sync_actions() const;
  ::google::protobuf::RepeatedPtrField<::prpc::RaftTransaction>* _internal_mutable_sync_actions();
  public:
  const ::prpc::RaftTransaction& sync_actions(int index) const;
  ::prpc::RaftTransaction* add_sync_actions();
  const ::google::protobuf::RepeatedPtrField< ::prpc::RaftTransaction >&
      sync_actions() const;
  // .prpc.RaftTransaction action = 2;
  bool has_action() const;
  void clear_action() ;
  const ::prpc::RaftTransaction& action() const;
  PROTOBUF_NODISCARD ::prpc::RaftTransaction* release_action();
  ::prpc::RaftTransaction* mutable_action();
  void set_allocated_action(::prpc::RaftTransaction* value);
  void unsafe_arena_set_allocated_action(::prpc::RaftTransaction* value);
  ::prpc::RaftTransaction* unsafe_arena_release_action();

  private:
  const ::prpc::RaftTransaction& _internal_action() const;
  ::prpc::RaftTransaction* _internal_mutable_action();

  public:
  // .prpc.RaftMsg.Type type = 1;
  void clear_type() ;
  ::prpc::RaftMsg_Type type() const;
  void set_type(::prpc::RaftMsg_Type value);

  private:
  ::prpc::RaftMsg_Type _internal_type() const;
  void _internal_set_type(::prpc::RaftMsg_Type value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.RaftMsg)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::prpc::RaftTransaction > sync_actions_;
    ::prpc::RaftTransaction* action_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_raft_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NewNodeAction

// string my_id = 1;
inline void NewNodeAction::clear_my_id() {
  _impl_.my_id_.ClearToEmpty();
}
inline const std::string& NewNodeAction::my_id() const {
  // @@protoc_insertion_point(field_get:prpc.NewNodeAction.my_id)
  return _internal_my_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewNodeAction::set_my_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.NewNodeAction.my_id)
}
inline std::string* NewNodeAction::mutable_my_id() {
  std::string* _s = _internal_mutable_my_id();
  // @@protoc_insertion_point(field_mutable:prpc.NewNodeAction.my_id)
  return _s;
}
inline const std::string& NewNodeAction::_internal_my_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_id_.Get();
}
inline void NewNodeAction::_internal_set_my_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NewNodeAction::_internal_mutable_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.my_id_.Mutable( GetArenaForAllocation());
}
inline std::string* NewNodeAction::release_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.NewNodeAction.my_id)
  return _impl_.my_id_.Release();
}
inline void NewNodeAction::set_allocated_my_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.my_id_.IsDefault()) {
          _impl_.my_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.NewNodeAction.my_id)
}

// string my_address = 2;
inline void NewNodeAction::clear_my_address() {
  _impl_.my_address_.ClearToEmpty();
}
inline const std::string& NewNodeAction::my_address() const {
  // @@protoc_insertion_point(field_get:prpc.NewNodeAction.my_address)
  return _internal_my_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NewNodeAction::set_my_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.NewNodeAction.my_address)
}
inline std::string* NewNodeAction::mutable_my_address() {
  std::string* _s = _internal_mutable_my_address();
  // @@protoc_insertion_point(field_mutable:prpc.NewNodeAction.my_address)
  return _s;
}
inline const std::string& NewNodeAction::_internal_my_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_address_.Get();
}
inline void NewNodeAction::_internal_set_my_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_address_.Set(value, GetArenaForAllocation());
}
inline std::string* NewNodeAction::_internal_mutable_my_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.my_address_.Mutable( GetArenaForAllocation());
}
inline std::string* NewNodeAction::release_my_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.NewNodeAction.my_address)
  return _impl_.my_address_.Release();
}
inline void NewNodeAction::set_allocated_my_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.my_address_.IsDefault()) {
          _impl_.my_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.NewNodeAction.my_address)
}

// int32 role = 3;
inline void NewNodeAction::clear_role() {
  _impl_.role_ = 0;
}
inline ::int32_t NewNodeAction::role() const {
  // @@protoc_insertion_point(field_get:prpc.NewNodeAction.role)
  return _internal_role();
}
inline void NewNodeAction::set_role(::int32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:prpc.NewNodeAction.role)
}
inline ::int32_t NewNodeAction::_internal_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.role_;
}
inline void NewNodeAction::_internal_set_role(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.role_ = value;
}

// -------------------------------------------------------------------

// RaftTransaction

// string my_id = 1;
inline void RaftTransaction::clear_my_id() {
  _impl_.my_id_.ClearToEmpty();
}
inline const std::string& RaftTransaction::my_id() const {
  // @@protoc_insertion_point(field_get:prpc.RaftTransaction.my_id)
  return _internal_my_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RaftTransaction::set_my_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.RaftTransaction.my_id)
}
inline std::string* RaftTransaction::mutable_my_id() {
  std::string* _s = _internal_mutable_my_id();
  // @@protoc_insertion_point(field_mutable:prpc.RaftTransaction.my_id)
  return _s;
}
inline const std::string& RaftTransaction::_internal_my_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_id_.Get();
}
inline void RaftTransaction::_internal_set_my_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftTransaction::_internal_mutable_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.my_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RaftTransaction::release_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftTransaction.my_id)
  return _impl_.my_id_.Release();
}
inline void RaftTransaction::set_allocated_my_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.my_id_.IsDefault()) {
          _impl_.my_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftTransaction.my_id)
}

// .prpc.RaftTransaction.Type type = 2;
inline void RaftTransaction::clear_type() {
  _impl_.type_ = 0;
}
inline ::prpc::RaftTransaction_Type RaftTransaction::type() const {
  // @@protoc_insertion_point(field_get:prpc.RaftTransaction.type)
  return _internal_type();
}
inline void RaftTransaction::set_type(::prpc::RaftTransaction_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:prpc.RaftTransaction.type)
}
inline ::prpc::RaftTransaction_Type RaftTransaction::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::prpc::RaftTransaction_Type>(_impl_.type_);
}
inline void RaftTransaction::_internal_set_type(::prpc::RaftTransaction_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// uint64 epoch = 3;
inline void RaftTransaction::clear_epoch() {
  _impl_.epoch_ = ::uint64_t{0u};
}
inline ::uint64_t RaftTransaction::epoch() const {
  // @@protoc_insertion_point(field_get:prpc.RaftTransaction.epoch)
  return _internal_epoch();
}
inline void RaftTransaction::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:prpc.RaftTransaction.epoch)
}
inline ::uint64_t RaftTransaction::_internal_epoch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.epoch_;
}
inline void RaftTransaction::_internal_set_epoch(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.epoch_ = value;
}

// string user_ref = 4;
inline void RaftTransaction::clear_user_ref() {
  _impl_.user_ref_.ClearToEmpty();
}
inline const std::string& RaftTransaction::user_ref() const {
  // @@protoc_insertion_point(field_get:prpc.RaftTransaction.user_ref)
  return _internal_user_ref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RaftTransaction::set_user_ref(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_ref_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.RaftTransaction.user_ref)
}
inline std::string* RaftTransaction::mutable_user_ref() {
  std::string* _s = _internal_mutable_user_ref();
  // @@protoc_insertion_point(field_mutable:prpc.RaftTransaction.user_ref)
  return _s;
}
inline const std::string& RaftTransaction::_internal_user_ref() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_ref_.Get();
}
inline void RaftTransaction::_internal_set_user_ref(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftTransaction::_internal_mutable_user_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_ref_.Mutable( GetArenaForAllocation());
}
inline std::string* RaftTransaction::release_user_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftTransaction.user_ref)
  return _impl_.user_ref_.Release();
}
inline void RaftTransaction::set_allocated_user_ref(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_ref_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_ref_.IsDefault()) {
          _impl_.user_ref_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftTransaction.user_ref)
}

// .prpc.NewNodeAction new_node = 5;
inline bool RaftTransaction::has_new_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_node_ != nullptr);
  return value;
}
inline void RaftTransaction::clear_new_node() {
  if (_impl_.new_node_ != nullptr) _impl_.new_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::NewNodeAction& RaftTransaction::_internal_new_node() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::NewNodeAction* p = _impl_.new_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::NewNodeAction&>(::prpc::_NewNodeAction_default_instance_);
}
inline const ::prpc::NewNodeAction& RaftTransaction::new_node() const {
  // @@protoc_insertion_point(field_get:prpc.RaftTransaction.new_node)
  return _internal_new_node();
}
inline void RaftTransaction::unsafe_arena_set_allocated_new_node(::prpc::NewNodeAction* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_node_);
  }
  _impl_.new_node_ = reinterpret_cast<::prpc::NewNodeAction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.RaftTransaction.new_node)
}
inline ::prpc::NewNodeAction* RaftTransaction::release_new_node() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::NewNodeAction* released = _impl_.new_node_;
  _impl_.new_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::NewNodeAction* RaftTransaction::unsafe_arena_release_new_node() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftTransaction.new_node)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::NewNodeAction* temp = _impl_.new_node_;
  _impl_.new_node_ = nullptr;
  return temp;
}
inline ::prpc::NewNodeAction* RaftTransaction::_internal_mutable_new_node() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.new_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::NewNodeAction>(GetArenaForAllocation());
    _impl_.new_node_ = reinterpret_cast<::prpc::NewNodeAction*>(p);
  }
  return _impl_.new_node_;
}
inline ::prpc::NewNodeAction* RaftTransaction::mutable_new_node() {
  ::prpc::NewNodeAction* _msg = _internal_mutable_new_node();
  // @@protoc_insertion_point(field_mutable:prpc.RaftTransaction.new_node)
  return _msg;
}
inline void RaftTransaction::set_allocated_new_node(::prpc::NewNodeAction* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::NewNodeAction*>(_impl_.new_node_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::NewNodeAction*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.new_node_ = reinterpret_cast<::prpc::NewNodeAction*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftTransaction.new_node)
}

// -------------------------------------------------------------------

// RaftActionRet

// string my_id = 1;
inline void RaftActionRet::clear_my_id() {
  _impl_.my_id_.ClearToEmpty();
}
inline const std::string& RaftActionRet::my_id() const {
  // @@protoc_insertion_point(field_get:prpc.RaftActionRet.my_id)
  return _internal_my_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RaftActionRet::set_my_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.RaftActionRet.my_id)
}
inline std::string* RaftActionRet::mutable_my_id() {
  std::string* _s = _internal_mutable_my_id();
  // @@protoc_insertion_point(field_mutable:prpc.RaftActionRet.my_id)
  return _s;
}
inline const std::string& RaftActionRet::_internal_my_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_id_.Get();
}
inline void RaftActionRet::_internal_set_my_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftActionRet::_internal_mutable_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.my_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RaftActionRet::release_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftActionRet.my_id)
  return _impl_.my_id_.Release();
}
inline void RaftActionRet::set_allocated_my_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.my_id_.IsDefault()) {
          _impl_.my_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftActionRet.my_id)
}

// uint64 epoch = 2;
inline void RaftActionRet::clear_epoch() {
  _impl_.epoch_ = ::uint64_t{0u};
}
inline ::uint64_t RaftActionRet::epoch() const {
  // @@protoc_insertion_point(field_get:prpc.RaftActionRet.epoch)
  return _internal_epoch();
}
inline void RaftActionRet::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:prpc.RaftActionRet.epoch)
}
inline ::uint64_t RaftActionRet::_internal_epoch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.epoch_;
}
inline void RaftActionRet::_internal_set_epoch(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.epoch_ = value;
}

// bool success = 3;
inline void RaftActionRet::clear_success() {
  _impl_.success_ = false;
}
inline bool RaftActionRet::success() const {
  // @@protoc_insertion_point(field_get:prpc.RaftActionRet.success)
  return _internal_success();
}
inline void RaftActionRet::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:prpc.RaftActionRet.success)
}
inline bool RaftActionRet::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RaftActionRet::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// RaftPing

// string my_id = 1;
inline void RaftPing::clear_my_id() {
  _impl_.my_id_.ClearToEmpty();
}
inline const std::string& RaftPing::my_id() const {
  // @@protoc_insertion_point(field_get:prpc.RaftPing.my_id)
  return _internal_my_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RaftPing::set_my_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.RaftPing.my_id)
}
inline std::string* RaftPing::mutable_my_id() {
  std::string* _s = _internal_mutable_my_id();
  // @@protoc_insertion_point(field_mutable:prpc.RaftPing.my_id)
  return _s;
}
inline const std::string& RaftPing::_internal_my_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_id_.Get();
}
inline void RaftPing::_internal_set_my_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftPing::_internal_mutable_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.my_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RaftPing::release_my_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftPing.my_id)
  return _impl_.my_id_.Release();
}
inline void RaftPing::set_allocated_my_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.my_id_.IsDefault()) {
          _impl_.my_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftPing.my_id)
}

// int32 role = 2;
inline void RaftPing::clear_role() {
  _impl_.role_ = 0;
}
inline ::int32_t RaftPing::role() const {
  // @@protoc_insertion_point(field_get:prpc.RaftPing.role)
  return _internal_role();
}
inline void RaftPing::set_role(::int32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:prpc.RaftPing.role)
}
inline ::int32_t RaftPing::_internal_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.role_;
}
inline void RaftPing::_internal_set_role(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.role_ = value;
}

// uint64 epoch = 3;
inline void RaftPing::clear_epoch() {
  _impl_.epoch_ = ::uint64_t{0u};
}
inline ::uint64_t RaftPing::epoch() const {
  // @@protoc_insertion_point(field_get:prpc.RaftPing.epoch)
  return _internal_epoch();
}
inline void RaftPing::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:prpc.RaftPing.epoch)
}
inline ::uint64_t RaftPing::_internal_epoch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.epoch_;
}
inline void RaftPing::_internal_set_epoch(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.epoch_ = value;
}

// -------------------------------------------------------------------

// RaftPong

// -------------------------------------------------------------------

// RaftMsg

// .prpc.RaftMsg.Type type = 1;
inline void RaftMsg::clear_type() {
  _impl_.type_ = 0;
}
inline ::prpc::RaftMsg_Type RaftMsg::type() const {
  // @@protoc_insertion_point(field_get:prpc.RaftMsg.type)
  return _internal_type();
}
inline void RaftMsg::set_type(::prpc::RaftMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:prpc.RaftMsg.type)
}
inline ::prpc::RaftMsg_Type RaftMsg::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::prpc::RaftMsg_Type>(_impl_.type_);
}
inline void RaftMsg::_internal_set_type(::prpc::RaftMsg_Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .prpc.RaftTransaction action = 2;
inline bool RaftMsg::has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_ != nullptr);
  return value;
}
inline void RaftMsg::clear_action() {
  if (_impl_.action_ != nullptr) _impl_.action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::RaftTransaction& RaftMsg::_internal_action() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::RaftTransaction* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::RaftTransaction&>(::prpc::_RaftTransaction_default_instance_);
}
inline const ::prpc::RaftTransaction& RaftMsg::action() const {
  // @@protoc_insertion_point(field_get:prpc.RaftMsg.action)
  return _internal_action();
}
inline void RaftMsg::unsafe_arena_set_allocated_action(::prpc::RaftTransaction* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = reinterpret_cast<::prpc::RaftTransaction*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.RaftMsg.action)
}
inline ::prpc::RaftTransaction* RaftMsg::release_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::RaftTransaction* released = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::RaftTransaction* RaftMsg::unsafe_arena_release_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.RaftMsg.action)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::RaftTransaction* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::prpc::RaftTransaction* RaftMsg::_internal_mutable_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.action_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::RaftTransaction>(GetArenaForAllocation());
    _impl_.action_ = reinterpret_cast<::prpc::RaftTransaction*>(p);
  }
  return _impl_.action_;
}
inline ::prpc::RaftTransaction* RaftMsg::mutable_action() {
  ::prpc::RaftTransaction* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:prpc.RaftMsg.action)
  return _msg;
}
inline void RaftMsg::set_allocated_action(::prpc::RaftTransaction* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::RaftTransaction*>(_impl_.action_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::RaftTransaction*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.action_ = reinterpret_cast<::prpc::RaftTransaction*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.RaftMsg.action)
}

// repeated .prpc.RaftTransaction sync_actions = 3;
inline int RaftMsg::_internal_sync_actions_size() const {
  return _internal_sync_actions().size();
}
inline int RaftMsg::sync_actions_size() const {
  return _internal_sync_actions_size();
}
inline void RaftMsg::clear_sync_actions() {
  _internal_mutable_sync_actions()->Clear();
}
inline ::prpc::RaftTransaction* RaftMsg::mutable_sync_actions(int index) {
  // @@protoc_insertion_point(field_mutable:prpc.RaftMsg.sync_actions)
  return _internal_mutable_sync_actions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prpc::RaftTransaction >*
RaftMsg::mutable_sync_actions() {
  // @@protoc_insertion_point(field_mutable_list:prpc.RaftMsg.sync_actions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sync_actions();
}
inline const ::prpc::RaftTransaction& RaftMsg::sync_actions(int index) const {
  // @@protoc_insertion_point(field_get:prpc.RaftMsg.sync_actions)
    return _internal_sync_actions().Get(index);
}
inline ::prpc::RaftTransaction* RaftMsg::add_sync_actions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::prpc::RaftTransaction* _add = _internal_mutable_sync_actions()->Add();
  // @@protoc_insertion_point(field_add:prpc.RaftMsg.sync_actions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::prpc::RaftTransaction >&
RaftMsg::sync_actions() const {
  // @@protoc_insertion_point(field_list:prpc.RaftMsg.sync_actions)
  return _internal_sync_actions();
}
inline const ::google::protobuf::RepeatedPtrField<::prpc::RaftTransaction>&
RaftMsg::_internal_sync_actions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sync_actions_;
}
inline ::google::protobuf::RepeatedPtrField<::prpc::RaftTransaction>*
RaftMsg::_internal_mutable_sync_actions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sync_actions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::prpc::RaftTransaction_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::prpc::RaftTransaction_Type>() {
  return ::prpc::RaftTransaction_Type_descriptor();
}
template <>
struct is_proto_enum<::prpc::RaftMsg_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::prpc::RaftMsg_Type>() {
  return ::prpc::RaftMsg_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_raft_2eproto_2epb_2eh
