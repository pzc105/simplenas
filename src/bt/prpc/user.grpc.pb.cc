// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace prpc {

static const char* UserService_method_names[] = {
  "/prpc.UserService/Register",
  "/prpc.UserService/IsUsedEmail",
  "/prpc.UserService/Login",
  "/prpc.UserService/FastLogin",
  "/prpc.UserService/IsLogined",
  "/prpc.UserService/ChangePassword",
  "/prpc.UserService/Download",
  "/prpc.UserService/RemoveTorrent",
  "/prpc.UserService/GetMagnetUri",
  "/prpc.UserService/GetTorrents",
  "/prpc.UserService/OnBtStatus",
  "/prpc.UserService/QueryBtVideos",
  "/prpc.UserService/NewCategoryItem",
  "/prpc.UserService/DelCategoryItem",
  "/prpc.UserService/AddBtVideos",
  "/prpc.UserService/ShareItem",
  "/prpc.UserService/QuerySharedItems",
  "/prpc.UserService/DelSharedItem",
  "/prpc.UserService/QuerySubItems",
  "/prpc.UserService/QueryItemInfo",
  "/prpc.UserService/UploadSubtitle",
  "/prpc.UserService/GetBtMeta",
  "/prpc.UserService/NewBtHlsTask",
  "/prpc.UserService/JoinChatRoom",
  "/prpc.UserService/SendMsg2ChatRoom",
  "/prpc.UserService/AddMagnetCategory",
  "/prpc.UserService/AddMagnetUri",
  "/prpc.UserService/QueryMagnet",
  "/prpc.UserService/DelMagnetCategory",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsUsedEmail_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FastLogin_(UserService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsLogined_(UserService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(UserService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Download_(UserService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveTorrent_(UserService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMagnetUri_(UserService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTorrents_(UserService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnBtStatus_(UserService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_QueryBtVideos_(UserService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewCategoryItem_(UserService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelCategoryItem_(UserService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBtVideos_(UserService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareItem_(UserService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySharedItems_(UserService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelSharedItem_(UserService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySubItems_(UserService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryItemInfo_(UserService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadSubtitle_(UserService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBtMeta_(UserService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewBtHlsTask_(UserService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinChatRoom_(UserService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendMsg2ChatRoom_(UserService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddMagnetCategory_(UserService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddMagnetUri_(UserService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMagnet_(UserService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelMagnetCategory_(UserService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::Register(::grpc::ClientContext* context, const ::prpc::RegisterInfo& request, ::prpc::RegisterRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::RegisterInfo, ::prpc::RegisterRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void UserService::Stub::async::Register(::grpc::ClientContext* context, const ::prpc::RegisterInfo* request, ::prpc::RegisterRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::RegisterInfo, ::prpc::RegisterRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void UserService::Stub::async::Register(::grpc::ClientContext* context, const ::prpc::RegisterInfo* request, ::prpc::RegisterRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::RegisterRet>* UserService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::prpc::RegisterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::RegisterRet, ::prpc::RegisterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::RegisterRet>* UserService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::prpc::RegisterInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::IsUsedEmail(::grpc::ClientContext* context, const ::prpc::EmailInfo& request, ::prpc::IsUsedEmailRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::EmailInfo, ::prpc::IsUsedEmailRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsUsedEmail_, context, request, response);
}

void UserService::Stub::async::IsUsedEmail(::grpc::ClientContext* context, const ::prpc::EmailInfo* request, ::prpc::IsUsedEmailRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::EmailInfo, ::prpc::IsUsedEmailRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsUsedEmail_, context, request, response, std::move(f));
}

void UserService::Stub::async::IsUsedEmail(::grpc::ClientContext* context, const ::prpc::EmailInfo* request, ::prpc::IsUsedEmailRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsUsedEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::IsUsedEmailRet>* UserService::Stub::PrepareAsyncIsUsedEmailRaw(::grpc::ClientContext* context, const ::prpc::EmailInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::IsUsedEmailRet, ::prpc::EmailInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsUsedEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::IsUsedEmailRet>* UserService::Stub::AsyncIsUsedEmailRaw(::grpc::ClientContext* context, const ::prpc::EmailInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsUsedEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Login(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::prpc::LoginRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void UserService::Stub::async::Login(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserService::Stub::async::Login(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::LoginRet, ::prpc::LoginInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::FastLogin(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::prpc::LoginRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FastLogin_, context, request, response);
}

void UserService::Stub::async::FastLogin(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FastLogin_, context, request, response, std::move(f));
}

void UserService::Stub::async::FastLogin(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FastLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::PrepareAsyncFastLoginRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::LoginRet, ::prpc::LoginInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FastLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::AsyncFastLoginRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFastLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::IsLogined(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::prpc::LoginRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsLogined_, context, request, response);
}

void UserService::Stub::async::IsLogined(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsLogined_, context, request, response, std::move(f));
}

void UserService::Stub::async::IsLogined(::grpc::ClientContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsLogined_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::PrepareAsyncIsLoginedRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::LoginRet, ::prpc::LoginInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsLogined_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::LoginRet>* UserService::Stub::AsyncIsLoginedRaw(::grpc::ClientContext* context, const ::prpc::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsLoginedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ChangePassword(::grpc::ClientContext* context, const ::prpc::ChangePasswordReq& request, ::prpc::ChangePasswordRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::ChangePasswordReq, ::prpc::ChangePasswordRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::prpc::ChangePasswordReq* request, ::prpc::ChangePasswordRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::ChangePasswordReq, ::prpc::ChangePasswordRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void UserService::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::prpc::ChangePasswordReq* request, ::prpc::ChangePasswordRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::ChangePasswordRsp>* UserService::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::prpc::ChangePasswordReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::ChangePasswordRsp, ::prpc::ChangePasswordReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::ChangePasswordRsp>* UserService::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::prpc::ChangePasswordReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::prpc::DownloadRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Download_, context, request, response);
}

void UserService::Stub::async::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, std::move(f));
}

void UserService::Stub::async::Download(::grpc::ClientContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* UserService::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DownloadRespone, ::prpc::DownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Download_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DownloadRespone>* UserService::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::prpc::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::prpc::RemoveTorrentRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveTorrent_, context, request, response);
}

void UserService::Stub::async::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveTorrent_, context, request, response, std::move(f));
}

void UserService::Stub::async::RemoveTorrent(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveTorrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* UserService::Stub::PrepareAsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::RemoveTorrentRes, ::prpc::RemoveTorrentReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveTorrent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::RemoveTorrentRes>* UserService::Stub::AsyncRemoveTorrentRaw(::grpc::ClientContext* context, const ::prpc::RemoveTorrentReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveTorrentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetMagnetUri(::grpc::ClientContext* context, const ::prpc::GetMagnetUriReq& request, ::prpc::GetMagnetUriRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::GetMagnetUriReq, ::prpc::GetMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMagnetUri_, context, request, response);
}

void UserService::Stub::async::GetMagnetUri(::grpc::ClientContext* context, const ::prpc::GetMagnetUriReq* request, ::prpc::GetMagnetUriRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::GetMagnetUriReq, ::prpc::GetMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMagnetUri_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetMagnetUri(::grpc::ClientContext* context, const ::prpc::GetMagnetUriReq* request, ::prpc::GetMagnetUriRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMagnetUri_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetMagnetUriRsp>* UserService::Stub::PrepareAsyncGetMagnetUriRaw(::grpc::ClientContext* context, const ::prpc::GetMagnetUriReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::GetMagnetUriRsp, ::prpc::GetMagnetUriReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMagnetUri_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetMagnetUriRsp>* UserService::Stub::AsyncGetMagnetUriRaw(::grpc::ClientContext* context, const ::prpc::GetMagnetUriReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMagnetUriRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetTorrents(::grpc::ClientContext* context, const ::prpc::GetTorrentsReq& request, ::prpc::GetTorrentsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::GetTorrentsReq, ::prpc::GetTorrentsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTorrents_, context, request, response);
}

void UserService::Stub::async::GetTorrents(::grpc::ClientContext* context, const ::prpc::GetTorrentsReq* request, ::prpc::GetTorrentsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::GetTorrentsReq, ::prpc::GetTorrentsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTorrents_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetTorrents(::grpc::ClientContext* context, const ::prpc::GetTorrentsReq* request, ::prpc::GetTorrentsRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTorrents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetTorrentsRsp>* UserService::Stub::PrepareAsyncGetTorrentsRaw(::grpc::ClientContext* context, const ::prpc::GetTorrentsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::GetTorrentsRsp, ::prpc::GetTorrentsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTorrents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetTorrentsRsp>* UserService::Stub::AsyncGetTorrentsRaw(::grpc::ClientContext* context, const ::prpc::GetTorrentsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTorrentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::prpc::BtStatusRespone>* UserService::Stub::OnBtStatusRaw(::grpc::ClientContext* context, const ::prpc::BtStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::prpc::BtStatusRespone>::Create(channel_.get(), rpcmethod_OnBtStatus_, context, request);
}

void UserService::Stub::async::OnBtStatus(::grpc::ClientContext* context, const ::prpc::BtStatusRequest* request, ::grpc::ClientReadReactor< ::prpc::BtStatusRespone>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::prpc::BtStatusRespone>::Create(stub_->channel_.get(), stub_->rpcmethod_OnBtStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::prpc::BtStatusRespone>* UserService::Stub::AsyncOnBtStatusRaw(::grpc::ClientContext* context, const ::prpc::BtStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prpc::BtStatusRespone>::Create(channel_.get(), cq, rpcmethod_OnBtStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::prpc::BtStatusRespone>* UserService::Stub::PrepareAsyncOnBtStatusRaw(::grpc::ClientContext* context, const ::prpc::BtStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prpc::BtStatusRespone>::Create(channel_.get(), cq, rpcmethod_OnBtStatus_, context, request, false, nullptr);
}

::grpc::Status UserService::Stub::QueryBtVideos(::grpc::ClientContext* context, const ::prpc::QueryBtVideosReq& request, ::prpc::QueryBtVideosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QueryBtVideosReq, ::prpc::QueryBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryBtVideos_, context, request, response);
}

void UserService::Stub::async::QueryBtVideos(::grpc::ClientContext* context, const ::prpc::QueryBtVideosReq* request, ::prpc::QueryBtVideosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QueryBtVideosReq, ::prpc::QueryBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryBtVideos_, context, request, response, std::move(f));
}

void UserService::Stub::async::QueryBtVideos(::grpc::ClientContext* context, const ::prpc::QueryBtVideosReq* request, ::prpc::QueryBtVideosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryBtVideos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryBtVideosRes>* UserService::Stub::PrepareAsyncQueryBtVideosRaw(::grpc::ClientContext* context, const ::prpc::QueryBtVideosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QueryBtVideosRes, ::prpc::QueryBtVideosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryBtVideos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryBtVideosRes>* UserService::Stub::AsyncQueryBtVideosRaw(::grpc::ClientContext* context, const ::prpc::QueryBtVideosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryBtVideosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::NewCategoryItem(::grpc::ClientContext* context, const ::prpc::NewCategoryItemReq& request, ::prpc::NewCategoryItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::NewCategoryItemReq, ::prpc::NewCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewCategoryItem_, context, request, response);
}

void UserService::Stub::async::NewCategoryItem(::grpc::ClientContext* context, const ::prpc::NewCategoryItemReq* request, ::prpc::NewCategoryItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::NewCategoryItemReq, ::prpc::NewCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewCategoryItem_, context, request, response, std::move(f));
}

void UserService::Stub::async::NewCategoryItem(::grpc::ClientContext* context, const ::prpc::NewCategoryItemReq* request, ::prpc::NewCategoryItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewCategoryItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::NewCategoryItemRes>* UserService::Stub::PrepareAsyncNewCategoryItemRaw(::grpc::ClientContext* context, const ::prpc::NewCategoryItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::NewCategoryItemRes, ::prpc::NewCategoryItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewCategoryItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::NewCategoryItemRes>* UserService::Stub::AsyncNewCategoryItemRaw(::grpc::ClientContext* context, const ::prpc::NewCategoryItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewCategoryItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::DelCategoryItem(::grpc::ClientContext* context, const ::prpc::DelCategoryItemReq& request, ::prpc::DelCategoryItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DelCategoryItemReq, ::prpc::DelCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelCategoryItem_, context, request, response);
}

void UserService::Stub::async::DelCategoryItem(::grpc::ClientContext* context, const ::prpc::DelCategoryItemReq* request, ::prpc::DelCategoryItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DelCategoryItemReq, ::prpc::DelCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelCategoryItem_, context, request, response, std::move(f));
}

void UserService::Stub::async::DelCategoryItem(::grpc::ClientContext* context, const ::prpc::DelCategoryItemReq* request, ::prpc::DelCategoryItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelCategoryItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelCategoryItemRes>* UserService::Stub::PrepareAsyncDelCategoryItemRaw(::grpc::ClientContext* context, const ::prpc::DelCategoryItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DelCategoryItemRes, ::prpc::DelCategoryItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelCategoryItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelCategoryItemRes>* UserService::Stub::AsyncDelCategoryItemRaw(::grpc::ClientContext* context, const ::prpc::DelCategoryItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelCategoryItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::AddBtVideos(::grpc::ClientContext* context, const ::prpc::AddBtVideosReq& request, ::prpc::AddBtVideosRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::AddBtVideosReq, ::prpc::AddBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddBtVideos_, context, request, response);
}

void UserService::Stub::async::AddBtVideos(::grpc::ClientContext* context, const ::prpc::AddBtVideosReq* request, ::prpc::AddBtVideosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::AddBtVideosReq, ::prpc::AddBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBtVideos_, context, request, response, std::move(f));
}

void UserService::Stub::async::AddBtVideos(::grpc::ClientContext* context, const ::prpc::AddBtVideosReq* request, ::prpc::AddBtVideosRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBtVideos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddBtVideosRes>* UserService::Stub::PrepareAsyncAddBtVideosRaw(::grpc::ClientContext* context, const ::prpc::AddBtVideosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::AddBtVideosRes, ::prpc::AddBtVideosReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddBtVideos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddBtVideosRes>* UserService::Stub::AsyncAddBtVideosRaw(::grpc::ClientContext* context, const ::prpc::AddBtVideosReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddBtVideosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::ShareItem(::grpc::ClientContext* context, const ::prpc::ShareItemReq& request, ::prpc::ShareItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::ShareItemReq, ::prpc::ShareItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareItem_, context, request, response);
}

void UserService::Stub::async::ShareItem(::grpc::ClientContext* context, const ::prpc::ShareItemReq* request, ::prpc::ShareItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::ShareItemReq, ::prpc::ShareItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareItem_, context, request, response, std::move(f));
}

void UserService::Stub::async::ShareItem(::grpc::ClientContext* context, const ::prpc::ShareItemReq* request, ::prpc::ShareItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::ShareItemRes>* UserService::Stub::PrepareAsyncShareItemRaw(::grpc::ClientContext* context, const ::prpc::ShareItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::ShareItemRes, ::prpc::ShareItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::ShareItemRes>* UserService::Stub::AsyncShareItemRaw(::grpc::ClientContext* context, const ::prpc::ShareItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::QuerySharedItems(::grpc::ClientContext* context, const ::prpc::QuerySharedItemsReq& request, ::prpc::QuerySharedItemsRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QuerySharedItemsReq, ::prpc::QuerySharedItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuerySharedItems_, context, request, response);
}

void UserService::Stub::async::QuerySharedItems(::grpc::ClientContext* context, const ::prpc::QuerySharedItemsReq* request, ::prpc::QuerySharedItemsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QuerySharedItemsReq, ::prpc::QuerySharedItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySharedItems_, context, request, response, std::move(f));
}

void UserService::Stub::async::QuerySharedItems(::grpc::ClientContext* context, const ::prpc::QuerySharedItemsReq* request, ::prpc::QuerySharedItemsRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySharedItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QuerySharedItemsRes>* UserService::Stub::PrepareAsyncQuerySharedItemsRaw(::grpc::ClientContext* context, const ::prpc::QuerySharedItemsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QuerySharedItemsRes, ::prpc::QuerySharedItemsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuerySharedItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QuerySharedItemsRes>* UserService::Stub::AsyncQuerySharedItemsRaw(::grpc::ClientContext* context, const ::prpc::QuerySharedItemsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuerySharedItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::DelSharedItem(::grpc::ClientContext* context, const ::prpc::DelSharedItemReq& request, ::prpc::DelSharedItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DelSharedItemReq, ::prpc::DelSharedItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelSharedItem_, context, request, response);
}

void UserService::Stub::async::DelSharedItem(::grpc::ClientContext* context, const ::prpc::DelSharedItemReq* request, ::prpc::DelSharedItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DelSharedItemReq, ::prpc::DelSharedItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelSharedItem_, context, request, response, std::move(f));
}

void UserService::Stub::async::DelSharedItem(::grpc::ClientContext* context, const ::prpc::DelSharedItemReq* request, ::prpc::DelSharedItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelSharedItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelSharedItemRes>* UserService::Stub::PrepareAsyncDelSharedItemRaw(::grpc::ClientContext* context, const ::prpc::DelSharedItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DelSharedItemRes, ::prpc::DelSharedItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelSharedItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelSharedItemRes>* UserService::Stub::AsyncDelSharedItemRaw(::grpc::ClientContext* context, const ::prpc::DelSharedItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelSharedItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::QuerySubItems(::grpc::ClientContext* context, const ::prpc::QuerySubItemsReq& request, ::prpc::QuerySubItemsRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QuerySubItemsReq, ::prpc::QuerySubItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuerySubItems_, context, request, response);
}

void UserService::Stub::async::QuerySubItems(::grpc::ClientContext* context, const ::prpc::QuerySubItemsReq* request, ::prpc::QuerySubItemsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QuerySubItemsReq, ::prpc::QuerySubItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySubItems_, context, request, response, std::move(f));
}

void UserService::Stub::async::QuerySubItems(::grpc::ClientContext* context, const ::prpc::QuerySubItemsReq* request, ::prpc::QuerySubItemsRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuerySubItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QuerySubItemsRes>* UserService::Stub::PrepareAsyncQuerySubItemsRaw(::grpc::ClientContext* context, const ::prpc::QuerySubItemsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QuerySubItemsRes, ::prpc::QuerySubItemsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuerySubItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QuerySubItemsRes>* UserService::Stub::AsyncQuerySubItemsRaw(::grpc::ClientContext* context, const ::prpc::QuerySubItemsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuerySubItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::QueryItemInfo(::grpc::ClientContext* context, const ::prpc::QueryItemInfoReq& request, ::prpc::QueryItemInfoRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QueryItemInfoReq, ::prpc::QueryItemInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryItemInfo_, context, request, response);
}

void UserService::Stub::async::QueryItemInfo(::grpc::ClientContext* context, const ::prpc::QueryItemInfoReq* request, ::prpc::QueryItemInfoRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QueryItemInfoReq, ::prpc::QueryItemInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryItemInfo_, context, request, response, std::move(f));
}

void UserService::Stub::async::QueryItemInfo(::grpc::ClientContext* context, const ::prpc::QueryItemInfoReq* request, ::prpc::QueryItemInfoRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryItemInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryItemInfoRes>* UserService::Stub::PrepareAsyncQueryItemInfoRaw(::grpc::ClientContext* context, const ::prpc::QueryItemInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QueryItemInfoRes, ::prpc::QueryItemInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryItemInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryItemInfoRes>* UserService::Stub::AsyncQueryItemInfoRaw(::grpc::ClientContext* context, const ::prpc::QueryItemInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryItemInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::UploadSubtitle(::grpc::ClientContext* context, const ::prpc::UploadSubtitleReq& request, ::prpc::UploadSubtitleRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::UploadSubtitleReq, ::prpc::UploadSubtitleRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadSubtitle_, context, request, response);
}

void UserService::Stub::async::UploadSubtitle(::grpc::ClientContext* context, const ::prpc::UploadSubtitleReq* request, ::prpc::UploadSubtitleRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::UploadSubtitleReq, ::prpc::UploadSubtitleRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSubtitle_, context, request, response, std::move(f));
}

void UserService::Stub::async::UploadSubtitle(::grpc::ClientContext* context, const ::prpc::UploadSubtitleReq* request, ::prpc::UploadSubtitleRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSubtitle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::UploadSubtitleRes>* UserService::Stub::PrepareAsyncUploadSubtitleRaw(::grpc::ClientContext* context, const ::prpc::UploadSubtitleReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::UploadSubtitleRes, ::prpc::UploadSubtitleReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadSubtitle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::UploadSubtitleRes>* UserService::Stub::AsyncUploadSubtitleRaw(::grpc::ClientContext* context, const ::prpc::UploadSubtitleReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadSubtitleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetBtMeta(::grpc::ClientContext* context, const ::prpc::GetBtMetaReq& request, ::prpc::GetBtMetaRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::GetBtMetaReq, ::prpc::GetBtMetaRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBtMeta_, context, request, response);
}

void UserService::Stub::async::GetBtMeta(::grpc::ClientContext* context, const ::prpc::GetBtMetaReq* request, ::prpc::GetBtMetaRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::GetBtMetaReq, ::prpc::GetBtMetaRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBtMeta_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetBtMeta(::grpc::ClientContext* context, const ::prpc::GetBtMetaReq* request, ::prpc::GetBtMetaRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBtMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetBtMetaRsp>* UserService::Stub::PrepareAsyncGetBtMetaRaw(::grpc::ClientContext* context, const ::prpc::GetBtMetaReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::GetBtMetaRsp, ::prpc::GetBtMetaReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBtMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::GetBtMetaRsp>* UserService::Stub::AsyncGetBtMetaRaw(::grpc::ClientContext* context, const ::prpc::GetBtMetaReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBtMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::NewBtHlsTask(::grpc::ClientContext* context, const ::prpc::NewBtHlsTaskReq& request, ::prpc::NewBtHlsTaskRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::NewBtHlsTaskReq, ::prpc::NewBtHlsTaskRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewBtHlsTask_, context, request, response);
}

void UserService::Stub::async::NewBtHlsTask(::grpc::ClientContext* context, const ::prpc::NewBtHlsTaskReq* request, ::prpc::NewBtHlsTaskRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::NewBtHlsTaskReq, ::prpc::NewBtHlsTaskRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewBtHlsTask_, context, request, response, std::move(f));
}

void UserService::Stub::async::NewBtHlsTask(::grpc::ClientContext* context, const ::prpc::NewBtHlsTaskReq* request, ::prpc::NewBtHlsTaskRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewBtHlsTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::NewBtHlsTaskRsp>* UserService::Stub::PrepareAsyncNewBtHlsTaskRaw(::grpc::ClientContext* context, const ::prpc::NewBtHlsTaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::NewBtHlsTaskRsp, ::prpc::NewBtHlsTaskReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewBtHlsTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::NewBtHlsTaskRsp>* UserService::Stub::AsyncNewBtHlsTaskRaw(::grpc::ClientContext* context, const ::prpc::NewBtHlsTaskReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewBtHlsTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::prpc::JoinChatRoomRes>* UserService::Stub::JoinChatRoomRaw(::grpc::ClientContext* context, const ::prpc::JoinChatRoomReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::prpc::JoinChatRoomRes>::Create(channel_.get(), rpcmethod_JoinChatRoom_, context, request);
}

void UserService::Stub::async::JoinChatRoom(::grpc::ClientContext* context, const ::prpc::JoinChatRoomReq* request, ::grpc::ClientReadReactor< ::prpc::JoinChatRoomRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::prpc::JoinChatRoomRes>::Create(stub_->channel_.get(), stub_->rpcmethod_JoinChatRoom_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::prpc::JoinChatRoomRes>* UserService::Stub::AsyncJoinChatRoomRaw(::grpc::ClientContext* context, const ::prpc::JoinChatRoomReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prpc::JoinChatRoomRes>::Create(channel_.get(), cq, rpcmethod_JoinChatRoom_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::prpc::JoinChatRoomRes>* UserService::Stub::PrepareAsyncJoinChatRoomRaw(::grpc::ClientContext* context, const ::prpc::JoinChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::prpc::JoinChatRoomRes>::Create(channel_.get(), cq, rpcmethod_JoinChatRoom_, context, request, false, nullptr);
}

::grpc::Status UserService::Stub::SendMsg2ChatRoom(::grpc::ClientContext* context, const ::prpc::SendMsg2ChatRoomReq& request, ::prpc::SendMsg2ChatRoomRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::SendMsg2ChatRoomReq, ::prpc::SendMsg2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMsg2ChatRoom_, context, request, response);
}

void UserService::Stub::async::SendMsg2ChatRoom(::grpc::ClientContext* context, const ::prpc::SendMsg2ChatRoomReq* request, ::prpc::SendMsg2ChatRoomRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::SendMsg2ChatRoomReq, ::prpc::SendMsg2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMsg2ChatRoom_, context, request, response, std::move(f));
}

void UserService::Stub::async::SendMsg2ChatRoom(::grpc::ClientContext* context, const ::prpc::SendMsg2ChatRoomReq* request, ::prpc::SendMsg2ChatRoomRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMsg2ChatRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::SendMsg2ChatRoomRes>* UserService::Stub::PrepareAsyncSendMsg2ChatRoomRaw(::grpc::ClientContext* context, const ::prpc::SendMsg2ChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::SendMsg2ChatRoomRes, ::prpc::SendMsg2ChatRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMsg2ChatRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::SendMsg2ChatRoomRes>* UserService::Stub::AsyncSendMsg2ChatRoomRaw(::grpc::ClientContext* context, const ::prpc::SendMsg2ChatRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMsg2ChatRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::AddMagnetCategory(::grpc::ClientContext* context, const ::prpc::AddMagnetCategoryReq& request, ::prpc::AddMagnetCategoryRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::AddMagnetCategoryReq, ::prpc::AddMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddMagnetCategory_, context, request, response);
}

void UserService::Stub::async::AddMagnetCategory(::grpc::ClientContext* context, const ::prpc::AddMagnetCategoryReq* request, ::prpc::AddMagnetCategoryRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::AddMagnetCategoryReq, ::prpc::AddMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddMagnetCategory_, context, request, response, std::move(f));
}

void UserService::Stub::async::AddMagnetCategory(::grpc::ClientContext* context, const ::prpc::AddMagnetCategoryReq* request, ::prpc::AddMagnetCategoryRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddMagnetCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddMagnetCategoryRsp>* UserService::Stub::PrepareAsyncAddMagnetCategoryRaw(::grpc::ClientContext* context, const ::prpc::AddMagnetCategoryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::AddMagnetCategoryRsp, ::prpc::AddMagnetCategoryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddMagnetCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddMagnetCategoryRsp>* UserService::Stub::AsyncAddMagnetCategoryRaw(::grpc::ClientContext* context, const ::prpc::AddMagnetCategoryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddMagnetCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::AddMagnetUri(::grpc::ClientContext* context, const ::prpc::AddMagnetUriReq& request, ::prpc::AddMagnetUriRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::AddMagnetUriReq, ::prpc::AddMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddMagnetUri_, context, request, response);
}

void UserService::Stub::async::AddMagnetUri(::grpc::ClientContext* context, const ::prpc::AddMagnetUriReq* request, ::prpc::AddMagnetUriRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::AddMagnetUriReq, ::prpc::AddMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddMagnetUri_, context, request, response, std::move(f));
}

void UserService::Stub::async::AddMagnetUri(::grpc::ClientContext* context, const ::prpc::AddMagnetUriReq* request, ::prpc::AddMagnetUriRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddMagnetUri_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddMagnetUriRsp>* UserService::Stub::PrepareAsyncAddMagnetUriRaw(::grpc::ClientContext* context, const ::prpc::AddMagnetUriReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::AddMagnetUriRsp, ::prpc::AddMagnetUriReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddMagnetUri_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::AddMagnetUriRsp>* UserService::Stub::AsyncAddMagnetUriRaw(::grpc::ClientContext* context, const ::prpc::AddMagnetUriReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddMagnetUriRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::QueryMagnet(::grpc::ClientContext* context, const ::prpc::QueryMagnetReq& request, ::prpc::QueryMagnetRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::QueryMagnetReq, ::prpc::QueryMagnetRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryMagnet_, context, request, response);
}

void UserService::Stub::async::QueryMagnet(::grpc::ClientContext* context, const ::prpc::QueryMagnetReq* request, ::prpc::QueryMagnetRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::QueryMagnetReq, ::prpc::QueryMagnetRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMagnet_, context, request, response, std::move(f));
}

void UserService::Stub::async::QueryMagnet(::grpc::ClientContext* context, const ::prpc::QueryMagnetReq* request, ::prpc::QueryMagnetRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMagnet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryMagnetRsp>* UserService::Stub::PrepareAsyncQueryMagnetRaw(::grpc::ClientContext* context, const ::prpc::QueryMagnetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::QueryMagnetRsp, ::prpc::QueryMagnetReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryMagnet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::QueryMagnetRsp>* UserService::Stub::AsyncQueryMagnetRaw(::grpc::ClientContext* context, const ::prpc::QueryMagnetReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryMagnetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::DelMagnetCategory(::grpc::ClientContext* context, const ::prpc::DelMagnetCategoryReq& request, ::prpc::DelMagnetCategoryRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::prpc::DelMagnetCategoryReq, ::prpc::DelMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelMagnetCategory_, context, request, response);
}

void UserService::Stub::async::DelMagnetCategory(::grpc::ClientContext* context, const ::prpc::DelMagnetCategoryReq* request, ::prpc::DelMagnetCategoryRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::prpc::DelMagnetCategoryReq, ::prpc::DelMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelMagnetCategory_, context, request, response, std::move(f));
}

void UserService::Stub::async::DelMagnetCategory(::grpc::ClientContext* context, const ::prpc::DelMagnetCategoryReq* request, ::prpc::DelMagnetCategoryRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelMagnetCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelMagnetCategoryRsp>* UserService::Stub::PrepareAsyncDelMagnetCategoryRaw(::grpc::ClientContext* context, const ::prpc::DelMagnetCategoryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::prpc::DelMagnetCategoryRsp, ::prpc::DelMagnetCategoryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelMagnetCategory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::prpc::DelMagnetCategoryRsp>* UserService::Stub::AsyncDelMagnetCategoryRaw(::grpc::ClientContext* context, const ::prpc::DelMagnetCategoryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelMagnetCategoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::RegisterInfo, ::prpc::RegisterRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::RegisterInfo* req,
             ::prpc::RegisterRet* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::EmailInfo, ::prpc::IsUsedEmailRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::EmailInfo* req,
             ::prpc::IsUsedEmailRet* resp) {
               return service->IsUsedEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::LoginInfo* req,
             ::prpc::LoginRet* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::LoginInfo* req,
             ::prpc::LoginRet* resp) {
               return service->FastLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::LoginInfo, ::prpc::LoginRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::LoginInfo* req,
             ::prpc::LoginRet* resp) {
               return service->IsLogined(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::ChangePasswordReq, ::prpc::ChangePasswordRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::ChangePasswordReq* req,
             ::prpc::ChangePasswordRsp* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::DownloadRequest, ::prpc::DownloadRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DownloadRequest* req,
             ::prpc::DownloadRespone* resp) {
               return service->Download(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::RemoveTorrentReq, ::prpc::RemoveTorrentRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::RemoveTorrentReq* req,
             ::prpc::RemoveTorrentRes* resp) {
               return service->RemoveTorrent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::GetMagnetUriReq, ::prpc::GetMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::GetMagnetUriReq* req,
             ::prpc::GetMagnetUriRsp* resp) {
               return service->GetMagnetUri(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::GetTorrentsReq, ::prpc::GetTorrentsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::GetTorrentsReq* req,
             ::prpc::GetTorrentsRsp* resp) {
               return service->GetTorrents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UserService::Service, ::prpc::BtStatusRequest, ::prpc::BtStatusRespone>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::BtStatusRequest* req,
             ::grpc::ServerWriter<::prpc::BtStatusRespone>* writer) {
               return service->OnBtStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::QueryBtVideosReq, ::prpc::QueryBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QueryBtVideosReq* req,
             ::prpc::QueryBtVideosRes* resp) {
               return service->QueryBtVideos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::NewCategoryItemReq, ::prpc::NewCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::NewCategoryItemReq* req,
             ::prpc::NewCategoryItemRes* resp) {
               return service->NewCategoryItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::DelCategoryItemReq, ::prpc::DelCategoryItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DelCategoryItemReq* req,
             ::prpc::DelCategoryItemRes* resp) {
               return service->DelCategoryItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::AddBtVideosReq, ::prpc::AddBtVideosRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::AddBtVideosReq* req,
             ::prpc::AddBtVideosRes* resp) {
               return service->AddBtVideos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::ShareItemReq, ::prpc::ShareItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::ShareItemReq* req,
             ::prpc::ShareItemRes* resp) {
               return service->ShareItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::QuerySharedItemsReq, ::prpc::QuerySharedItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QuerySharedItemsReq* req,
             ::prpc::QuerySharedItemsRes* resp) {
               return service->QuerySharedItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::DelSharedItemReq, ::prpc::DelSharedItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DelSharedItemReq* req,
             ::prpc::DelSharedItemRes* resp) {
               return service->DelSharedItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::QuerySubItemsReq, ::prpc::QuerySubItemsRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QuerySubItemsReq* req,
             ::prpc::QuerySubItemsRes* resp) {
               return service->QuerySubItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::QueryItemInfoReq, ::prpc::QueryItemInfoRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QueryItemInfoReq* req,
             ::prpc::QueryItemInfoRes* resp) {
               return service->QueryItemInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::UploadSubtitleReq, ::prpc::UploadSubtitleRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::UploadSubtitleReq* req,
             ::prpc::UploadSubtitleRes* resp) {
               return service->UploadSubtitle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::GetBtMetaReq, ::prpc::GetBtMetaRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::GetBtMetaReq* req,
             ::prpc::GetBtMetaRsp* resp) {
               return service->GetBtMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::NewBtHlsTaskReq, ::prpc::NewBtHlsTaskRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::NewBtHlsTaskReq* req,
             ::prpc::NewBtHlsTaskRsp* resp) {
               return service->NewBtHlsTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[23],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UserService::Service, ::prpc::JoinChatRoomReq, ::prpc::JoinChatRoomRes>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::JoinChatRoomReq* req,
             ::grpc::ServerWriter<::prpc::JoinChatRoomRes>* writer) {
               return service->JoinChatRoom(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::SendMsg2ChatRoomReq, ::prpc::SendMsg2ChatRoomRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::SendMsg2ChatRoomReq* req,
             ::prpc::SendMsg2ChatRoomRes* resp) {
               return service->SendMsg2ChatRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::AddMagnetCategoryReq, ::prpc::AddMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::AddMagnetCategoryReq* req,
             ::prpc::AddMagnetCategoryRsp* resp) {
               return service->AddMagnetCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::AddMagnetUriReq, ::prpc::AddMagnetUriRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::AddMagnetUriReq* req,
             ::prpc::AddMagnetUriRsp* resp) {
               return service->AddMagnetUri(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::QueryMagnetReq, ::prpc::QueryMagnetRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::QueryMagnetReq* req,
             ::prpc::QueryMagnetRsp* resp) {
               return service->QueryMagnet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::prpc::DelMagnetCategoryReq, ::prpc::DelMagnetCategoryRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::prpc::DelMagnetCategoryReq* req,
             ::prpc::DelMagnetCategoryRsp* resp) {
               return service->DelMagnetCategory(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::Register(::grpc::ServerContext* context, const ::prpc::RegisterInfo* request, ::prpc::RegisterRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::IsUsedEmail(::grpc::ServerContext* context, const ::prpc::EmailInfo* request, ::prpc::IsUsedEmailRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Login(::grpc::ServerContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::FastLogin(::grpc::ServerContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::IsLogined(::grpc::ServerContext* context, const ::prpc::LoginInfo* request, ::prpc::LoginRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ChangePassword(::grpc::ServerContext* context, const ::prpc::ChangePasswordReq* request, ::prpc::ChangePasswordRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Download(::grpc::ServerContext* context, const ::prpc::DownloadRequest* request, ::prpc::DownloadRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::RemoveTorrent(::grpc::ServerContext* context, const ::prpc::RemoveTorrentReq* request, ::prpc::RemoveTorrentRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetMagnetUri(::grpc::ServerContext* context, const ::prpc::GetMagnetUriReq* request, ::prpc::GetMagnetUriRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetTorrents(::grpc::ServerContext* context, const ::prpc::GetTorrentsReq* request, ::prpc::GetTorrentsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::OnBtStatus(::grpc::ServerContext* context, const ::prpc::BtStatusRequest* request, ::grpc::ServerWriter< ::prpc::BtStatusRespone>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::QueryBtVideos(::grpc::ServerContext* context, const ::prpc::QueryBtVideosReq* request, ::prpc::QueryBtVideosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::NewCategoryItem(::grpc::ServerContext* context, const ::prpc::NewCategoryItemReq* request, ::prpc::NewCategoryItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DelCategoryItem(::grpc::ServerContext* context, const ::prpc::DelCategoryItemReq* request, ::prpc::DelCategoryItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::AddBtVideos(::grpc::ServerContext* context, const ::prpc::AddBtVideosReq* request, ::prpc::AddBtVideosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::ShareItem(::grpc::ServerContext* context, const ::prpc::ShareItemReq* request, ::prpc::ShareItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::QuerySharedItems(::grpc::ServerContext* context, const ::prpc::QuerySharedItemsReq* request, ::prpc::QuerySharedItemsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DelSharedItem(::grpc::ServerContext* context, const ::prpc::DelSharedItemReq* request, ::prpc::DelSharedItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::QuerySubItems(::grpc::ServerContext* context, const ::prpc::QuerySubItemsReq* request, ::prpc::QuerySubItemsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::QueryItemInfo(::grpc::ServerContext* context, const ::prpc::QueryItemInfoReq* request, ::prpc::QueryItemInfoRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UploadSubtitle(::grpc::ServerContext* context, const ::prpc::UploadSubtitleReq* request, ::prpc::UploadSubtitleRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetBtMeta(::grpc::ServerContext* context, const ::prpc::GetBtMetaReq* request, ::prpc::GetBtMetaRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::NewBtHlsTask(::grpc::ServerContext* context, const ::prpc::NewBtHlsTaskReq* request, ::prpc::NewBtHlsTaskRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::JoinChatRoom(::grpc::ServerContext* context, const ::prpc::JoinChatRoomReq* request, ::grpc::ServerWriter< ::prpc::JoinChatRoomRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::SendMsg2ChatRoom(::grpc::ServerContext* context, const ::prpc::SendMsg2ChatRoomReq* request, ::prpc::SendMsg2ChatRoomRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::AddMagnetCategory(::grpc::ServerContext* context, const ::prpc::AddMagnetCategoryReq* request, ::prpc::AddMagnetCategoryRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::AddMagnetUri(::grpc::ServerContext* context, const ::prpc::AddMagnetUriReq* request, ::prpc::AddMagnetUriRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::QueryMagnet(::grpc::ServerContext* context, const ::prpc::QueryMagnetReq* request, ::prpc::QueryMagnetRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DelMagnetCategory(::grpc::ServerContext* context, const ::prpc::DelMagnetCategoryReq* request, ::prpc::DelMagnetCategoryRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace prpc

