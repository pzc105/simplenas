// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace prpc {
        template <typename>
PROTOBUF_CONSTEXPR NewNodeAction::NewNodeAction(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.my_address_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.role_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct NewNodeActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewNodeActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewNodeActionDefaultTypeInternal() {}
  union {
    NewNodeAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewNodeActionDefaultTypeInternal _NewNodeAction_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR HashSlotAction::HashSlotAction(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.slots_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.step_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct HashSlotActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashSlotActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashSlotActionDefaultTypeInternal() {}
  union {
    HashSlotAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashSlotActionDefaultTypeInternal _HashSlotAction_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftTransaction::RaftTransaction(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_ref_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.new_node_)*/ nullptr,
      /*decltype(_impl_.hash_slot_)*/ nullptr,
      /*decltype(_impl_.epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.type_)*/ 0,
    } {}
struct RaftTransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftTransactionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftTransactionDefaultTypeInternal() {}
  union {
    RaftTransaction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftTransactionDefaultTypeInternal _RaftTransaction_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR NodeState::NodeState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.state_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct NodeStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeStateDefaultTypeInternal() {}
  union {
    NodeState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeStateDefaultTypeInternal _NodeState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftPing::RaftPing(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.node_states_)*/ {},
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.master_address_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.current_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.commited_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.vote_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.role_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftPingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftPingDefaultTypeInternal() {}
  union {
    RaftPing _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftPingDefaultTypeInternal _RaftPing_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftPong::RaftPong(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.role_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftPongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftPongDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftPongDefaultTypeInternal() {}
  union {
    RaftPong _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftPongDefaultTypeInternal _RaftPong_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftElection::RaftElection(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.vote_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftElectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftElectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftElectionDefaultTypeInternal() {}
  union {
    RaftElection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftElectionDefaultTypeInternal _RaftElection_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftElectionRet::RaftElectionRet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.got_vote_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.vote_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.success_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftElectionRetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftElectionRetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftElectionRetDefaultTypeInternal() {}
  union {
    RaftElectionRet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftElectionRetDefaultTypeInternal _RaftElectionRet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftSyncActions::RaftSyncActions(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.actions_)*/ {},
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.current_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_.commited_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftSyncActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftSyncActionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftSyncActionsDefaultTypeInternal() {}
  union {
    RaftSyncActions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftSyncActionsDefaultTypeInternal _RaftSyncActions_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftSyncActionsRet::RaftSyncActionsRet(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.current_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftSyncActionsRetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftSyncActionsRetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftSyncActionsRetDefaultTypeInternal() {}
  union {
    RaftSyncActionsRet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftSyncActionsRetDefaultTypeInternal _RaftSyncActionsRet_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftReqActions::RaftReqActions(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.my_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.commited_epoch_)*/ ::int64_t{0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RaftReqActionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftReqActionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftReqActionsDefaultTypeInternal() {}
  union {
    RaftReqActions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftReqActionsDefaultTypeInternal _RaftReqActions_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SlotMsg::SlotMsg(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.msg_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.slot_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SlotMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlotMsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlotMsgDefaultTypeInternal() {}
  union {
    SlotMsg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlotMsgDefaultTypeInternal _SlotMsg_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR RaftMsg::RaftMsg(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.action_)*/ nullptr,
      /*decltype(_impl_.sync_actions_)*/ nullptr,
      /*decltype(_impl_.sync_actions_ret_)*/ nullptr,
      /*decltype(_impl_.ping_)*/ nullptr,
      /*decltype(_impl_.pong_)*/ nullptr,
      /*decltype(_impl_.election_)*/ nullptr,
      /*decltype(_impl_.election_ret_)*/ nullptr,
      /*decltype(_impl_.req_actions_)*/ nullptr,
      /*decltype(_impl_.slot_msg_)*/ nullptr,
      /*decltype(_impl_.type_)*/ 0,
    } {}
struct RaftMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftMsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftMsgDefaultTypeInternal() {}
  union {
    RaftMsg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftMsgDefaultTypeInternal _RaftMsg_default_instance_;
}  // namespace prpc
static ::_pb::Metadata file_level_metadata_raft_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_raft_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_raft_2eproto = nullptr;
const ::uint32_t TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::NewNodeAction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::NewNodeAction, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::NewNodeAction, _impl_.my_address_),
    PROTOBUF_FIELD_OFFSET(::prpc::NewNodeAction, _impl_.role_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::HashSlotAction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::HashSlotAction, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::HashSlotAction, _impl_.step_),
    PROTOBUF_FIELD_OFFSET(::prpc::HashSlotAction, _impl_.slots_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.user_ref_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.new_node_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftTransaction, _impl_.hash_slot_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::NodeState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::NodeState, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::NodeState, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.current_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.commited_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.vote_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.node_states_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPing, _impl_.master_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPong, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPong, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftPong, _impl_.role_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElection, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElection, _impl_.vote_epoch_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElectionRet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElectionRet, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElectionRet, _impl_.got_vote_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElectionRet, _impl_.vote_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftElectionRet, _impl_.success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActions, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActions, _impl_.current_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActions, _impl_.commited_epoch_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActions, _impl_.actions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActionsRet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActionsRet, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftSyncActionsRet, _impl_.current_epoch_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::RaftReqActions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftReqActions, _impl_.my_id_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftReqActions, _impl_.commited_epoch_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::SlotMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::SlotMsg, _impl_.slot_),
    PROTOBUF_FIELD_OFFSET(::prpc::SlotMsg, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.action_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.sync_actions_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.sync_actions_ret_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.ping_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.pong_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.election_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.election_ret_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.req_actions_),
    PROTOBUF_FIELD_OFFSET(::prpc::RaftMsg, _impl_.slot_msg_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::prpc::NewNodeAction)},
        {11, -1, -1, sizeof(::prpc::HashSlotAction)},
        {22, 36, -1, sizeof(::prpc::RaftTransaction)},
        {42, -1, -1, sizeof(::prpc::NodeState)},
        {52, -1, -1, sizeof(::prpc::RaftPing)},
        {67, -1, -1, sizeof(::prpc::RaftPong)},
        {77, -1, -1, sizeof(::prpc::RaftElection)},
        {87, -1, -1, sizeof(::prpc::RaftElectionRet)},
        {99, -1, -1, sizeof(::prpc::RaftSyncActions)},
        {111, -1, -1, sizeof(::prpc::RaftSyncActionsRet)},
        {121, -1, -1, sizeof(::prpc::RaftReqActions)},
        {131, -1, -1, sizeof(::prpc::SlotMsg)},
        {141, 159, -1, sizeof(::prpc::RaftMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::prpc::_NewNodeAction_default_instance_._instance,
    &::prpc::_HashSlotAction_default_instance_._instance,
    &::prpc::_RaftTransaction_default_instance_._instance,
    &::prpc::_NodeState_default_instance_._instance,
    &::prpc::_RaftPing_default_instance_._instance,
    &::prpc::_RaftPong_default_instance_._instance,
    &::prpc::_RaftElection_default_instance_._instance,
    &::prpc::_RaftElectionRet_default_instance_._instance,
    &::prpc::_RaftSyncActions_default_instance_._instance,
    &::prpc::_RaftSyncActionsRet_default_instance_._instance,
    &::prpc::_RaftReqActions_default_instance_._instance,
    &::prpc::_SlotMsg_default_instance_._instance,
    &::prpc::_RaftMsg_default_instance_._instance,
};
const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nraft.proto\022\004prpc\"@\n\rNewNodeAction\022\r\n\005m"
    "y_id\030\001 \001(\t\022\022\n\nmy_address\030\002 \001(\t\022\014\n\004role\030\003"
    " \001(\005\"<\n\016HashSlotAction\022\r\n\005my_id\030\001 \001(\t\022\014\n"
    "\004step\030\002 \001(\005\022\r\n\005slots\030\003 \001(\014\"\361\001\n\017RaftTrans"
    "action\022\r\n\005my_id\030\001 \001(\t\022(\n\004type\030\002 \001(\0162\032.pr"
    "pc.RaftTransaction.Type\022\r\n\005epoch\030\003 \001(\003\022\020"
    "\n\010user_ref\030\004 \001(\t\022%\n\010new_node\030\005 \001(\0132\023.prp"
    "c.NewNodeAction\022\'\n\thash_slot\030\006 \001(\0132\024.prp"
    "c.HashSlotAction\"4\n\004Type\022\013\n\007Unknown\020\000\022\013\n"
    "\007NewNode\020\001\022\022\n\016HashSlotAction\020\002\")\n\tNodeSt"
    "ate\022\r\n\005my_id\030\001 \001(\t\022\r\n\005state\030\002 \001(\005\"\250\001\n\010Ra"
    "ftPing\022\r\n\005my_id\030\001 \001(\t\022\014\n\004role\030\002 \001(\005\022\025\n\rc"
    "urrent_epoch\030\003 \001(\003\022\026\n\016commited_epoch\030\004 \001"
    "(\003\022\022\n\nvote_epoch\030\005 \001(\003\022$\n\013node_states\030\006 "
    "\003(\0132\017.prpc.NodeState\022\026\n\016master_address\030\007"
    " \001(\t\"\'\n\010RaftPong\022\r\n\005my_id\030\001 \001(\t\022\014\n\004role\030"
    "\002 \001(\005\"1\n\014RaftElection\022\r\n\005my_id\030\001 \001(\t\022\022\n\n"
    "vote_epoch\030\002 \001(\003\"Z\n\017RaftElectionRet\022\r\n\005m"
    "y_id\030\001 \001(\t\022\023\n\013got_vote_id\030\002 \001(\t\022\022\n\nvote_"
    "epoch\030\003 \001(\003\022\017\n\007success\030\004 \001(\010\"w\n\017RaftSync"
    "Actions\022\r\n\005my_id\030\001 \001(\t\022\025\n\rcurrent_epoch\030"
    "\002 \001(\003\022\026\n\016commited_epoch\030\003 \001(\003\022&\n\007actions"
    "\030\004 \003(\0132\025.prpc.RaftTransaction\":\n\022RaftSyn"
    "cActionsRet\022\r\n\005my_id\030\001 \001(\t\022\025\n\rcurrent_ep"
    "och\030\002 \001(\003\"7\n\016RaftReqActions\022\r\n\005my_id\030\001 \001"
    "(\t\022\026\n\016commited_epoch\030\002 \001(\003\"$\n\007SlotMsg\022\014\n"
    "\004slot\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\"\250\004\n\007RaftMsg\022 \n\004"
    "type\030\001 \001(\0162\022.prpc.RaftMsg.Type\022%\n\006action"
    "\030\002 \001(\0132\025.prpc.RaftTransaction\022+\n\014sync_ac"
    "tions\030\003 \001(\0132\025.prpc.RaftSyncActions\0222\n\020sy"
    "nc_actions_ret\030\004 \001(\0132\030.prpc.RaftSyncActi"
    "onsRet\022\034\n\004ping\030\005 \001(\0132\016.prpc.RaftPing\022\034\n\004"
    "pong\030\006 \001(\0132\016.prpc.RaftPong\022$\n\010election\030\007"
    " \001(\0132\022.prpc.RaftElection\022+\n\014election_ret"
    "\030\010 \001(\0132\025.prpc.RaftElectionRet\022)\n\013req_act"
    "ions\030\t \001(\0132\024.prpc.RaftReqActions\022\037\n\010slot"
    "_msg\030\n \001(\0132\r.prpc.SlotMsg\"\227\001\n\004Type\022\013\n\007Un"
    "known\020\000\022\n\n\006Action\020\001\022\016\n\nSyncAction\020\002\022\021\n\rS"
    "yncActionRet\020\003\022\010\n\004Ping\020\004\022\010\n\004Pong\020\005\022\014\n\010El"
    "ection\020\006\022\017\n\013ElectionRet\020\007\022\016\n\nReqActions\020"
    "\010\022\020\n\014SendMsg2Slot\020\tB\010Z\006./prpcb\006proto3"
};
static ::absl::once_flag descriptor_table_raft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2eproto = {
    false,
    false,
    1637,
    descriptor_table_protodef_raft_2eproto,
    "raft.proto",
    &descriptor_table_raft_2eproto_once,
    nullptr,
    0,
    13,
    schemas,
    file_default_instances,
    TableStruct_raft_2eproto::offsets,
    file_level_metadata_raft_2eproto,
    file_level_enum_descriptors_raft_2eproto,
    file_level_service_descriptors_raft_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2eproto_getter() {
  return &descriptor_table_raft_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2eproto(&descriptor_table_raft_2eproto);
namespace prpc {
const ::google::protobuf::EnumDescriptor* RaftTransaction_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[0];
}
bool RaftTransaction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RaftTransaction_Type RaftTransaction::Unknown;
constexpr RaftTransaction_Type RaftTransaction::NewNode;
constexpr RaftTransaction_Type RaftTransaction::HashSlotAction;
constexpr RaftTransaction_Type RaftTransaction::Type_MIN;
constexpr RaftTransaction_Type RaftTransaction::Type_MAX;
constexpr int RaftTransaction::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RaftMsg_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_enum_descriptors_raft_2eproto[1];
}
bool RaftMsg_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RaftMsg_Type RaftMsg::Unknown;
constexpr RaftMsg_Type RaftMsg::Action;
constexpr RaftMsg_Type RaftMsg::SyncAction;
constexpr RaftMsg_Type RaftMsg::SyncActionRet;
constexpr RaftMsg_Type RaftMsg::Ping;
constexpr RaftMsg_Type RaftMsg::Pong;
constexpr RaftMsg_Type RaftMsg::Election;
constexpr RaftMsg_Type RaftMsg::ElectionRet;
constexpr RaftMsg_Type RaftMsg::ReqActions;
constexpr RaftMsg_Type RaftMsg::SendMsg2Slot;
constexpr RaftMsg_Type RaftMsg::Type_MIN;
constexpr RaftMsg_Type RaftMsg::Type_MAX;
constexpr int RaftMsg::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class NewNodeAction::_Internal {
 public:
};

NewNodeAction::NewNodeAction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.NewNodeAction)
}
NewNodeAction::NewNodeAction(const NewNodeAction& from) : ::google::protobuf::Message() {
  NewNodeAction* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.my_address_){},
      decltype(_impl_.role_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _impl_.my_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_address().empty()) {
    _this->_impl_.my_address_.Set(from._internal_my_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.role_ = from._impl_.role_;

  // @@protoc_insertion_point(copy_constructor:prpc.NewNodeAction)
}
inline void NewNodeAction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.my_address_){},
      decltype(_impl_.role_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.my_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
NewNodeAction::~NewNodeAction() {
  // @@protoc_insertion_point(destructor:prpc.NewNodeAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewNodeAction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
  _impl_.my_address_.Destroy();
}
void NewNodeAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NewNodeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.NewNodeAction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.my_address_.ClearToEmpty();
  _impl_.role_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NewNodeAction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 42, 2> NewNodeAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NewNodeAction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.my_id_)}},
    // string my_address = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.my_address_)}},
    // int32 role = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewNodeAction, _impl_.role_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.role_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string my_address = 2;
    {PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.my_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 role = 3;
    {PROTOBUF_FIELD_OFFSET(NewNodeAction, _impl_.role_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\5\12\0\0\0\0\0"
    "prpc.NewNodeAction"
    "my_id"
    "my_address"
  }},
};

::uint8_t* NewNodeAction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.NewNodeAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.NewNodeAction.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string my_address = 2;
  if (!this->_internal_my_address().empty()) {
    const std::string& _s = this->_internal_my_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.NewNodeAction.my_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 role = 3;
  if (this->_internal_role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.NewNodeAction)
  return target;
}

::size_t NewNodeAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.NewNodeAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // string my_address = 2;
  if (!this->_internal_my_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_address());
  }

  // int32 role = 3;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NewNodeAction::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NewNodeAction::MergeImpl
};
const ::google::protobuf::Message::ClassData*NewNodeAction::GetClassData() const { return &_class_data_; }


void NewNodeAction::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NewNodeAction*>(&to_msg);
  auto& from = static_cast<const NewNodeAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.NewNodeAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (!from._internal_my_address().empty()) {
    _this->_internal_set_my_address(from._internal_my_address());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewNodeAction::CopyFrom(const NewNodeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.NewNodeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NewNodeAction::IsInitialized() const {
  return true;
}

void NewNodeAction::InternalSwap(NewNodeAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_address_, lhs_arena,
                                       &other->_impl_.my_address_, rhs_arena);
        swap(_impl_.role_, other->_impl_.role_);
}

::google::protobuf::Metadata NewNodeAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[0]);
}
// ===================================================================

class HashSlotAction::_Internal {
 public:
};

HashSlotAction::HashSlotAction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.HashSlotAction)
}
HashSlotAction::HashSlotAction(const HashSlotAction& from) : ::google::protobuf::Message() {
  HashSlotAction* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.slots_){},
      decltype(_impl_.step_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _impl_.slots_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slots_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slots().empty()) {
    _this->_impl_.slots_.Set(from._internal_slots(), _this->GetArenaForAllocation());
  }
  _this->_impl_.step_ = from._impl_.step_;

  // @@protoc_insertion_point(copy_constructor:prpc.HashSlotAction)
}
inline void HashSlotAction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.slots_){},
      decltype(_impl_.step_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slots_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slots_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
HashSlotAction::~HashSlotAction() {
  // @@protoc_insertion_point(destructor:prpc.HashSlotAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HashSlotAction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
  _impl_.slots_.Destroy();
}
void HashSlotAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void HashSlotAction::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.HashSlotAction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.slots_.ClearToEmpty();
  _impl_.step_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HashSlotAction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 33, 2> HashSlotAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HashSlotAction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.my_id_)}},
    // int32 step = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HashSlotAction, _impl_.step_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.step_)}},
    // bytes slots = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.slots_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 step = 2;
    {PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.step_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes slots = 3;
    {PROTOBUF_FIELD_OFFSET(HashSlotAction, _impl_.slots_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\5\0\0\0\0\0\0"
    "prpc.HashSlotAction"
    "my_id"
  }},
};

::uint8_t* HashSlotAction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.HashSlotAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.HashSlotAction.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_step(), target);
  }

  // bytes slots = 3;
  if (!this->_internal_slots().empty()) {
    const std::string& _s = this->_internal_slots();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.HashSlotAction)
  return target;
}

::size_t HashSlotAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.HashSlotAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // bytes slots = 3;
  if (!this->_internal_slots().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_slots());
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HashSlotAction::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    HashSlotAction::MergeImpl
};
const ::google::protobuf::Message::ClassData*HashSlotAction::GetClassData() const { return &_class_data_; }


void HashSlotAction::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HashSlotAction*>(&to_msg);
  auto& from = static_cast<const HashSlotAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.HashSlotAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (!from._internal_slots().empty()) {
    _this->_internal_set_slots(from._internal_slots());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HashSlotAction::CopyFrom(const HashSlotAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.HashSlotAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HashSlotAction::IsInitialized() const {
  return true;
}

void HashSlotAction::InternalSwap(HashSlotAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slots_, lhs_arena,
                                       &other->_impl_.slots_, rhs_arena);
        swap(_impl_.step_, other->_impl_.step_);
}

::google::protobuf::Metadata HashSlotAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[1]);
}
// ===================================================================

class RaftTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<RaftTransaction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_._has_bits_);
  static const ::prpc::NewNodeAction& new_node(const RaftTransaction* msg);
  static void set_has_new_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prpc::HashSlotAction& hash_slot(const RaftTransaction* msg);
  static void set_has_hash_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::prpc::NewNodeAction& RaftTransaction::_Internal::new_node(const RaftTransaction* msg) {
  return *msg->_impl_.new_node_;
}
const ::prpc::HashSlotAction& RaftTransaction::_Internal::hash_slot(const RaftTransaction* msg) {
  return *msg->_impl_.hash_slot_;
}
RaftTransaction::RaftTransaction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftTransaction)
}
RaftTransaction::RaftTransaction(const RaftTransaction& from) : ::google::protobuf::Message() {
  RaftTransaction* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.my_id_){},
      decltype(_impl_.user_ref_){},
      decltype(_impl_.new_node_){nullptr},
      decltype(_impl_.hash_slot_){nullptr},
      decltype(_impl_.epoch_){},
      decltype(_impl_.type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_ref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_ref().empty()) {
    _this->_impl_.user_ref_.Set(from._internal_user_ref(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.new_node_ = new ::prpc::NewNodeAction(*from._impl_.new_node_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.hash_slot_ = new ::prpc::HashSlotAction(*from._impl_.hash_slot_);
  }
  ::memcpy(&_impl_.epoch_, &from._impl_.epoch_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.type_));

  // @@protoc_insertion_point(copy_constructor:prpc.RaftTransaction)
}
inline void RaftTransaction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.my_id_){},
      decltype(_impl_.user_ref_){},
      decltype(_impl_.new_node_){nullptr},
      decltype(_impl_.hash_slot_){nullptr},
      decltype(_impl_.epoch_){::int64_t{0}},
      decltype(_impl_.type_){0},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_ref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftTransaction::~RaftTransaction() {
  // @@protoc_insertion_point(destructor:prpc.RaftTransaction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftTransaction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
  _impl_.user_ref_.Destroy();
  if (this != internal_default_instance()) delete _impl_.new_node_;
  if (this != internal_default_instance()) delete _impl_.hash_slot_;
}
void RaftTransaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftTransaction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.user_ref_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.new_node_ != nullptr);
      _impl_.new_node_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.hash_slot_ != nullptr);
      _impl_.hash_slot_->Clear();
    }
  }
  ::memset(&_impl_.epoch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.epoch_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftTransaction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 42, 2> RaftTransaction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RaftTransaction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.my_id_)}},
    // .prpc.RaftTransaction.Type type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RaftTransaction, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.type_)}},
    // int64 epoch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftTransaction, _impl_.epoch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.epoch_)}},
    // string user_ref = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.user_ref_)}},
    // .prpc.NewNodeAction new_node = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.new_node_)}},
    // .prpc.HashSlotAction hash_slot = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.hash_slot_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.my_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .prpc.RaftTransaction.Type type = 2;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 epoch = 3;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.epoch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string user_ref = 4;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.user_ref_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .prpc.NewNodeAction new_node = 5;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.new_node_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.HashSlotAction hash_slot = 6;
    {PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.hash_slot_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::NewNodeAction>()},
    {::_pbi::TcParser::GetTable<::prpc::HashSlotAction>()},
  }}, {{
    "\24\5\0\0\10\0\0\0"
    "prpc.RaftTransaction"
    "my_id"
    "user_ref"
  }},
};

::uint8_t* RaftTransaction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftTransaction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftTransaction.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .prpc.RaftTransaction.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_type(), target);
  }

  // int64 epoch = 3;
  if (this->_internal_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_epoch(), target);
  }

  // string user_ref = 4;
  if (!this->_internal_user_ref().empty()) {
    const std::string& _s = this->_internal_user_ref();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftTransaction.user_ref");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .prpc.NewNodeAction new_node = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_node(this),
        _Internal::new_node(this).GetCachedSize(), target, stream);
  }

  // .prpc.HashSlotAction hash_slot = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::hash_slot(this),
        _Internal::hash_slot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftTransaction)
  return target;
}

::size_t RaftTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftTransaction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // string user_ref = 4;
  if (!this->_internal_user_ref().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_ref());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .prpc.NewNodeAction new_node = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.new_node_);
    }

    // .prpc.HashSlotAction hash_slot = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.hash_slot_);
    }

  }
  // int64 epoch = 3;
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_epoch());
  }

  // .prpc.RaftTransaction.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftTransaction::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftTransaction::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftTransaction::GetClassData() const { return &_class_data_; }


void RaftTransaction::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftTransaction*>(&to_msg);
  auto& from = static_cast<const RaftTransaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftTransaction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (!from._internal_user_ref().empty()) {
    _this->_internal_set_user_ref(from._internal_user_ref());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_new_node()->::prpc::NewNodeAction::MergeFrom(
          from._internal_new_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hash_slot()->::prpc::HashSlotAction::MergeFrom(
          from._internal_hash_slot());
    }
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftTransaction::CopyFrom(const RaftTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftTransaction::IsInitialized() const {
  return true;
}

void RaftTransaction::InternalSwap(RaftTransaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_ref_, lhs_arena,
                                       &other->_impl_.user_ref_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.type_)
      + sizeof(RaftTransaction::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RaftTransaction, _impl_.new_node_)>(
          reinterpret_cast<char*>(&_impl_.new_node_),
          reinterpret_cast<char*>(&other->_impl_.new_node_));
}

::google::protobuf::Metadata RaftTransaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[2]);
}
// ===================================================================

class NodeState::_Internal {
 public:
};

NodeState::NodeState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.NodeState)
}
NodeState::NodeState(const NodeState& from) : ::google::protobuf::Message() {
  NodeState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.state_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;

  // @@protoc_insertion_point(copy_constructor:prpc.NodeState)
}
inline void NodeState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.state_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
NodeState::~NodeState() {
  // @@protoc_insertion_point(destructor:prpc.NodeState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NodeState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
}
void NodeState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NodeState::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.NodeState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NodeState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 28, 2> NodeState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NodeState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NodeState, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NodeState, _impl_.state_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NodeState, _impl_.my_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(NodeState, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 state = 2;
    {PROTOBUF_FIELD_OFFSET(NodeState, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\16\5\0\0\0\0\0\0"
    "prpc.NodeState"
    "my_id"
  }},
};

::uint8_t* NodeState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.NodeState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.NodeState.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.NodeState)
  return target;
}

::size_t NodeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.NodeState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NodeState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NodeState::MergeImpl
};
const ::google::protobuf::Message::ClassData*NodeState::GetClassData() const { return &_class_data_; }


void NodeState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NodeState*>(&to_msg);
  auto& from = static_cast<const NodeState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.NodeState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NodeState::CopyFrom(const NodeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.NodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NodeState::IsInitialized() const {
  return true;
}

void NodeState::InternalSwap(NodeState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
        swap(_impl_.state_, other->_impl_.state_);
}

::google::protobuf::Metadata NodeState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[3]);
}
// ===================================================================

class RaftPing::_Internal {
 public:
};

RaftPing::RaftPing(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftPing)
}
RaftPing::RaftPing(const RaftPing& from) : ::google::protobuf::Message() {
  RaftPing* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_states_){from._impl_.node_states_},
      decltype(_impl_.my_id_){},
      decltype(_impl_.master_address_){},
      decltype(_impl_.current_epoch_){},
      decltype(_impl_.commited_epoch_){},
      decltype(_impl_.vote_epoch_){},
      decltype(_impl_.role_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _impl_.master_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.master_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master_address().empty()) {
    _this->_impl_.master_address_.Set(from._internal_master_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.current_epoch_, &from._impl_.current_epoch_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.current_epoch_)) + sizeof(_impl_.role_));

  // @@protoc_insertion_point(copy_constructor:prpc.RaftPing)
}
inline void RaftPing::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.node_states_){arena},
      decltype(_impl_.my_id_){},
      decltype(_impl_.master_address_){},
      decltype(_impl_.current_epoch_){::int64_t{0}},
      decltype(_impl_.commited_epoch_){::int64_t{0}},
      decltype(_impl_.vote_epoch_){::int64_t{0}},
      decltype(_impl_.role_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.master_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.master_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftPing::~RaftPing() {
  // @@protoc_insertion_point(destructor:prpc.RaftPing)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftPing::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_states_.~RepeatedPtrField();
  _impl_.my_id_.Destroy();
  _impl_.master_address_.Destroy();
}
void RaftPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftPing::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftPing)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_node_states()->Clear();
  _impl_.my_id_.ClearToEmpty();
  _impl_.master_address_.ClearToEmpty();
  ::memset(&_impl_.current_epoch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.role_) -
      reinterpret_cast<char*>(&_impl_.current_epoch_)) + sizeof(_impl_.role_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftPing::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 41, 2> RaftPing::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RaftPing_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.my_id_)}},
    // int32 role = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RaftPing, _impl_.role_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.role_)}},
    // int64 current_epoch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftPing, _impl_.current_epoch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.current_epoch_)}},
    // int64 commited_epoch = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftPing, _impl_.commited_epoch_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.commited_epoch_)}},
    // int64 vote_epoch = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftPing, _impl_.vote_epoch_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.vote_epoch_)}},
    // repeated .prpc.NodeState node_states = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.node_states_)}},
    // string master_address = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.master_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 role = 2;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.role_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 current_epoch = 3;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.current_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 commited_epoch = 4;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.commited_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 vote_epoch = 5;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.vote_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .prpc.NodeState node_states = 6;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.node_states_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string master_address = 7;
    {PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.master_address_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::NodeState>()},
  }}, {{
    "\15\5\0\0\0\0\0\16"
    "prpc.RaftPing"
    "my_id"
    "master_address"
  }},
};

::uint8_t* RaftPing::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftPing)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftPing.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 role = 2;
  if (this->_internal_role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_role(), target);
  }

  // int64 current_epoch = 3;
  if (this->_internal_current_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_current_epoch(), target);
  }

  // int64 commited_epoch = 4;
  if (this->_internal_commited_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_commited_epoch(), target);
  }

  // int64 vote_epoch = 5;
  if (this->_internal_vote_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_vote_epoch(), target);
  }

  // repeated .prpc.NodeState node_states = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_states().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string master_address = 7;
  if (!this->_internal_master_address().empty()) {
    const std::string& _s = this->_internal_master_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftPing.master_address");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftPing)
  return target;
}

::size_t RaftPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftPing)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.NodeState node_states = 6;
  total_size += 1UL * this->_internal_node_states_size();
  for (const auto& msg : this->_internal_node_states()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // string master_address = 7;
  if (!this->_internal_master_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_master_address());
  }

  // int64 current_epoch = 3;
  if (this->_internal_current_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_current_epoch());
  }

  // int64 commited_epoch = 4;
  if (this->_internal_commited_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_commited_epoch());
  }

  // int64 vote_epoch = 5;
  if (this->_internal_vote_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vote_epoch());
  }

  // int32 role = 2;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftPing::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftPing::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftPing::GetClassData() const { return &_class_data_; }


void RaftPing::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftPing*>(&to_msg);
  auto& from = static_cast<const RaftPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftPing)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_node_states()->MergeFrom(from._internal_node_states());
  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (!from._internal_master_address().empty()) {
    _this->_internal_set_master_address(from._internal_master_address());
  }
  if (from._internal_current_epoch() != 0) {
    _this->_internal_set_current_epoch(from._internal_current_epoch());
  }
  if (from._internal_commited_epoch() != 0) {
    _this->_internal_set_commited_epoch(from._internal_commited_epoch());
  }
  if (from._internal_vote_epoch() != 0) {
    _this->_internal_set_vote_epoch(from._internal_vote_epoch());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftPing::CopyFrom(const RaftPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftPing::IsInitialized() const {
  return true;
}

void RaftPing::InternalSwap(RaftPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_states_.InternalSwap(&other->_impl_.node_states_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.master_address_, lhs_arena,
                                       &other->_impl_.master_address_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.role_)
      + sizeof(RaftPing::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(RaftPing, _impl_.current_epoch_)>(
          reinterpret_cast<char*>(&_impl_.current_epoch_),
          reinterpret_cast<char*>(&other->_impl_.current_epoch_));
}

::google::protobuf::Metadata RaftPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[4]);
}
// ===================================================================

class RaftPong::_Internal {
 public:
};

RaftPong::RaftPong(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftPong)
}
RaftPong::RaftPong(const RaftPong& from) : ::google::protobuf::Message() {
  RaftPong* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.role_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.role_ = from._impl_.role_;

  // @@protoc_insertion_point(copy_constructor:prpc.RaftPong)
}
inline void RaftPong::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.role_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftPong::~RaftPong() {
  // @@protoc_insertion_point(destructor:prpc.RaftPong)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftPong::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
}
void RaftPong::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftPong::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftPong)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.role_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftPong::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 27, 2> RaftPong::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RaftPong_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 role = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RaftPong, _impl_.role_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPong, _impl_.role_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftPong, _impl_.my_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftPong, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 role = 2;
    {PROTOBUF_FIELD_OFFSET(RaftPong, _impl_.role_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\15\5\0\0\0\0\0\0"
    "prpc.RaftPong"
    "my_id"
  }},
};

::uint8_t* RaftPong::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftPong)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftPong.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 role = 2;
  if (this->_internal_role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftPong)
  return target;
}

::size_t RaftPong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftPong)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int32 role = 2;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftPong::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftPong::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftPong::GetClassData() const { return &_class_data_; }


void RaftPong::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftPong*>(&to_msg);
  auto& from = static_cast<const RaftPong&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftPong)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftPong::CopyFrom(const RaftPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftPong::IsInitialized() const {
  return true;
}

void RaftPong::InternalSwap(RaftPong* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
        swap(_impl_.role_, other->_impl_.role_);
}

::google::protobuf::Metadata RaftPong::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[5]);
}
// ===================================================================

class RaftElection::_Internal {
 public:
};

RaftElection::RaftElection(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftElection)
}
RaftElection::RaftElection(const RaftElection& from) : ::google::protobuf::Message() {
  RaftElection* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.vote_epoch_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.vote_epoch_ = from._impl_.vote_epoch_;

  // @@protoc_insertion_point(copy_constructor:prpc.RaftElection)
}
inline void RaftElection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.vote_epoch_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftElection::~RaftElection() {
  // @@protoc_insertion_point(destructor:prpc.RaftElection)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftElection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
}
void RaftElection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftElection::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftElection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.vote_epoch_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftElection::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 31, 2> RaftElection::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RaftElection_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 vote_epoch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftElection, _impl_.vote_epoch_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElection, _impl_.vote_epoch_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElection, _impl_.my_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftElection, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 vote_epoch = 2;
    {PROTOBUF_FIELD_OFFSET(RaftElection, _impl_.vote_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\21\5\0\0\0\0\0\0"
    "prpc.RaftElection"
    "my_id"
  }},
};

::uint8_t* RaftElection::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftElection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftElection.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 vote_epoch = 2;
  if (this->_internal_vote_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_vote_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftElection)
  return target;
}

::size_t RaftElection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftElection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int64 vote_epoch = 2;
  if (this->_internal_vote_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vote_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftElection::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftElection::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftElection::GetClassData() const { return &_class_data_; }


void RaftElection::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftElection*>(&to_msg);
  auto& from = static_cast<const RaftElection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftElection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_vote_epoch() != 0) {
    _this->_internal_set_vote_epoch(from._internal_vote_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftElection::CopyFrom(const RaftElection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftElection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftElection::IsInitialized() const {
  return true;
}

void RaftElection::InternalSwap(RaftElection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
        swap(_impl_.vote_epoch_, other->_impl_.vote_epoch_);
}

::google::protobuf::Metadata RaftElection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[6]);
}
// ===================================================================

class RaftElectionRet::_Internal {
 public:
};

RaftElectionRet::RaftElectionRet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftElectionRet)
}
RaftElectionRet::RaftElectionRet(const RaftElectionRet& from) : ::google::protobuf::Message() {
  RaftElectionRet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.got_vote_id_){},
      decltype(_impl_.vote_epoch_){},
      decltype(_impl_.success_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _impl_.got_vote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.got_vote_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_got_vote_id().empty()) {
    _this->_impl_.got_vote_id_.Set(from._internal_got_vote_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vote_epoch_, &from._impl_.vote_epoch_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.vote_epoch_)) + sizeof(_impl_.success_));

  // @@protoc_insertion_point(copy_constructor:prpc.RaftElectionRet)
}
inline void RaftElectionRet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.got_vote_id_){},
      decltype(_impl_.vote_epoch_){::int64_t{0}},
      decltype(_impl_.success_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.got_vote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.got_vote_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftElectionRet::~RaftElectionRet() {
  // @@protoc_insertion_point(destructor:prpc.RaftElectionRet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftElectionRet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
  _impl_.got_vote_id_.Destroy();
}
void RaftElectionRet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftElectionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftElectionRet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.got_vote_id_.ClearToEmpty();
  ::memset(&_impl_.vote_epoch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.vote_epoch_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftElectionRet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 45, 2> RaftElectionRet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RaftElectionRet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool success = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RaftElectionRet, _impl_.success_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.success_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.my_id_)}},
    // string got_vote_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.got_vote_id_)}},
    // int64 vote_epoch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftElectionRet, _impl_.vote_epoch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.vote_epoch_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string got_vote_id = 2;
    {PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.got_vote_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 vote_epoch = 3;
    {PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.vote_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool success = 4;
    {PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\24\5\13\0\0\0\0\0"
    "prpc.RaftElectionRet"
    "my_id"
    "got_vote_id"
  }},
};

::uint8_t* RaftElectionRet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftElectionRet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftElectionRet.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string got_vote_id = 2;
  if (!this->_internal_got_vote_id().empty()) {
    const std::string& _s = this->_internal_got_vote_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftElectionRet.got_vote_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 vote_epoch = 3;
  if (this->_internal_vote_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_vote_epoch(), target);
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftElectionRet)
  return target;
}

::size_t RaftElectionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftElectionRet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // string got_vote_id = 2;
  if (!this->_internal_got_vote_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_got_vote_id());
  }

  // int64 vote_epoch = 3;
  if (this->_internal_vote_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vote_epoch());
  }

  // bool success = 4;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftElectionRet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftElectionRet::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftElectionRet::GetClassData() const { return &_class_data_; }


void RaftElectionRet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftElectionRet*>(&to_msg);
  auto& from = static_cast<const RaftElectionRet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftElectionRet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (!from._internal_got_vote_id().empty()) {
    _this->_internal_set_got_vote_id(from._internal_got_vote_id());
  }
  if (from._internal_vote_epoch() != 0) {
    _this->_internal_set_vote_epoch(from._internal_vote_epoch());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftElectionRet::CopyFrom(const RaftElectionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftElectionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftElectionRet::IsInitialized() const {
  return true;
}

void RaftElectionRet::InternalSwap(RaftElectionRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.got_vote_id_, lhs_arena,
                                       &other->_impl_.got_vote_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.success_)
      + sizeof(RaftElectionRet::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RaftElectionRet, _impl_.vote_epoch_)>(
          reinterpret_cast<char*>(&_impl_.vote_epoch_),
          reinterpret_cast<char*>(&other->_impl_.vote_epoch_));
}

::google::protobuf::Metadata RaftElectionRet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[7]);
}
// ===================================================================

class RaftSyncActions::_Internal {
 public:
};

RaftSyncActions::RaftSyncActions(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftSyncActions)
}
RaftSyncActions::RaftSyncActions(const RaftSyncActions& from) : ::google::protobuf::Message() {
  RaftSyncActions* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){from._impl_.actions_},
      decltype(_impl_.my_id_){},
      decltype(_impl_.current_epoch_){},
      decltype(_impl_.commited_epoch_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.current_epoch_, &from._impl_.current_epoch_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.commited_epoch_) -
    reinterpret_cast<char*>(&_impl_.current_epoch_)) + sizeof(_impl_.commited_epoch_));

  // @@protoc_insertion_point(copy_constructor:prpc.RaftSyncActions)
}
inline void RaftSyncActions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){arena},
      decltype(_impl_.my_id_){},
      decltype(_impl_.current_epoch_){::int64_t{0}},
      decltype(_impl_.commited_epoch_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftSyncActions::~RaftSyncActions() {
  // @@protoc_insertion_point(destructor:prpc.RaftSyncActions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftSyncActions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actions_.~RepeatedPtrField();
  _impl_.my_id_.Destroy();
}
void RaftSyncActions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftSyncActions::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftSyncActions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_actions()->Clear();
  _impl_.my_id_.ClearToEmpty();
  ::memset(&_impl_.current_epoch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.commited_epoch_) -
      reinterpret_cast<char*>(&_impl_.current_epoch_)) + sizeof(_impl_.commited_epoch_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftSyncActions::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 34, 2> RaftSyncActions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RaftSyncActions_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .prpc.RaftTransaction actions = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.actions_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.my_id_)}},
    // int64 current_epoch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftSyncActions, _impl_.current_epoch_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.current_epoch_)}},
    // int64 commited_epoch = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftSyncActions, _impl_.commited_epoch_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.commited_epoch_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 current_epoch = 2;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.current_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 commited_epoch = 3;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.commited_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .prpc.RaftTransaction actions = 4;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::RaftTransaction>()},
  }}, {{
    "\24\5\0\0\0\0\0\0"
    "prpc.RaftSyncActions"
    "my_id"
  }},
};

::uint8_t* RaftSyncActions::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftSyncActions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftSyncActions.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_current_epoch(), target);
  }

  // int64 commited_epoch = 3;
  if (this->_internal_commited_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_commited_epoch(), target);
  }

  // repeated .prpc.RaftTransaction actions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftSyncActions)
  return target;
}

::size_t RaftSyncActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftSyncActions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.RaftTransaction actions = 4;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->_internal_actions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int64 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_current_epoch());
  }

  // int64 commited_epoch = 3;
  if (this->_internal_commited_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_commited_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftSyncActions::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftSyncActions::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftSyncActions::GetClassData() const { return &_class_data_; }


void RaftSyncActions::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftSyncActions*>(&to_msg);
  auto& from = static_cast<const RaftSyncActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftSyncActions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(from._internal_actions());
  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_current_epoch() != 0) {
    _this->_internal_set_current_epoch(from._internal_current_epoch());
  }
  if (from._internal_commited_epoch() != 0) {
    _this->_internal_set_commited_epoch(from._internal_commited_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftSyncActions::CopyFrom(const RaftSyncActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftSyncActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftSyncActions::IsInitialized() const {
  return true;
}

void RaftSyncActions::InternalSwap(RaftSyncActions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.commited_epoch_)
      + sizeof(RaftSyncActions::_impl_.commited_epoch_)
      - PROTOBUF_FIELD_OFFSET(RaftSyncActions, _impl_.current_epoch_)>(
          reinterpret_cast<char*>(&_impl_.current_epoch_),
          reinterpret_cast<char*>(&other->_impl_.current_epoch_));
}

::google::protobuf::Metadata RaftSyncActions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[8]);
}
// ===================================================================

class RaftSyncActionsRet::_Internal {
 public:
};

RaftSyncActionsRet::RaftSyncActionsRet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftSyncActionsRet)
}
RaftSyncActionsRet::RaftSyncActionsRet(const RaftSyncActionsRet& from) : ::google::protobuf::Message() {
  RaftSyncActionsRet* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.current_epoch_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.current_epoch_ = from._impl_.current_epoch_;

  // @@protoc_insertion_point(copy_constructor:prpc.RaftSyncActionsRet)
}
inline void RaftSyncActionsRet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.current_epoch_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftSyncActionsRet::~RaftSyncActionsRet() {
  // @@protoc_insertion_point(destructor:prpc.RaftSyncActionsRet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftSyncActionsRet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
}
void RaftSyncActionsRet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftSyncActionsRet::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftSyncActionsRet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.current_epoch_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftSyncActionsRet::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> RaftSyncActionsRet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RaftSyncActionsRet_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 current_epoch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftSyncActionsRet, _impl_.current_epoch_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActionsRet, _impl_.current_epoch_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftSyncActionsRet, _impl_.my_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActionsRet, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 current_epoch = 2;
    {PROTOBUF_FIELD_OFFSET(RaftSyncActionsRet, _impl_.current_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\27\5\0\0\0\0\0\0"
    "prpc.RaftSyncActionsRet"
    "my_id"
  }},
};

::uint8_t* RaftSyncActionsRet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftSyncActionsRet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftSyncActionsRet.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_current_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftSyncActionsRet)
  return target;
}

::size_t RaftSyncActionsRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftSyncActionsRet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int64 current_epoch = 2;
  if (this->_internal_current_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_current_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftSyncActionsRet::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftSyncActionsRet::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftSyncActionsRet::GetClassData() const { return &_class_data_; }


void RaftSyncActionsRet::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftSyncActionsRet*>(&to_msg);
  auto& from = static_cast<const RaftSyncActionsRet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftSyncActionsRet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_current_epoch() != 0) {
    _this->_internal_set_current_epoch(from._internal_current_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftSyncActionsRet::CopyFrom(const RaftSyncActionsRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftSyncActionsRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftSyncActionsRet::IsInitialized() const {
  return true;
}

void RaftSyncActionsRet::InternalSwap(RaftSyncActionsRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
        swap(_impl_.current_epoch_, other->_impl_.current_epoch_);
}

::google::protobuf::Metadata RaftSyncActionsRet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[9]);
}
// ===================================================================

class RaftReqActions::_Internal {
 public:
};

RaftReqActions::RaftReqActions(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftReqActions)
}
RaftReqActions::RaftReqActions(const RaftReqActions& from) : ::google::protobuf::Message() {
  RaftReqActions* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.commited_epoch_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_id().empty()) {
    _this->_impl_.my_id_.Set(from._internal_my_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.commited_epoch_ = from._impl_.commited_epoch_;

  // @@protoc_insertion_point(copy_constructor:prpc.RaftReqActions)
}
inline void RaftReqActions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.my_id_){},
      decltype(_impl_.commited_epoch_){::int64_t{0}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.my_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.my_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
RaftReqActions::~RaftReqActions() {
  // @@protoc_insertion_point(destructor:prpc.RaftReqActions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftReqActions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_id_.Destroy();
}
void RaftReqActions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftReqActions::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftReqActions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_id_.ClearToEmpty();
  _impl_.commited_epoch_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftReqActions::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 33, 2> RaftReqActions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RaftReqActions_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 commited_epoch = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RaftReqActions, _impl_.commited_epoch_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RaftReqActions, _impl_.commited_epoch_)}},
    // string my_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RaftReqActions, _impl_.my_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string my_id = 1;
    {PROTOBUF_FIELD_OFFSET(RaftReqActions, _impl_.my_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 commited_epoch = 2;
    {PROTOBUF_FIELD_OFFSET(RaftReqActions, _impl_.commited_epoch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\23\5\0\0\0\0\0\0"
    "prpc.RaftReqActions"
    "my_id"
  }},
};

::uint8_t* RaftReqActions::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftReqActions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    const std::string& _s = this->_internal_my_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.RaftReqActions.my_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 commited_epoch = 2;
  if (this->_internal_commited_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_commited_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftReqActions)
  return target;
}

::size_t RaftReqActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftReqActions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string my_id = 1;
  if (!this->_internal_my_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_my_id());
  }

  // int64 commited_epoch = 2;
  if (this->_internal_commited_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_commited_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftReqActions::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftReqActions::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftReqActions::GetClassData() const { return &_class_data_; }


void RaftReqActions::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftReqActions*>(&to_msg);
  auto& from = static_cast<const RaftReqActions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftReqActions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_my_id().empty()) {
    _this->_internal_set_my_id(from._internal_my_id());
  }
  if (from._internal_commited_epoch() != 0) {
    _this->_internal_set_commited_epoch(from._internal_commited_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftReqActions::CopyFrom(const RaftReqActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftReqActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftReqActions::IsInitialized() const {
  return true;
}

void RaftReqActions::InternalSwap(RaftReqActions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.my_id_, lhs_arena,
                                       &other->_impl_.my_id_, rhs_arena);
        swap(_impl_.commited_epoch_, other->_impl_.commited_epoch_);
}

::google::protobuf::Metadata RaftReqActions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[10]);
}
// ===================================================================

class SlotMsg::_Internal {
 public:
};

SlotMsg::SlotMsg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.SlotMsg)
}
SlotMsg::SlotMsg(const SlotMsg& from) : ::google::protobuf::Message() {
  SlotMsg* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.slot_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.slot_ = from._impl_.slot_;

  // @@protoc_insertion_point(copy_constructor:prpc.SlotMsg)
}
inline void SlotMsg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){},
      decltype(_impl_.slot_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SlotMsg::~SlotMsg() {
  // @@protoc_insertion_point(destructor:prpc.SlotMsg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SlotMsg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}
void SlotMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SlotMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.SlotMsg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.slot_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SlotMsg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 24, 2> SlotMsg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SlotMsg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string msg = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SlotMsg, _impl_.msg_)}},
    // int32 slot = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SlotMsg, _impl_.slot_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SlotMsg, _impl_.slot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 slot = 1;
    {PROTOBUF_FIELD_OFFSET(SlotMsg, _impl_.slot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string msg = 2;
    {PROTOBUF_FIELD_OFFSET(SlotMsg, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\14\0\3\0\0\0\0\0"
    "prpc.SlotMsg"
    "msg"
  }},
};

::uint8_t* SlotMsg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.SlotMsg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 slot = 1;
  if (this->_internal_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_slot(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.SlotMsg.msg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.SlotMsg)
  return target;
}

::size_t SlotMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.SlotMsg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // int32 slot = 1;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SlotMsg::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SlotMsg::MergeImpl
};
const ::google::protobuf::Message::ClassData*SlotMsg::GetClassData() const { return &_class_data_; }


void SlotMsg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SlotMsg*>(&to_msg);
  auto& from = static_cast<const SlotMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.SlotMsg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SlotMsg::CopyFrom(const SlotMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.SlotMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SlotMsg::IsInitialized() const {
  return true;
}

void SlotMsg::InternalSwap(SlotMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
        swap(_impl_.slot_, other->_impl_.slot_);
}

::google::protobuf::Metadata SlotMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[11]);
}
// ===================================================================

class RaftMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<RaftMsg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_._has_bits_);
  static const ::prpc::RaftTransaction& action(const RaftMsg* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prpc::RaftSyncActions& sync_actions(const RaftMsg* msg);
  static void set_has_sync_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prpc::RaftSyncActionsRet& sync_actions_ret(const RaftMsg* msg);
  static void set_has_sync_actions_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::prpc::RaftPing& ping(const RaftMsg* msg);
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::prpc::RaftPong& pong(const RaftMsg* msg);
  static void set_has_pong(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::prpc::RaftElection& election(const RaftMsg* msg);
  static void set_has_election(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::prpc::RaftElectionRet& election_ret(const RaftMsg* msg);
  static void set_has_election_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::prpc::RaftReqActions& req_actions(const RaftMsg* msg);
  static void set_has_req_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::prpc::SlotMsg& slot_msg(const RaftMsg* msg);
  static void set_has_slot_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::prpc::RaftTransaction& RaftMsg::_Internal::action(const RaftMsg* msg) {
  return *msg->_impl_.action_;
}
const ::prpc::RaftSyncActions& RaftMsg::_Internal::sync_actions(const RaftMsg* msg) {
  return *msg->_impl_.sync_actions_;
}
const ::prpc::RaftSyncActionsRet& RaftMsg::_Internal::sync_actions_ret(const RaftMsg* msg) {
  return *msg->_impl_.sync_actions_ret_;
}
const ::prpc::RaftPing& RaftMsg::_Internal::ping(const RaftMsg* msg) {
  return *msg->_impl_.ping_;
}
const ::prpc::RaftPong& RaftMsg::_Internal::pong(const RaftMsg* msg) {
  return *msg->_impl_.pong_;
}
const ::prpc::RaftElection& RaftMsg::_Internal::election(const RaftMsg* msg) {
  return *msg->_impl_.election_;
}
const ::prpc::RaftElectionRet& RaftMsg::_Internal::election_ret(const RaftMsg* msg) {
  return *msg->_impl_.election_ret_;
}
const ::prpc::RaftReqActions& RaftMsg::_Internal::req_actions(const RaftMsg* msg) {
  return *msg->_impl_.req_actions_;
}
const ::prpc::SlotMsg& RaftMsg::_Internal::slot_msg(const RaftMsg* msg) {
  return *msg->_impl_.slot_msg_;
}
RaftMsg::RaftMsg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.RaftMsg)
}
RaftMsg::RaftMsg(const RaftMsg& from) : ::google::protobuf::Message() {
  RaftMsg* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.action_){nullptr},
      decltype(_impl_.sync_actions_){nullptr},
      decltype(_impl_.sync_actions_ret_){nullptr},
      decltype(_impl_.ping_){nullptr},
      decltype(_impl_.pong_){nullptr},
      decltype(_impl_.election_){nullptr},
      decltype(_impl_.election_ret_){nullptr},
      decltype(_impl_.req_actions_){nullptr},
      decltype(_impl_.slot_msg_){nullptr},
      decltype(_impl_.type_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.action_ = new ::prpc::RaftTransaction(*from._impl_.action_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sync_actions_ = new ::prpc::RaftSyncActions(*from._impl_.sync_actions_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.sync_actions_ret_ = new ::prpc::RaftSyncActionsRet(*from._impl_.sync_actions_ret_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.ping_ = new ::prpc::RaftPing(*from._impl_.ping_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.pong_ = new ::prpc::RaftPong(*from._impl_.pong_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.election_ = new ::prpc::RaftElection(*from._impl_.election_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.election_ret_ = new ::prpc::RaftElectionRet(*from._impl_.election_ret_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.req_actions_ = new ::prpc::RaftReqActions(*from._impl_.req_actions_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.slot_msg_ = new ::prpc::SlotMsg(*from._impl_.slot_msg_);
  }
  _this->_impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:prpc.RaftMsg)
}
inline void RaftMsg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.action_){nullptr},
      decltype(_impl_.sync_actions_){nullptr},
      decltype(_impl_.sync_actions_ret_){nullptr},
      decltype(_impl_.ping_){nullptr},
      decltype(_impl_.pong_){nullptr},
      decltype(_impl_.election_){nullptr},
      decltype(_impl_.election_ret_){nullptr},
      decltype(_impl_.req_actions_){nullptr},
      decltype(_impl_.slot_msg_){nullptr},
      decltype(_impl_.type_){0},
  };
}
RaftMsg::~RaftMsg() {
  // @@protoc_insertion_point(destructor:prpc.RaftMsg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RaftMsg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.action_;
  if (this != internal_default_instance()) delete _impl_.sync_actions_;
  if (this != internal_default_instance()) delete _impl_.sync_actions_ret_;
  if (this != internal_default_instance()) delete _impl_.ping_;
  if (this != internal_default_instance()) delete _impl_.pong_;
  if (this != internal_default_instance()) delete _impl_.election_;
  if (this != internal_default_instance()) delete _impl_.election_ret_;
  if (this != internal_default_instance()) delete _impl_.req_actions_;
  if (this != internal_default_instance()) delete _impl_.slot_msg_;
}
void RaftMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RaftMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.RaftMsg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.action_ != nullptr);
      _impl_.action_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.sync_actions_ != nullptr);
      _impl_.sync_actions_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.sync_actions_ret_ != nullptr);
      _impl_.sync_actions_ret_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.ping_ != nullptr);
      _impl_.ping_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.pong_ != nullptr);
      _impl_.pong_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.election_ != nullptr);
      _impl_.election_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.election_ret_ != nullptr);
      _impl_.election_ret_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.req_actions_ != nullptr);
      _impl_.req_actions_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.slot_msg_ != nullptr);
    _impl_.slot_msg_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RaftMsg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 9, 0, 2> RaftMsg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RaftMsg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .prpc.RaftMsg.Type type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RaftMsg, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.type_)}},
    // .prpc.RaftTransaction action = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.action_)}},
    // .prpc.RaftSyncActions sync_actions = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.sync_actions_)}},
    // .prpc.RaftSyncActionsRet sync_actions_ret = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.sync_actions_ret_)}},
    // .prpc.RaftPing ping = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.ping_)}},
    // .prpc.RaftPong pong = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.pong_)}},
    // .prpc.RaftElection election = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.election_)}},
    // .prpc.RaftElectionRet election_ret = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.election_ret_)}},
    // .prpc.RaftReqActions req_actions = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.req_actions_)}},
    // .prpc.SlotMsg slot_msg = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 8, PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.slot_msg_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .prpc.RaftMsg.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .prpc.RaftTransaction action = 2;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.action_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftSyncActions sync_actions = 3;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.sync_actions_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftSyncActionsRet sync_actions_ret = 4;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.sync_actions_ret_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftPing ping = 5;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.ping_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftPong pong = 6;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.pong_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftElection election = 7;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.election_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftElectionRet election_ret = 8;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.election_ret_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.RaftReqActions req_actions = 9;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.req_actions_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.SlotMsg slot_msg = 10;
    {PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.slot_msg_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::RaftTransaction>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftSyncActions>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftSyncActionsRet>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftPing>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftPong>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftElection>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftElectionRet>()},
    {::_pbi::TcParser::GetTable<::prpc::RaftReqActions>()},
    {::_pbi::TcParser::GetTable<::prpc::SlotMsg>()},
  }}, {{
  }},
};

::uint8_t* RaftMsg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.RaftMsg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .prpc.RaftMsg.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .prpc.RaftTransaction action = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::action(this),
        _Internal::action(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftSyncActions sync_actions = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sync_actions(this),
        _Internal::sync_actions(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftSyncActionsRet sync_actions_ret = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sync_actions_ret(this),
        _Internal::sync_actions_ret(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftPing ping = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ping(this),
        _Internal::ping(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftPong pong = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pong(this),
        _Internal::pong(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftElection election = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::election(this),
        _Internal::election(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftElectionRet election_ret = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::election_ret(this),
        _Internal::election_ret(this).GetCachedSize(), target, stream);
  }

  // .prpc.RaftReqActions req_actions = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::req_actions(this),
        _Internal::req_actions(this).GetCachedSize(), target, stream);
  }

  // .prpc.SlotMsg slot_msg = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::slot_msg(this),
        _Internal::slot_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.RaftMsg)
  return target;
}

::size_t RaftMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.RaftMsg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .prpc.RaftTransaction action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.action_);
    }

    // .prpc.RaftSyncActions sync_actions = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sync_actions_);
    }

    // .prpc.RaftSyncActionsRet sync_actions_ret = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sync_actions_ret_);
    }

    // .prpc.RaftPing ping = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.ping_);
    }

    // .prpc.RaftPong pong = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.pong_);
    }

    // .prpc.RaftElection election = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.election_);
    }

    // .prpc.RaftElectionRet election_ret = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.election_ret_);
    }

    // .prpc.RaftReqActions req_actions = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.req_actions_);
    }

  }
  // .prpc.SlotMsg slot_msg = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.slot_msg_);
  }

  // .prpc.RaftMsg.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RaftMsg::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RaftMsg::MergeImpl
};
const ::google::protobuf::Message::ClassData*RaftMsg::GetClassData() const { return &_class_data_; }


void RaftMsg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RaftMsg*>(&to_msg);
  auto& from = static_cast<const RaftMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.RaftMsg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_action()->::prpc::RaftTransaction::MergeFrom(
          from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sync_actions()->::prpc::RaftSyncActions::MergeFrom(
          from._internal_sync_actions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sync_actions_ret()->::prpc::RaftSyncActionsRet::MergeFrom(
          from._internal_sync_actions_ret());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_ping()->::prpc::RaftPing::MergeFrom(
          from._internal_ping());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_pong()->::prpc::RaftPong::MergeFrom(
          from._internal_pong());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_election()->::prpc::RaftElection::MergeFrom(
          from._internal_election());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_election_ret()->::prpc::RaftElectionRet::MergeFrom(
          from._internal_election_ret());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_req_actions()->::prpc::RaftReqActions::MergeFrom(
          from._internal_req_actions());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_mutable_slot_msg()->::prpc::SlotMsg::MergeFrom(
        from._internal_slot_msg());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RaftMsg::CopyFrom(const RaftMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.RaftMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RaftMsg::IsInitialized() const {
  return true;
}

void RaftMsg::InternalSwap(RaftMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.type_)
      + sizeof(RaftMsg::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RaftMsg, _impl_.action_)>(
          reinterpret_cast<char*>(&_impl_.action_),
          reinterpret_cast<char*>(&other->_impl_.action_));
}

::google::protobuf::Metadata RaftMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
