// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#include "video.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace prpc {
        template <typename>
PROTOBUF_CONSTEXPR VideoStream::VideoStream(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.codec_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.codec_long_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.profile_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.codec_type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.r_frame_rate_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.index_)*/ 0,
      /*decltype(_impl_.width_)*/ 0,
      /*decltype(_impl_.height_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VideoStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoStreamDefaultTypeInternal() {}
  union {
    VideoStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoStreamDefaultTypeInternal _VideoStream_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VideoFormat::VideoFormat(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.filename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.format_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.format_long_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.start_time_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.duration_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.size_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.bit_rate_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.nb_streams_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct VideoFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoFormatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoFormatDefaultTypeInternal() {}
  union {
    VideoFormat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoFormatDefaultTypeInternal _VideoFormat_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR VideoMetadata::VideoMetadata(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.streams_)*/ {},
      /*decltype(_impl_.format_)*/ nullptr,
    } {}
struct VideoMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoMetadataDefaultTypeInternal() {}
  union {
    VideoMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoMetadataDefaultTypeInternal _VideoMetadata_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Video::Video(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.subtitle_paths_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.meta_)*/ nullptr,
      /*decltype(_impl_.id_)*/ ::int64_t{0},
    } {}
struct VideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDefaultTypeInternal() {}
  union {
    Video _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDefaultTypeInternal _Video_default_instance_;
}  // namespace prpc
static ::_pb::Metadata file_level_metadata_video_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_video_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_video_2eproto = nullptr;
const ::uint32_t TableStruct_video_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.codec_name_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.codec_long_name_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.profile_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.codec_type_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoStream, _impl_.r_frame_rate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.filename_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.nb_streams_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.format_name_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.format_long_name_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoFormat, _impl_.bit_rate_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::VideoMetadata, _impl_.streams_),
    PROTOBUF_FIELD_OFFSET(::prpc::VideoMetadata, _impl_.format_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _impl_.meta_),
    PROTOBUF_FIELD_OFFSET(::prpc::Video, _impl_.subtitle_paths_),
    ~0u,
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::prpc::VideoStream)},
        {16, -1, -1, sizeof(::prpc::VideoFormat)},
        {32, 42, -1, sizeof(::prpc::VideoMetadata)},
        {44, 56, -1, sizeof(::prpc::Video)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::prpc::_VideoStream_default_instance_._instance,
    &::prpc::_VideoFormat_default_instance_._instance,
    &::prpc::_VideoMetadata_default_instance_._instance,
    &::prpc::_Video_default_instance_._instance,
};
const char descriptor_table_protodef_video_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013video.proto\022\004prpc\032\037google/protobuf/tim"
    "estamp.proto\"\243\001\n\013VideoStream\022\r\n\005index\030\001 "
    "\001(\005\022\022\n\ncodec_name\030\002 \001(\t\022\027\n\017codec_long_na"
    "me\030\003 \001(\t\022\017\n\007profile\030\004 \001(\t\022\022\n\ncodec_type\030"
    "\005 \001(\t\022\r\n\005width\030\006 \001(\005\022\016\n\006height\030\007 \001(\005\022\024\n\014"
    "r_frame_rate\030\t \001(\t\"\250\001\n\013VideoFormat\022\020\n\010fi"
    "lename\030\001 \001(\t\022\022\n\nnb_streams\030\002 \001(\005\022\023\n\013form"
    "at_name\030\003 \001(\t\022\030\n\020format_long_name\030\004 \001(\t\022"
    "\022\n\nstart_time\030\005 \001(\t\022\020\n\010duration\030\006 \001(\t\022\014\n"
    "\004size\030\007 \001(\t\022\020\n\010bit_rate\030\010 \001(\t\"V\n\rVideoMe"
    "tadata\022\"\n\007streams\030\001 \003(\0132\021.prpc.VideoStre"
    "am\022!\n\006format\030\002 \001(\0132\021.prpc.VideoFormat\"\\\n"
    "\005Video\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022!\n\004meta"
    "\030\003 \001(\0132\023.prpc.VideoMetadata\022\026\n\016subtitle_"
    "paths\030\004 \003(\tB\010Z\006./prpcP\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_video_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_video_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_video_2eproto = {
    false,
    false,
    591,
    descriptor_table_protodef_video_2eproto,
    "video.proto",
    &descriptor_table_video_2eproto_once,
    descriptor_table_video_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_video_2eproto::offsets,
    file_level_metadata_video_2eproto,
    file_level_enum_descriptors_video_2eproto,
    file_level_service_descriptors_video_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_video_2eproto_getter() {
  return &descriptor_table_video_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_video_2eproto(&descriptor_table_video_2eproto);
namespace prpc {
// ===================================================================

class VideoStream::_Internal {
 public:
};

VideoStream::VideoStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.VideoStream)
}
VideoStream::VideoStream(const VideoStream& from) : ::google::protobuf::Message() {
  VideoStream* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.codec_name_){},
      decltype(_impl_.codec_long_name_){},
      decltype(_impl_.profile_){},
      decltype(_impl_.codec_type_){},
      decltype(_impl_.r_frame_rate_){},
      decltype(_impl_.index_){},
      decltype(_impl_.width_){},
      decltype(_impl_.height_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.codec_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec_name().empty()) {
    _this->_impl_.codec_name_.Set(from._internal_codec_name(), _this->GetArenaForAllocation());
  }
  _impl_.codec_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec_long_name().empty()) {
    _this->_impl_.codec_long_name_.Set(from._internal_codec_long_name(), _this->GetArenaForAllocation());
  }
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profile_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile().empty()) {
    _this->_impl_.profile_.Set(from._internal_profile(), _this->GetArenaForAllocation());
  }
  _impl_.codec_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec_type().empty()) {
    _this->_impl_.codec_type_.Set(from._internal_codec_type(), _this->GetArenaForAllocation());
  }
  _impl_.r_frame_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.r_frame_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_r_frame_rate().empty()) {
    _this->_impl_.r_frame_rate_.Set(from._internal_r_frame_rate(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));

  // @@protoc_insertion_point(copy_constructor:prpc.VideoStream)
}
inline void VideoStream::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.codec_name_){},
      decltype(_impl_.codec_long_name_){},
      decltype(_impl_.profile_){},
      decltype(_impl_.codec_type_){},
      decltype(_impl_.r_frame_rate_){},
      decltype(_impl_.index_){0},
      decltype(_impl_.width_){0},
      decltype(_impl_.height_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.codec_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codec_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profile_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codec_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codec_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.r_frame_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.r_frame_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
VideoStream::~VideoStream() {
  // @@protoc_insertion_point(destructor:prpc.VideoStream)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VideoStream::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.codec_name_.Destroy();
  _impl_.codec_long_name_.Destroy();
  _impl_.profile_.Destroy();
  _impl_.codec_type_.Destroy();
  _impl_.r_frame_rate_.Destroy();
}
void VideoStream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VideoStream::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.VideoStream)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.codec_name_.ClearToEmpty();
  _impl_.codec_long_name_.ClearToEmpty();
  _impl_.profile_.ClearToEmpty();
  _impl_.codec_type_.ClearToEmpty();
  _impl_.r_frame_rate_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VideoStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 0, 87, 2> VideoStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VideoStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoStream, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.index_)}},
    // string codec_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_name_)}},
    // string codec_long_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_long_name_)}},
    // string profile = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.profile_)}},
    // string codec_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_type_)}},
    // int32 width = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoStream, _impl_.width_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.width_)}},
    // int32 height = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoStream, _impl_.height_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.height_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string r_frame_rate = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.r_frame_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string codec_name = 2;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string codec_long_name = 3;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_long_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string profile = 4;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.profile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string codec_type = 5;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.codec_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 width = 6;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 height = 7;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string r_frame_rate = 9;
    {PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.r_frame_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\0\12\17\7\12\0\0\14\0\0\0\0\0\0\0"
    "prpc.VideoStream"
    "codec_name"
    "codec_long_name"
    "profile"
    "codec_type"
    "r_frame_rate"
  }},
};

::uint8_t* VideoStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.VideoStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_index(), target);
  }

  // string codec_name = 2;
  if (!this->_internal_codec_name().empty()) {
    const std::string& _s = this->_internal_codec_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoStream.codec_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string codec_long_name = 3;
  if (!this->_internal_codec_long_name().empty()) {
    const std::string& _s = this->_internal_codec_long_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoStream.codec_long_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    const std::string& _s = this->_internal_profile();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoStream.profile");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string codec_type = 5;
  if (!this->_internal_codec_type().empty()) {
    const std::string& _s = this->_internal_codec_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoStream.codec_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 width = 6;
  if (this->_internal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_width(), target);
  }

  // int32 height = 7;
  if (this->_internal_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_height(), target);
  }

  // string r_frame_rate = 9;
  if (!this->_internal_r_frame_rate().empty()) {
    const std::string& _s = this->_internal_r_frame_rate();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoStream.r_frame_rate");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.VideoStream)
  return target;
}

::size_t VideoStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.VideoStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codec_name = 2;
  if (!this->_internal_codec_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_codec_name());
  }

  // string codec_long_name = 3;
  if (!this->_internal_codec_long_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_codec_long_name());
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_profile());
  }

  // string codec_type = 5;
  if (!this->_internal_codec_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_codec_type());
  }

  // string r_frame_rate = 9;
  if (!this->_internal_r_frame_rate().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_r_frame_rate());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  // int32 width = 6;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_width());
  }

  // int32 height = 7;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VideoStream::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VideoStream::MergeImpl
};
const ::google::protobuf::Message::ClassData*VideoStream::GetClassData() const { return &_class_data_; }


void VideoStream::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VideoStream*>(&to_msg);
  auto& from = static_cast<const VideoStream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.VideoStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_codec_name().empty()) {
    _this->_internal_set_codec_name(from._internal_codec_name());
  }
  if (!from._internal_codec_long_name().empty()) {
    _this->_internal_set_codec_long_name(from._internal_codec_long_name());
  }
  if (!from._internal_profile().empty()) {
    _this->_internal_set_profile(from._internal_profile());
  }
  if (!from._internal_codec_type().empty()) {
    _this->_internal_set_codec_type(from._internal_codec_type());
  }
  if (!from._internal_r_frame_rate().empty()) {
    _this->_internal_set_r_frame_rate(from._internal_r_frame_rate());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VideoStream::CopyFrom(const VideoStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.VideoStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VideoStream::IsInitialized() const {
  return true;
}

void VideoStream::InternalSwap(VideoStream* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_name_, lhs_arena,
                                       &other->_impl_.codec_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_long_name_, lhs_arena,
                                       &other->_impl_.codec_long_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.profile_, lhs_arena,
                                       &other->_impl_.profile_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_type_, lhs_arena,
                                       &other->_impl_.codec_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.r_frame_rate_, lhs_arena,
                                       &other->_impl_.r_frame_rate_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.height_)
      + sizeof(VideoStream::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(VideoStream, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata VideoStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_video_2eproto_getter, &descriptor_table_video_2eproto_once,
      file_level_metadata_video_2eproto[0]);
}
// ===================================================================

class VideoFormat::_Internal {
 public:
};

VideoFormat::VideoFormat(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.VideoFormat)
}
VideoFormat::VideoFormat(const VideoFormat& from) : ::google::protobuf::Message() {
  VideoFormat* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){},
      decltype(_impl_.format_name_){},
      decltype(_impl_.format_long_name_){},
      decltype(_impl_.start_time_){},
      decltype(_impl_.duration_){},
      decltype(_impl_.size_){},
      decltype(_impl_.bit_rate_){},
      decltype(_impl_.nb_streams_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), _this->GetArenaForAllocation());
  }
  _impl_.format_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format_name().empty()) {
    _this->_impl_.format_name_.Set(from._internal_format_name(), _this->GetArenaForAllocation());
  }
  _impl_.format_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format_long_name().empty()) {
    _this->_impl_.format_long_name_.Set(from._internal_format_long_name(), _this->GetArenaForAllocation());
  }
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    _this->_impl_.start_time_.Set(from._internal_start_time(), _this->GetArenaForAllocation());
  }
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.duration_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_duration().empty()) {
    _this->_impl_.duration_.Set(from._internal_duration(), _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_size().empty()) {
    _this->_impl_.size_.Set(from._internal_size(), _this->GetArenaForAllocation());
  }
  _impl_.bit_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bit_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bit_rate().empty()) {
    _this->_impl_.bit_rate_.Set(from._internal_bit_rate(), _this->GetArenaForAllocation());
  }
  _this->_impl_.nb_streams_ = from._impl_.nb_streams_;

  // @@protoc_insertion_point(copy_constructor:prpc.VideoFormat)
}
inline void VideoFormat::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){},
      decltype(_impl_.format_name_){},
      decltype(_impl_.format_long_name_){},
      decltype(_impl_.start_time_){},
      decltype(_impl_.duration_){},
      decltype(_impl_.size_){},
      decltype(_impl_.bit_rate_){},
      decltype(_impl_.nb_streams_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.duration_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bit_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bit_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
VideoFormat::~VideoFormat() {
  // @@protoc_insertion_point(destructor:prpc.VideoFormat)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VideoFormat::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.format_name_.Destroy();
  _impl_.format_long_name_.Destroy();
  _impl_.start_time_.Destroy();
  _impl_.duration_.Destroy();
  _impl_.size_.Destroy();
  _impl_.bit_rate_.Destroy();
}
void VideoFormat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VideoFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.VideoFormat)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _impl_.format_name_.ClearToEmpty();
  _impl_.format_long_name_.ClearToEmpty();
  _impl_.start_time_.ClearToEmpty();
  _impl_.duration_.ClearToEmpty();
  _impl_.size_.ClearToEmpty();
  _impl_.bit_rate_.ClearToEmpty();
  _impl_.nb_streams_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VideoFormat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 98, 2> VideoFormat::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VideoFormat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string bit_rate = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.bit_rate_)}},
    // string filename = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.filename_)}},
    // int32 nb_streams = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoFormat, _impl_.nb_streams_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.nb_streams_)}},
    // string format_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.format_name_)}},
    // string format_long_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.format_long_name_)}},
    // string start_time = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.start_time_)}},
    // string duration = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.duration_)}},
    // string size = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string filename = 1;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.filename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 nb_streams = 2;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.nb_streams_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string format_name = 3;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.format_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string format_long_name = 4;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.format_long_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string start_time = 5;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.start_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string duration = 6;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.duration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string size = 7;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bit_rate = 8;
    {PROTOBUF_FIELD_OFFSET(VideoFormat, _impl_.bit_rate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\10\0\13\20\12\10\4\10\0\0\0\0\0\0\0"
    "prpc.VideoFormat"
    "filename"
    "format_name"
    "format_long_name"
    "start_time"
    "duration"
    "size"
    "bit_rate"
  }},
};

::uint8_t* VideoFormat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.VideoFormat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    const std::string& _s = this->_internal_filename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.filename");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 nb_streams = 2;
  if (this->_internal_nb_streams() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_nb_streams(), target);
  }

  // string format_name = 3;
  if (!this->_internal_format_name().empty()) {
    const std::string& _s = this->_internal_format_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.format_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string format_long_name = 4;
  if (!this->_internal_format_long_name().empty()) {
    const std::string& _s = this->_internal_format_long_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.format_long_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string start_time = 5;
  if (!this->_internal_start_time().empty()) {
    const std::string& _s = this->_internal_start_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.start_time");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string duration = 6;
  if (!this->_internal_duration().empty()) {
    const std::string& _s = this->_internal_duration();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.duration");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string size = 7;
  if (!this->_internal_size().empty()) {
    const std::string& _s = this->_internal_size();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.size");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string bit_rate = 8;
  if (!this->_internal_bit_rate().empty()) {
    const std::string& _s = this->_internal_bit_rate();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.VideoFormat.bit_rate");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.VideoFormat)
  return target;
}

::size_t VideoFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.VideoFormat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_filename());
  }

  // string format_name = 3;
  if (!this->_internal_format_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_format_name());
  }

  // string format_long_name = 4;
  if (!this->_internal_format_long_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_format_long_name());
  }

  // string start_time = 5;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_start_time());
  }

  // string duration = 6;
  if (!this->_internal_duration().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_duration());
  }

  // string size = 7;
  if (!this->_internal_size().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_size());
  }

  // string bit_rate = 8;
  if (!this->_internal_bit_rate().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_bit_rate());
  }

  // int32 nb_streams = 2;
  if (this->_internal_nb_streams() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nb_streams());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VideoFormat::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VideoFormat::MergeImpl
};
const ::google::protobuf::Message::ClassData*VideoFormat::GetClassData() const { return &_class_data_; }


void VideoFormat::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VideoFormat*>(&to_msg);
  auto& from = static_cast<const VideoFormat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.VideoFormat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_format_name().empty()) {
    _this->_internal_set_format_name(from._internal_format_name());
  }
  if (!from._internal_format_long_name().empty()) {
    _this->_internal_set_format_long_name(from._internal_format_long_name());
  }
  if (!from._internal_start_time().empty()) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_duration().empty()) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (!from._internal_size().empty()) {
    _this->_internal_set_size(from._internal_size());
  }
  if (!from._internal_bit_rate().empty()) {
    _this->_internal_set_bit_rate(from._internal_bit_rate());
  }
  if (from._internal_nb_streams() != 0) {
    _this->_internal_set_nb_streams(from._internal_nb_streams());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VideoFormat::CopyFrom(const VideoFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.VideoFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VideoFormat::IsInitialized() const {
  return true;
}

void VideoFormat::InternalSwap(VideoFormat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, lhs_arena,
                                       &other->_impl_.filename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_name_, lhs_arena,
                                       &other->_impl_.format_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_long_name_, lhs_arena,
                                       &other->_impl_.format_long_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.start_time_, lhs_arena,
                                       &other->_impl_.start_time_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.duration_, lhs_arena,
                                       &other->_impl_.duration_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.size_, lhs_arena,
                                       &other->_impl_.size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bit_rate_, lhs_arena,
                                       &other->_impl_.bit_rate_, rhs_arena);
        swap(_impl_.nb_streams_, other->_impl_.nb_streams_);
}

::google::protobuf::Metadata VideoFormat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_video_2eproto_getter, &descriptor_table_video_2eproto_once,
      file_level_metadata_video_2eproto[1]);
}
// ===================================================================

class VideoMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_._has_bits_);
  static const ::prpc::VideoFormat& format(const VideoMetadata* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prpc::VideoFormat& VideoMetadata::_Internal::format(const VideoMetadata* msg) {
  return *msg->_impl_.format_;
}
VideoMetadata::VideoMetadata(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.VideoMetadata)
}
VideoMetadata::VideoMetadata(const VideoMetadata& from) : ::google::protobuf::Message() {
  VideoMetadata* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.streams_){from._impl_.streams_},
      decltype(_impl_.format_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.format_ = new ::prpc::VideoFormat(*from._impl_.format_);
  }

  // @@protoc_insertion_point(copy_constructor:prpc.VideoMetadata)
}
inline void VideoMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.streams_){arena},
      decltype(_impl_.format_){nullptr},
  };
}
VideoMetadata::~VideoMetadata() {
  // @@protoc_insertion_point(destructor:prpc.VideoMetadata)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VideoMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.streams_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.format_;
}
void VideoMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void VideoMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.VideoMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_streams()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.format_ != nullptr);
    _impl_.format_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VideoMetadata::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> VideoMetadata::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VideoMetadata_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .prpc.VideoFormat format = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.format_)}},
    // repeated .prpc.VideoStream streams = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.streams_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .prpc.VideoStream streams = 1;
    {PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.streams_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .prpc.VideoFormat format = 2;
    {PROTOBUF_FIELD_OFFSET(VideoMetadata, _impl_.format_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::VideoStream>()},
    {::_pbi::TcParser::GetTable<::prpc::VideoFormat>()},
  }}, {{
  }},
};

::uint8_t* VideoMetadata::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.VideoMetadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .prpc.VideoStream streams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_streams().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .prpc.VideoFormat format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.VideoMetadata)
  return target;
}

::size_t VideoMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.VideoMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prpc.VideoStream streams = 1;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->_internal_streams()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .prpc.VideoFormat format = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VideoMetadata::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    VideoMetadata::MergeImpl
};
const ::google::protobuf::Message::ClassData*VideoMetadata::GetClassData() const { return &_class_data_; }


void VideoMetadata::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VideoMetadata*>(&to_msg);
  auto& from = static_cast<const VideoMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.VideoMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_streams()->MergeFrom(from._internal_streams());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_format()->::prpc::VideoFormat::MergeFrom(
        from._internal_format());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VideoMetadata::CopyFrom(const VideoMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.VideoMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VideoMetadata::IsInitialized() const {
  return true;
}

void VideoMetadata::InternalSwap(VideoMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.streams_.InternalSwap(&other->_impl_.streams_);
  swap(_impl_.format_, other->_impl_.format_);
}

::google::protobuf::Metadata VideoMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_video_2eproto_getter, &descriptor_table_video_2eproto_once,
      file_level_metadata_video_2eproto[2]);
}
// ===================================================================

class Video::_Internal {
 public:
  using HasBits = decltype(std::declval<Video>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Video, _impl_._has_bits_);
  static const ::prpc::VideoMetadata& meta(const Video* msg);
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prpc::VideoMetadata& Video::_Internal::meta(const Video* msg) {
  return *msg->_impl_.meta_;
}
Video::Video(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:prpc.Video)
}
Video::Video(const Video& from) : ::google::protobuf::Message() {
  Video* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.subtitle_paths_){from._impl_.subtitle_paths_},
      decltype(_impl_.name_){},
      decltype(_impl_.meta_){nullptr},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.meta_ = new ::prpc::VideoMetadata(*from._impl_.meta_);
  }
  _this->_impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:prpc.Video)
}
inline void Video::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.subtitle_paths_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.meta_){nullptr},
      decltype(_impl_.id_){::int64_t{0}},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Video::~Video() {
  // @@protoc_insertion_point(destructor:prpc.Video)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Video::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_subtitle_paths()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.meta_;
}
void Video::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:prpc.Video)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_subtitle_paths()->Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.meta_ != nullptr);
    _impl_.meta_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Video::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 37, 2> Video::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Video, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Video_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string subtitle_paths = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Video, _impl_.subtitle_paths_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Video, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Video, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Video, _impl_.name_)}},
    // .prpc.VideoMetadata meta = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Video, _impl_.meta_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(Video, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Video, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .prpc.VideoMetadata meta = 3;
    {PROTOBUF_FIELD_OFFSET(Video, _impl_.meta_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string subtitle_paths = 4;
    {PROTOBUF_FIELD_OFFSET(Video, _impl_.subtitle_paths_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::prpc::VideoMetadata>()},
  }}, {{
    "\12\0\4\0\16\0\0\0"
    "prpc.Video"
    "name"
    "subtitle_paths"
  }},
};

::uint8_t* Video::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prpc.Video)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.Video.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .prpc.VideoMetadata meta = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // repeated string subtitle_paths = 4;
  for (int i = 0, n = this->_internal_subtitle_paths_size(); i < n; ++i) {
    const auto& s = this->_internal_subtitle_paths().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "prpc.Video.subtitle_paths");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prpc.Video)
  return target;
}

::size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prpc.Video)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subtitle_paths = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_subtitle_paths().size());
  for (int i = 0, n = _internal_subtitle_paths().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_subtitle_paths().Get(i));
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .prpc.VideoMetadata meta = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Video::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Video::MergeImpl
};
const ::google::protobuf::Message::ClassData*Video::GetClassData() const { return &_class_data_; }


void Video::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Video*>(&to_msg);
  auto& from = static_cast<const Video&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prpc.Video)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subtitle_paths()->MergeFrom(from._internal_subtitle_paths());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_meta()->::prpc::VideoMetadata::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prpc.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subtitle_paths_.InternalSwap(&other->_impl_.subtitle_paths_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Video, _impl_.id_)
      + sizeof(Video::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Video, _impl_.meta_)>(
          reinterpret_cast<char*>(&_impl_.meta_),
          reinterpret_cast<char*>(&other->_impl_.meta_));
}

::google::protobuf::Metadata Video::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_video_2eproto_getter, &descriptor_table_video_2eproto_once,
      file_level_metadata_video_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
