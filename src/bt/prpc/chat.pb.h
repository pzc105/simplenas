// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chat_2eproto;
namespace prpc {
class ChatError;
struct ChatErrorDefaultTypeInternal;
extern ChatErrorDefaultTypeInternal _ChatError_default_instance_;
class ChatUserInfo;
struct ChatUserInfoDefaultTypeInternal;
extern ChatUserInfoDefaultTypeInternal _ChatUserInfo_default_instance_;
class CreateChatRoomReq;
struct CreateChatRoomReqDefaultTypeInternal;
extern CreateChatRoomReqDefaultTypeInternal _CreateChatRoomReq_default_instance_;
class CreateChatRoomRes;
struct CreateChatRoomResDefaultTypeInternal;
extern CreateChatRoomResDefaultTypeInternal _CreateChatRoomRes_default_instance_;
class JoinRoomReq;
struct JoinRoomReqDefaultTypeInternal;
extern JoinRoomReqDefaultTypeInternal _JoinRoomReq_default_instance_;
class JoinRoomRes;
struct JoinRoomResDefaultTypeInternal;
extern JoinRoomResDefaultTypeInternal _JoinRoomRes_default_instance_;
class LeaveRoomReq;
struct LeaveRoomReqDefaultTypeInternal;
extern LeaveRoomReqDefaultTypeInternal _LeaveRoomReq_default_instance_;
class LeaveRoomRes;
struct LeaveRoomResDefaultTypeInternal;
extern LeaveRoomResDefaultTypeInternal _LeaveRoomRes_default_instance_;
class QueryChatRoomInfoReq;
struct QueryChatRoomInfoReqDefaultTypeInternal;
extern QueryChatRoomInfoReqDefaultTypeInternal _QueryChatRoomInfoReq_default_instance_;
class QueryChatRoomInfoRes;
struct QueryChatRoomInfoResDefaultTypeInternal;
extern QueryChatRoomInfoResDefaultTypeInternal _QueryChatRoomInfoRes_default_instance_;
class QueryChatRoomServerReq;
struct QueryChatRoomServerReqDefaultTypeInternal;
extern QueryChatRoomServerReqDefaultTypeInternal _QueryChatRoomServerReq_default_instance_;
class QueryChatRoomServerRes;
struct QueryChatRoomServerResDefaultTypeInternal;
extern QueryChatRoomServerResDefaultTypeInternal _QueryChatRoomServerRes_default_instance_;
class Send2ChatRoomReq;
struct Send2ChatRoomReqDefaultTypeInternal;
extern Send2ChatRoomReqDefaultTypeInternal _Send2ChatRoomReq_default_instance_;
class Send2ChatRoomRes;
struct Send2ChatRoomResDefaultTypeInternal;
extern Send2ChatRoomResDefaultTypeInternal _Send2ChatRoomRes_default_instance_;
}  // namespace prpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace prpc {
enum ChatError_ErrorId : int {
  ChatError_ErrorId_None = 0,
  ChatError_ErrorId_InvalidIdentity = 1,
  ChatError_ErrorId_NotSupported = 2,
  ChatError_ErrorId_ChatError_ErrorId_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChatError_ErrorId_ChatError_ErrorId_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChatError_ErrorId_IsValid(int value);
constexpr ChatError_ErrorId ChatError_ErrorId_ErrorId_MIN = static_cast<ChatError_ErrorId>(0);
constexpr ChatError_ErrorId ChatError_ErrorId_ErrorId_MAX = static_cast<ChatError_ErrorId>(2);
constexpr int ChatError_ErrorId_ErrorId_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ChatError_ErrorId_descriptor();
template <typename T>
const std::string& ChatError_ErrorId_Name(T value) {
  static_assert(std::is_same<T, ChatError_ErrorId>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorId_Name().");
  return ChatError_ErrorId_Name(static_cast<ChatError_ErrorId>(value));
}
template <>
inline const std::string& ChatError_ErrorId_Name(ChatError_ErrorId value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChatError_ErrorId_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ChatError_ErrorId_Parse(absl::string_view name, ChatError_ErrorId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatError_ErrorId>(
      ChatError_ErrorId_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChatError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.ChatError) */ {
 public:
  inline ChatError() : ChatError(nullptr) {}
  ~ChatError() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChatError(::google::protobuf::internal::ConstantInitialized);

  ChatError(const ChatError& from);
  ChatError(ChatError&& from) noexcept
    : ChatError() {
    *this = ::std::move(from);
  }

  inline ChatError& operator=(const ChatError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatError& operator=(ChatError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatError* internal_default_instance() {
    return reinterpret_cast<const ChatError*>(
               &_ChatError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatError& a, ChatError& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChatError& from) {
    ChatError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatError* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.ChatError";
  }
  protected:
  explicit ChatError(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ErrorId = ChatError_ErrorId;
  static constexpr ErrorId None = ChatError_ErrorId_None;
  static constexpr ErrorId InvalidIdentity = ChatError_ErrorId_InvalidIdentity;
  static constexpr ErrorId NotSupported = ChatError_ErrorId_NotSupported;
  static inline bool ErrorId_IsValid(int value) {
    return ChatError_ErrorId_IsValid(value);
  }
  static constexpr ErrorId ErrorId_MIN = ChatError_ErrorId_ErrorId_MIN;
  static constexpr ErrorId ErrorId_MAX = ChatError_ErrorId_ErrorId_MAX;
  static constexpr int ErrorId_ARRAYSIZE = ChatError_ErrorId_ErrorId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ErrorId_descriptor() {
    return ChatError_ErrorId_descriptor();
  }
  template <typename T>
  static inline const std::string& ErrorId_Name(T value) {
    return ChatError_ErrorId_Name(value);
  }
  static inline bool ErrorId_Parse(absl::string_view name, ErrorId* value) {
    return ChatError_ErrorId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorIdFieldNumber = 1,
  };
  // .prpc.ChatError.ErrorId error_id = 1;
  void clear_error_id() ;
  ::prpc::ChatError_ErrorId error_id() const;
  void set_error_id(::prpc::ChatError_ErrorId value);

  private:
  ::prpc::ChatError_ErrorId _internal_error_id() const;
  void _internal_set_error_id(::prpc::ChatError_ErrorId value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.ChatError)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int error_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class ChatUserInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.ChatUserInfo) */ {
 public:
  inline ChatUserInfo() : ChatUserInfo(nullptr) {}
  ~ChatUserInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChatUserInfo(::google::protobuf::internal::ConstantInitialized);

  ChatUserInfo(const ChatUserInfo& from);
  ChatUserInfo(ChatUserInfo&& from) noexcept
    : ChatUserInfo() {
    *this = ::std::move(from);
  }

  inline ChatUserInfo& operator=(const ChatUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatUserInfo& operator=(ChatUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatUserInfo* internal_default_instance() {
    return reinterpret_cast<const ChatUserInfo*>(
               &_ChatUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatUserInfo& a, ChatUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatUserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatUserInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatUserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatUserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChatUserInfo& from) {
    ChatUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatUserInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.ChatUserInfo";
  }
  protected:
  explicit ChatUserInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // int64 user_id = 1;
  void clear_user_id() ;
  ::int64_t user_id() const;
  void set_user_id(::int64_t value);

  private:
  ::int64_t _internal_user_id() const;
  void _internal_set_user_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.ChatUserInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 31, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::int64_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class QueryChatRoomServerReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.QueryChatRoomServerReq) */ {
 public:
  inline QueryChatRoomServerReq() : QueryChatRoomServerReq(nullptr) {}
  ~QueryChatRoomServerReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChatRoomServerReq(::google::protobuf::internal::ConstantInitialized);

  QueryChatRoomServerReq(const QueryChatRoomServerReq& from);
  QueryChatRoomServerReq(QueryChatRoomServerReq&& from) noexcept
    : QueryChatRoomServerReq() {
    *this = ::std::move(from);
  }

  inline QueryChatRoomServerReq& operator=(const QueryChatRoomServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChatRoomServerReq& operator=(QueryChatRoomServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChatRoomServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChatRoomServerReq* internal_default_instance() {
    return reinterpret_cast<const QueryChatRoomServerReq*>(
               &_QueryChatRoomServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryChatRoomServerReq& a, QueryChatRoomServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChatRoomServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChatRoomServerReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChatRoomServerReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChatRoomServerReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryChatRoomServerReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryChatRoomServerReq& from) {
    QueryChatRoomServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChatRoomServerReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.QueryChatRoomServerReq";
  }
  protected:
  explicit QueryChatRoomServerReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 1,
  };
  // string room_key = 1;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // @@protoc_insertion_point(class_scope:prpc.QueryChatRoomServerReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class QueryChatRoomServerRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.QueryChatRoomServerRes) */ {
 public:
  inline QueryChatRoomServerRes() : QueryChatRoomServerRes(nullptr) {}
  ~QueryChatRoomServerRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChatRoomServerRes(::google::protobuf::internal::ConstantInitialized);

  QueryChatRoomServerRes(const QueryChatRoomServerRes& from);
  QueryChatRoomServerRes(QueryChatRoomServerRes&& from) noexcept
    : QueryChatRoomServerRes() {
    *this = ::std::move(from);
  }

  inline QueryChatRoomServerRes& operator=(const QueryChatRoomServerRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChatRoomServerRes& operator=(QueryChatRoomServerRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChatRoomServerRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChatRoomServerRes* internal_default_instance() {
    return reinterpret_cast<const QueryChatRoomServerRes*>(
               &_QueryChatRoomServerRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryChatRoomServerRes& a, QueryChatRoomServerRes& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChatRoomServerRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChatRoomServerRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChatRoomServerRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChatRoomServerRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryChatRoomServerRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryChatRoomServerRes& from) {
    QueryChatRoomServerRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChatRoomServerRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.QueryChatRoomServerRes";
  }
  protected:
  explicit QueryChatRoomServerRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;

  public:
  void clear_addresses() ;
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, std::size_t size);
  void set_addresses(int index, absl::string_view value);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, std::size_t size);
  void add_addresses(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_addresses();

  public:
  // @@protoc_insertion_point(class_scope:prpc.QueryChatRoomServerRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> addresses_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class CreateChatRoomReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.CreateChatRoomReq) */ {
 public:
  inline CreateChatRoomReq() : CreateChatRoomReq(nullptr) {}
  ~CreateChatRoomReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateChatRoomReq(::google::protobuf::internal::ConstantInitialized);

  CreateChatRoomReq(const CreateChatRoomReq& from);
  CreateChatRoomReq(CreateChatRoomReq&& from) noexcept
    : CreateChatRoomReq() {
    *this = ::std::move(from);
  }

  inline CreateChatRoomReq& operator=(const CreateChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatRoomReq& operator=(CreateChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomReq*>(
               &_CreateChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateChatRoomReq& a, CreateChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatRoomReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChatRoomReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChatRoomReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateChatRoomReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateChatRoomReq& from) {
    CreateChatRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChatRoomReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.CreateChatRoomReq";
  }
  protected:
  explicit CreateChatRoomReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 2,
    kUserInfoFieldNumber = 1,
  };
  // string room_key = 2;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.CreateChatRoomReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class CreateChatRoomRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.CreateChatRoomRes) */ {
 public:
  inline CreateChatRoomRes() : CreateChatRoomRes(nullptr) {}
  ~CreateChatRoomRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateChatRoomRes(::google::protobuf::internal::ConstantInitialized);

  CreateChatRoomRes(const CreateChatRoomRes& from);
  CreateChatRoomRes(CreateChatRoomRes&& from) noexcept
    : CreateChatRoomRes() {
    *this = ::std::move(from);
  }

  inline CreateChatRoomRes& operator=(const CreateChatRoomRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatRoomRes& operator=(CreateChatRoomRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatRoomRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatRoomRes* internal_default_instance() {
    return reinterpret_cast<const CreateChatRoomRes*>(
               &_CreateChatRoomRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateChatRoomRes& a, CreateChatRoomRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatRoomRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatRoomRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChatRoomRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChatRoomRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateChatRoomRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateChatRoomRes& from) {
    CreateChatRoomRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChatRoomRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.CreateChatRoomRes";
  }
  protected:
  explicit CreateChatRoomRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .prpc.ChatError error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::prpc::ChatError& error() const;
  PROTOBUF_NODISCARD ::prpc::ChatError* release_error();
  ::prpc::ChatError* mutable_error();
  void set_allocated_error(::prpc::ChatError* value);
  void unsafe_arena_set_allocated_error(::prpc::ChatError* value);
  ::prpc::ChatError* unsafe_arena_release_error();

  private:
  const ::prpc::ChatError& _internal_error() const;
  ::prpc::ChatError* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:prpc.CreateChatRoomRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::prpc::ChatError* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class QueryChatRoomInfoReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.QueryChatRoomInfoReq) */ {
 public:
  inline QueryChatRoomInfoReq() : QueryChatRoomInfoReq(nullptr) {}
  ~QueryChatRoomInfoReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChatRoomInfoReq(::google::protobuf::internal::ConstantInitialized);

  QueryChatRoomInfoReq(const QueryChatRoomInfoReq& from);
  QueryChatRoomInfoReq(QueryChatRoomInfoReq&& from) noexcept
    : QueryChatRoomInfoReq() {
    *this = ::std::move(from);
  }

  inline QueryChatRoomInfoReq& operator=(const QueryChatRoomInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChatRoomInfoReq& operator=(QueryChatRoomInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChatRoomInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChatRoomInfoReq* internal_default_instance() {
    return reinterpret_cast<const QueryChatRoomInfoReq*>(
               &_QueryChatRoomInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryChatRoomInfoReq& a, QueryChatRoomInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChatRoomInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChatRoomInfoReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChatRoomInfoReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChatRoomInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryChatRoomInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryChatRoomInfoReq& from) {
    QueryChatRoomInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChatRoomInfoReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.QueryChatRoomInfoReq";
  }
  protected:
  explicit QueryChatRoomInfoReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 2,
    kUserInfoFieldNumber = 1,
  };
  // string room_key = 2;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.QueryChatRoomInfoReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class QueryChatRoomInfoRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.QueryChatRoomInfoRes) */ {
 public:
  inline QueryChatRoomInfoRes() : QueryChatRoomInfoRes(nullptr) {}
  ~QueryChatRoomInfoRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChatRoomInfoRes(::google::protobuf::internal::ConstantInitialized);

  QueryChatRoomInfoRes(const QueryChatRoomInfoRes& from);
  QueryChatRoomInfoRes(QueryChatRoomInfoRes&& from) noexcept
    : QueryChatRoomInfoRes() {
    *this = ::std::move(from);
  }

  inline QueryChatRoomInfoRes& operator=(const QueryChatRoomInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChatRoomInfoRes& operator=(QueryChatRoomInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChatRoomInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChatRoomInfoRes* internal_default_instance() {
    return reinterpret_cast<const QueryChatRoomInfoRes*>(
               &_QueryChatRoomInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryChatRoomInfoRes& a, QueryChatRoomInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChatRoomInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChatRoomInfoRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChatRoomInfoRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChatRoomInfoRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryChatRoomInfoRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QueryChatRoomInfoRes& from) {
    QueryChatRoomInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChatRoomInfoRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.QueryChatRoomInfoRes";
  }
  protected:
  explicit QueryChatRoomInfoRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .prpc.ChatError error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::prpc::ChatError& error() const;
  PROTOBUF_NODISCARD ::prpc::ChatError* release_error();
  ::prpc::ChatError* mutable_error();
  void set_allocated_error(::prpc::ChatError* value);
  void unsafe_arena_set_allocated_error(::prpc::ChatError* value);
  ::prpc::ChatError* unsafe_arena_release_error();

  private:
  const ::prpc::ChatError& _internal_error() const;
  ::prpc::ChatError* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:prpc.QueryChatRoomInfoRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::prpc::ChatError* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class JoinRoomReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.JoinRoomReq) */ {
 public:
  inline JoinRoomReq() : JoinRoomReq(nullptr) {}
  ~JoinRoomReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomReq(::google::protobuf::internal::ConstantInitialized);

  JoinRoomReq(const JoinRoomReq& from);
  JoinRoomReq(JoinRoomReq&& from) noexcept
    : JoinRoomReq() {
    *this = ::std::move(from);
  }

  inline JoinRoomReq& operator=(const JoinRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomReq& operator=(JoinRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomReq* internal_default_instance() {
    return reinterpret_cast<const JoinRoomReq*>(
               &_JoinRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JoinRoomReq& a, JoinRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinRoomReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JoinRoomReq& from) {
    JoinRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.JoinRoomReq";
  }
  protected:
  explicit JoinRoomReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 2,
    kUserInfoFieldNumber = 1,
  };
  // string room_key = 2;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.JoinRoomReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 33, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class JoinRoomRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.JoinRoomRes) */ {
 public:
  inline JoinRoomRes() : JoinRoomRes(nullptr) {}
  ~JoinRoomRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomRes(::google::protobuf::internal::ConstantInitialized);

  JoinRoomRes(const JoinRoomRes& from);
  JoinRoomRes(JoinRoomRes&& from) noexcept
    : JoinRoomRes() {
    *this = ::std::move(from);
  }

  inline JoinRoomRes& operator=(const JoinRoomRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRes& operator=(JoinRoomRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomRes* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRes*>(
               &_JoinRoomRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JoinRoomRes& a, JoinRoomRes& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinRoomRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JoinRoomRes& from) {
    JoinRoomRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.JoinRoomRes";
  }
  protected:
  explicit JoinRoomRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .prpc.ChatError error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::prpc::ChatError& error() const;
  PROTOBUF_NODISCARD ::prpc::ChatError* release_error();
  ::prpc::ChatError* mutable_error();
  void set_allocated_error(::prpc::ChatError* value);
  void unsafe_arena_set_allocated_error(::prpc::ChatError* value);
  ::prpc::ChatError* unsafe_arena_release_error();

  private:
  const ::prpc::ChatError& _internal_error() const;
  ::prpc::ChatError* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:prpc.JoinRoomRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::prpc::ChatError* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class LeaveRoomReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.LeaveRoomReq) */ {
 public:
  inline LeaveRoomReq() : LeaveRoomReq(nullptr) {}
  ~LeaveRoomReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveRoomReq(::google::protobuf::internal::ConstantInitialized);

  LeaveRoomReq(const LeaveRoomReq& from);
  LeaveRoomReq(LeaveRoomReq&& from) noexcept
    : LeaveRoomReq() {
    *this = ::std::move(from);
  }

  inline LeaveRoomReq& operator=(const LeaveRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRoomReq& operator=(LeaveRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveRoomReq* internal_default_instance() {
    return reinterpret_cast<const LeaveRoomReq*>(
               &_LeaveRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LeaveRoomReq& a, LeaveRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRoomReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveRoomReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveRoomReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LeaveRoomReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LeaveRoomReq& from) {
    LeaveRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRoomReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.LeaveRoomReq";
  }
  protected:
  explicit LeaveRoomReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 2,
    kUserInfoFieldNumber = 1,
  };
  // string room_key = 2;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.LeaveRoomReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class LeaveRoomRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.LeaveRoomRes) */ {
 public:
  inline LeaveRoomRes() : LeaveRoomRes(nullptr) {}
  ~LeaveRoomRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveRoomRes(::google::protobuf::internal::ConstantInitialized);

  LeaveRoomRes(const LeaveRoomRes& from);
  LeaveRoomRes(LeaveRoomRes&& from) noexcept
    : LeaveRoomRes() {
    *this = ::std::move(from);
  }

  inline LeaveRoomRes& operator=(const LeaveRoomRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRoomRes& operator=(LeaveRoomRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveRoomRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveRoomRes* internal_default_instance() {
    return reinterpret_cast<const LeaveRoomRes*>(
               &_LeaveRoomRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LeaveRoomRes& a, LeaveRoomRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRoomRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRoomRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveRoomRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveRoomRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LeaveRoomRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LeaveRoomRes& from) {
    LeaveRoomRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRoomRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.LeaveRoomRes";
  }
  protected:
  explicit LeaveRoomRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .prpc.ChatError error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::prpc::ChatError& error() const;
  PROTOBUF_NODISCARD ::prpc::ChatError* release_error();
  ::prpc::ChatError* mutable_error();
  void set_allocated_error(::prpc::ChatError* value);
  void unsafe_arena_set_allocated_error(::prpc::ChatError* value);
  ::prpc::ChatError* unsafe_arena_release_error();

  private:
  const ::prpc::ChatError& _internal_error() const;
  ::prpc::ChatError* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:prpc.LeaveRoomRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::prpc::ChatError* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class Send2ChatRoomReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.Send2ChatRoomReq) */ {
 public:
  inline Send2ChatRoomReq() : Send2ChatRoomReq(nullptr) {}
  ~Send2ChatRoomReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Send2ChatRoomReq(::google::protobuf::internal::ConstantInitialized);

  Send2ChatRoomReq(const Send2ChatRoomReq& from);
  Send2ChatRoomReq(Send2ChatRoomReq&& from) noexcept
    : Send2ChatRoomReq() {
    *this = ::std::move(from);
  }

  inline Send2ChatRoomReq& operator=(const Send2ChatRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Send2ChatRoomReq& operator=(Send2ChatRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Send2ChatRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Send2ChatRoomReq* internal_default_instance() {
    return reinterpret_cast<const Send2ChatRoomReq*>(
               &_Send2ChatRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Send2ChatRoomReq& a, Send2ChatRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Send2ChatRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Send2ChatRoomReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Send2ChatRoomReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Send2ChatRoomReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Send2ChatRoomReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Send2ChatRoomReq& from) {
    Send2ChatRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Send2ChatRoomReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.Send2ChatRoomReq";
  }
  protected:
  explicit Send2ChatRoomReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomKeyFieldNumber = 2,
    kMsgFieldNumber = 3,
    kUserInfoFieldNumber = 1,
  };
  // string room_key = 2;
  void clear_room_key() ;
  const std::string& room_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_key(Arg_&& arg, Args_... args);
  std::string* mutable_room_key();
  PROTOBUF_NODISCARD std::string* release_room_key();
  void set_allocated_room_key(std::string* ptr);

  private:
  const std::string& _internal_room_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_key(
      const std::string& value);
  std::string* _internal_mutable_room_key();

  public:
  // string msg = 3;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.Send2ChatRoomReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr room_key_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};// -------------------------------------------------------------------

class Send2ChatRoomRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prpc.Send2ChatRoomRes) */ {
 public:
  inline Send2ChatRoomRes() : Send2ChatRoomRes(nullptr) {}
  ~Send2ChatRoomRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Send2ChatRoomRes(::google::protobuf::internal::ConstantInitialized);

  Send2ChatRoomRes(const Send2ChatRoomRes& from);
  Send2ChatRoomRes(Send2ChatRoomRes&& from) noexcept
    : Send2ChatRoomRes() {
    *this = ::std::move(from);
  }

  inline Send2ChatRoomRes& operator=(const Send2ChatRoomRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Send2ChatRoomRes& operator=(Send2ChatRoomRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Send2ChatRoomRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Send2ChatRoomRes* internal_default_instance() {
    return reinterpret_cast<const Send2ChatRoomRes*>(
               &_Send2ChatRoomRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Send2ChatRoomRes& a, Send2ChatRoomRes& b) {
    a.Swap(&b);
  }
  inline void Swap(Send2ChatRoomRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Send2ChatRoomRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Send2ChatRoomRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Send2ChatRoomRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Send2ChatRoomRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Send2ChatRoomRes& from) {
    Send2ChatRoomRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Send2ChatRoomRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.Send2ChatRoomRes";
  }
  protected:
  explicit Send2ChatRoomRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 1,
  };
  // .prpc.ChatUserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::prpc::ChatUserInfo& user_info() const;
  PROTOBUF_NODISCARD ::prpc::ChatUserInfo* release_user_info();
  ::prpc::ChatUserInfo* mutable_user_info();
  void set_allocated_user_info(::prpc::ChatUserInfo* value);
  void unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value);
  ::prpc::ChatUserInfo* unsafe_arena_release_user_info();

  private:
  const ::prpc::ChatUserInfo& _internal_user_info() const;
  ::prpc::ChatUserInfo* _internal_mutable_user_info();

  public:
  // @@protoc_insertion_point(class_scope:prpc.Send2ChatRoomRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::prpc::ChatUserInfo* user_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChatError

// .prpc.ChatError.ErrorId error_id = 1;
inline void ChatError::clear_error_id() {
  _impl_.error_id_ = 0;
}
inline ::prpc::ChatError_ErrorId ChatError::error_id() const {
  // @@protoc_insertion_point(field_get:prpc.ChatError.error_id)
  return _internal_error_id();
}
inline void ChatError::set_error_id(::prpc::ChatError_ErrorId value) {
  _internal_set_error_id(value);
  // @@protoc_insertion_point(field_set:prpc.ChatError.error_id)
}
inline ::prpc::ChatError_ErrorId ChatError::_internal_error_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::prpc::ChatError_ErrorId>(_impl_.error_id_);
}
inline void ChatError::_internal_set_error_id(::prpc::ChatError_ErrorId value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_id_ = value;
}

// -------------------------------------------------------------------

// ChatUserInfo

// int64 user_id = 1;
inline void ChatUserInfo::clear_user_id() {
  _impl_.user_id_ = ::int64_t{0};
}
inline ::int64_t ChatUserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:prpc.ChatUserInfo.user_id)
  return _internal_user_id();
}
inline void ChatUserInfo::set_user_id(::int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:prpc.ChatUserInfo.user_id)
}
inline ::int64_t ChatUserInfo::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void ChatUserInfo::_internal_set_user_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string token = 2;
inline void ChatUserInfo::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ChatUserInfo::token() const {
  // @@protoc_insertion_point(field_get:prpc.ChatUserInfo.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatUserInfo::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.ChatUserInfo.token)
}
inline std::string* ChatUserInfo::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:prpc.ChatUserInfo.token)
  return _s;
}
inline const std::string& ChatUserInfo::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void ChatUserInfo::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatUserInfo::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* ChatUserInfo::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.ChatUserInfo.token)
  return _impl_.token_.Release();
}
inline void ChatUserInfo::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.ChatUserInfo.token)
}

// -------------------------------------------------------------------

// QueryChatRoomServerReq

// string room_key = 1;
inline void QueryChatRoomServerReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& QueryChatRoomServerReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.QueryChatRoomServerReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChatRoomServerReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.QueryChatRoomServerReq.room_key)
}
inline std::string* QueryChatRoomServerReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.QueryChatRoomServerReq.room_key)
  return _s;
}
inline const std::string& QueryChatRoomServerReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void QueryChatRoomServerReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChatRoomServerReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChatRoomServerReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.QueryChatRoomServerReq.room_key)
  return _impl_.room_key_.Release();
}
inline void QueryChatRoomServerReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.QueryChatRoomServerReq.room_key)
}

// -------------------------------------------------------------------

// QueryChatRoomServerRes

// repeated string addresses = 1;
inline int QueryChatRoomServerRes::_internal_addresses_size() const {
  return _internal_addresses().size();
}
inline int QueryChatRoomServerRes::addresses_size() const {
  return _internal_addresses_size();
}
inline void QueryChatRoomServerRes::clear_addresses() {
  _internal_mutable_addresses()->Clear();
}
inline std::string* QueryChatRoomServerRes::add_addresses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:prpc.QueryChatRoomServerRes.addresses)
  return _s;
}
inline const std::string& QueryChatRoomServerRes::addresses(int index) const {
  // @@protoc_insertion_point(field_get:prpc.QueryChatRoomServerRes.addresses)
  return _internal_addresses().Get(index);
}
inline std::string* QueryChatRoomServerRes::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:prpc.QueryChatRoomServerRes.addresses)
  return _internal_mutable_addresses()->Mutable(index);
}
inline void QueryChatRoomServerRes::set_addresses(int index, const std::string& value) {
  _internal_mutable_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::set_addresses(int index, std::string&& value) {
  _internal_mutable_addresses()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::set_addresses(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_addresses()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::set_addresses(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_addresses()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::set_addresses(int index, absl::string_view value) {
  _internal_mutable_addresses()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::add_addresses(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::add_addresses(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_addresses()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::add_addresses(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_addresses()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::add_addresses(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_addresses()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prpc.QueryChatRoomServerRes.addresses)
}
inline void QueryChatRoomServerRes::add_addresses(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_addresses()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:prpc.QueryChatRoomServerRes.addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryChatRoomServerRes::addresses() const {
  // @@protoc_insertion_point(field_list:prpc.QueryChatRoomServerRes.addresses)
  return _internal_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* QueryChatRoomServerRes::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:prpc.QueryChatRoomServerRes.addresses)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryChatRoomServerRes::_internal_addresses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryChatRoomServerRes::_internal_mutable_addresses() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.addresses_;
}

// -------------------------------------------------------------------

// CreateChatRoomReq

// .prpc.ChatUserInfo user_info = 1;
inline bool CreateChatRoomReq::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void CreateChatRoomReq::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& CreateChatRoomReq::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& CreateChatRoomReq::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.CreateChatRoomReq.user_info)
  return _internal_user_info();
}
inline void CreateChatRoomReq::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.CreateChatRoomReq.user_info)
}
inline ::prpc::ChatUserInfo* CreateChatRoomReq::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* CreateChatRoomReq::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.CreateChatRoomReq.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* CreateChatRoomReq::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* CreateChatRoomReq::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.CreateChatRoomReq.user_info)
  return _msg;
}
inline void CreateChatRoomReq::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.CreateChatRoomReq.user_info)
}

// string room_key = 2;
inline void CreateChatRoomReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& CreateChatRoomReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.CreateChatRoomReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateChatRoomReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.CreateChatRoomReq.room_key)
}
inline std::string* CreateChatRoomReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.CreateChatRoomReq.room_key)
  return _s;
}
inline const std::string& CreateChatRoomReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void CreateChatRoomReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateChatRoomReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateChatRoomReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.CreateChatRoomReq.room_key)
  return _impl_.room_key_.Release();
}
inline void CreateChatRoomReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.CreateChatRoomReq.room_key)
}

// -------------------------------------------------------------------

// CreateChatRoomRes

// .prpc.ChatError error = 1;
inline bool CreateChatRoomRes::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void CreateChatRoomRes::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatError& CreateChatRoomRes::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatError&>(::prpc::_ChatError_default_instance_);
}
inline const ::prpc::ChatError& CreateChatRoomRes::error() const {
  // @@protoc_insertion_point(field_get:prpc.CreateChatRoomRes.error)
  return _internal_error();
}
inline void CreateChatRoomRes::unsafe_arena_set_allocated_error(::prpc::ChatError* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.CreateChatRoomRes.error)
}
inline ::prpc::ChatError* CreateChatRoomRes::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatError* CreateChatRoomRes::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.CreateChatRoomRes.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::prpc::ChatError* CreateChatRoomRes::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatError>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(p);
  }
  return _impl_.error_;
}
inline ::prpc::ChatError* CreateChatRoomRes::mutable_error() {
  ::prpc::ChatError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:prpc.CreateChatRoomRes.error)
  return _msg;
}
inline void CreateChatRoomRes::set_allocated_error(::prpc::ChatError* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatError*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatError*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.CreateChatRoomRes.error)
}

// -------------------------------------------------------------------

// QueryChatRoomInfoReq

// .prpc.ChatUserInfo user_info = 1;
inline bool QueryChatRoomInfoReq::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void QueryChatRoomInfoReq::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& QueryChatRoomInfoReq::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& QueryChatRoomInfoReq::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.QueryChatRoomInfoReq.user_info)
  return _internal_user_info();
}
inline void QueryChatRoomInfoReq::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.QueryChatRoomInfoReq.user_info)
}
inline ::prpc::ChatUserInfo* QueryChatRoomInfoReq::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* QueryChatRoomInfoReq::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.QueryChatRoomInfoReq.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* QueryChatRoomInfoReq::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* QueryChatRoomInfoReq::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.QueryChatRoomInfoReq.user_info)
  return _msg;
}
inline void QueryChatRoomInfoReq::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.QueryChatRoomInfoReq.user_info)
}

// string room_key = 2;
inline void QueryChatRoomInfoReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& QueryChatRoomInfoReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.QueryChatRoomInfoReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChatRoomInfoReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.QueryChatRoomInfoReq.room_key)
}
inline std::string* QueryChatRoomInfoReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.QueryChatRoomInfoReq.room_key)
  return _s;
}
inline const std::string& QueryChatRoomInfoReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void QueryChatRoomInfoReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChatRoomInfoReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChatRoomInfoReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.QueryChatRoomInfoReq.room_key)
  return _impl_.room_key_.Release();
}
inline void QueryChatRoomInfoReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.QueryChatRoomInfoReq.room_key)
}

// -------------------------------------------------------------------

// QueryChatRoomInfoRes

// .prpc.ChatError error = 1;
inline bool QueryChatRoomInfoRes::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void QueryChatRoomInfoRes::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatError& QueryChatRoomInfoRes::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatError&>(::prpc::_ChatError_default_instance_);
}
inline const ::prpc::ChatError& QueryChatRoomInfoRes::error() const {
  // @@protoc_insertion_point(field_get:prpc.QueryChatRoomInfoRes.error)
  return _internal_error();
}
inline void QueryChatRoomInfoRes::unsafe_arena_set_allocated_error(::prpc::ChatError* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.QueryChatRoomInfoRes.error)
}
inline ::prpc::ChatError* QueryChatRoomInfoRes::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatError* QueryChatRoomInfoRes::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.QueryChatRoomInfoRes.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::prpc::ChatError* QueryChatRoomInfoRes::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatError>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(p);
  }
  return _impl_.error_;
}
inline ::prpc::ChatError* QueryChatRoomInfoRes::mutable_error() {
  ::prpc::ChatError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:prpc.QueryChatRoomInfoRes.error)
  return _msg;
}
inline void QueryChatRoomInfoRes::set_allocated_error(::prpc::ChatError* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatError*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatError*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.QueryChatRoomInfoRes.error)
}

// -------------------------------------------------------------------

// JoinRoomReq

// .prpc.ChatUserInfo user_info = 1;
inline bool JoinRoomReq::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void JoinRoomReq::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& JoinRoomReq::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& JoinRoomReq::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.JoinRoomReq.user_info)
  return _internal_user_info();
}
inline void JoinRoomReq::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.JoinRoomReq.user_info)
}
inline ::prpc::ChatUserInfo* JoinRoomReq::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* JoinRoomReq::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.JoinRoomReq.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* JoinRoomReq::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* JoinRoomReq::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.JoinRoomReq.user_info)
  return _msg;
}
inline void JoinRoomReq::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.JoinRoomReq.user_info)
}

// string room_key = 2;
inline void JoinRoomReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& JoinRoomReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.JoinRoomReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.JoinRoomReq.room_key)
}
inline std::string* JoinRoomReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.JoinRoomReq.room_key)
  return _s;
}
inline const std::string& JoinRoomReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void JoinRoomReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRoomReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* JoinRoomReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.JoinRoomReq.room_key)
  return _impl_.room_key_.Release();
}
inline void JoinRoomReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.JoinRoomReq.room_key)
}

// -------------------------------------------------------------------

// JoinRoomRes

// .prpc.ChatError error = 1;
inline bool JoinRoomRes::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void JoinRoomRes::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatError& JoinRoomRes::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatError&>(::prpc::_ChatError_default_instance_);
}
inline const ::prpc::ChatError& JoinRoomRes::error() const {
  // @@protoc_insertion_point(field_get:prpc.JoinRoomRes.error)
  return _internal_error();
}
inline void JoinRoomRes::unsafe_arena_set_allocated_error(::prpc::ChatError* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.JoinRoomRes.error)
}
inline ::prpc::ChatError* JoinRoomRes::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatError* JoinRoomRes::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.JoinRoomRes.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::prpc::ChatError* JoinRoomRes::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatError>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(p);
  }
  return _impl_.error_;
}
inline ::prpc::ChatError* JoinRoomRes::mutable_error() {
  ::prpc::ChatError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:prpc.JoinRoomRes.error)
  return _msg;
}
inline void JoinRoomRes::set_allocated_error(::prpc::ChatError* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatError*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatError*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.JoinRoomRes.error)
}

// -------------------------------------------------------------------

// LeaveRoomReq

// .prpc.ChatUserInfo user_info = 1;
inline bool LeaveRoomReq::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void LeaveRoomReq::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& LeaveRoomReq::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& LeaveRoomReq::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.LeaveRoomReq.user_info)
  return _internal_user_info();
}
inline void LeaveRoomReq::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.LeaveRoomReq.user_info)
}
inline ::prpc::ChatUserInfo* LeaveRoomReq::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* LeaveRoomReq::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.LeaveRoomReq.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* LeaveRoomReq::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* LeaveRoomReq::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.LeaveRoomReq.user_info)
  return _msg;
}
inline void LeaveRoomReq::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.LeaveRoomReq.user_info)
}

// string room_key = 2;
inline void LeaveRoomReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& LeaveRoomReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.LeaveRoomReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveRoomReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.LeaveRoomReq.room_key)
}
inline std::string* LeaveRoomReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.LeaveRoomReq.room_key)
  return _s;
}
inline const std::string& LeaveRoomReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void LeaveRoomReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveRoomReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* LeaveRoomReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.LeaveRoomReq.room_key)
  return _impl_.room_key_.Release();
}
inline void LeaveRoomReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.LeaveRoomReq.room_key)
}

// -------------------------------------------------------------------

// LeaveRoomRes

// .prpc.ChatError error = 1;
inline bool LeaveRoomRes::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void LeaveRoomRes::clear_error() {
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatError& LeaveRoomRes::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatError&>(::prpc::_ChatError_default_instance_);
}
inline const ::prpc::ChatError& LeaveRoomRes::error() const {
  // @@protoc_insertion_point(field_get:prpc.LeaveRoomRes.error)
  return _internal_error();
}
inline void LeaveRoomRes::unsafe_arena_set_allocated_error(::prpc::ChatError* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.LeaveRoomRes.error)
}
inline ::prpc::ChatError* LeaveRoomRes::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatError* LeaveRoomRes::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.LeaveRoomRes.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::prpc::ChatError* LeaveRoomRes::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatError>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(p);
  }
  return _impl_.error_;
}
inline ::prpc::ChatError* LeaveRoomRes::mutable_error() {
  ::prpc::ChatError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:prpc.LeaveRoomRes.error)
  return _msg;
}
inline void LeaveRoomRes::set_allocated_error(::prpc::ChatError* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatError*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatError*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::prpc::ChatError*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.LeaveRoomRes.error)
}

// -------------------------------------------------------------------

// Send2ChatRoomReq

// .prpc.ChatUserInfo user_info = 1;
inline bool Send2ChatRoomReq::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void Send2ChatRoomReq::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& Send2ChatRoomReq::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& Send2ChatRoomReq::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.Send2ChatRoomReq.user_info)
  return _internal_user_info();
}
inline void Send2ChatRoomReq::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.Send2ChatRoomReq.user_info)
}
inline ::prpc::ChatUserInfo* Send2ChatRoomReq::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomReq::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.Send2ChatRoomReq.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomReq::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomReq::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.Send2ChatRoomReq.user_info)
  return _msg;
}
inline void Send2ChatRoomReq::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.Send2ChatRoomReq.user_info)
}

// string room_key = 2;
inline void Send2ChatRoomReq::clear_room_key() {
  _impl_.room_key_.ClearToEmpty();
}
inline const std::string& Send2ChatRoomReq::room_key() const {
  // @@protoc_insertion_point(field_get:prpc.Send2ChatRoomReq.room_key)
  return _internal_room_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Send2ChatRoomReq::set_room_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.Send2ChatRoomReq.room_key)
}
inline std::string* Send2ChatRoomReq::mutable_room_key() {
  std::string* _s = _internal_mutable_room_key();
  // @@protoc_insertion_point(field_mutable:prpc.Send2ChatRoomReq.room_key)
  return _s;
}
inline const std::string& Send2ChatRoomReq::_internal_room_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.room_key_.Get();
}
inline void Send2ChatRoomReq::_internal_set_room_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.room_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Send2ChatRoomReq::_internal_mutable_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.room_key_.Mutable( GetArenaForAllocation());
}
inline std::string* Send2ChatRoomReq::release_room_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.Send2ChatRoomReq.room_key)
  return _impl_.room_key_.Release();
}
inline void Send2ChatRoomReq::set_allocated_room_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.room_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_key_.IsDefault()) {
          _impl_.room_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.Send2ChatRoomReq.room_key)
}

// string msg = 3;
inline void Send2ChatRoomReq::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Send2ChatRoomReq::msg() const {
  // @@protoc_insertion_point(field_get:prpc.Send2ChatRoomReq.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Send2ChatRoomReq::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.Send2ChatRoomReq.msg)
}
inline std::string* Send2ChatRoomReq::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:prpc.Send2ChatRoomReq.msg)
  return _s;
}
inline const std::string& Send2ChatRoomReq::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void Send2ChatRoomReq::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Send2ChatRoomReq::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* Send2ChatRoomReq::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.Send2ChatRoomReq.msg)
  return _impl_.msg_.Release();
}
inline void Send2ChatRoomReq::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.Send2ChatRoomReq.msg)
}

// -------------------------------------------------------------------

// Send2ChatRoomRes

// .prpc.ChatUserInfo user_info = 1;
inline bool Send2ChatRoomRes::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline void Send2ChatRoomRes::clear_user_info() {
  if (_impl_.user_info_ != nullptr) _impl_.user_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::prpc::ChatUserInfo& Send2ChatRoomRes::_internal_user_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::prpc::ChatUserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::ChatUserInfo&>(::prpc::_ChatUserInfo_default_instance_);
}
inline const ::prpc::ChatUserInfo& Send2ChatRoomRes::user_info() const {
  // @@protoc_insertion_point(field_get:prpc.Send2ChatRoomRes.user_info)
  return _internal_user_info();
}
inline void Send2ChatRoomRes::unsafe_arena_set_allocated_user_info(::prpc::ChatUserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.Send2ChatRoomRes.user_info)
}
inline ::prpc::ChatUserInfo* Send2ChatRoomRes::release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomRes::unsafe_arena_release_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:prpc.Send2ChatRoomRes.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prpc::ChatUserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomRes::_internal_mutable_user_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::ChatUserInfo>(GetArenaForAllocation());
    _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::prpc::ChatUserInfo* Send2ChatRoomRes::mutable_user_info() {
  ::prpc::ChatUserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:prpc.Send2ChatRoomRes.user_info)
  return _msg;
}
inline void Send2ChatRoomRes::set_allocated_user_info(::prpc::ChatUserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::prpc::ChatUserInfo*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::prpc::ChatUserInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::prpc::ChatUserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:prpc.Send2ChatRoomRes.user_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::prpc::ChatError_ErrorId> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::prpc::ChatError_ErrorId>() {
  return ::prpc::ChatError_ErrorId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_chat_2eproto_2epb_2eh
