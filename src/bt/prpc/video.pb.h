// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_video_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_video_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_video_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_video_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_video_2eproto;
namespace prpc {
class Video;
struct VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
class VideoFormat;
struct VideoFormatDefaultTypeInternal;
extern VideoFormatDefaultTypeInternal _VideoFormat_default_instance_;
class VideoMetadata;
struct VideoMetadataDefaultTypeInternal;
extern VideoMetadataDefaultTypeInternal _VideoMetadata_default_instance_;
class VideoStream;
struct VideoStreamDefaultTypeInternal;
extern VideoStreamDefaultTypeInternal _VideoStream_default_instance_;
}  // namespace prpc
PROTOBUF_NAMESPACE_OPEN
template <>
::prpc::Video* Arena::CreateMaybeMessage<::prpc::Video>(Arena*);
template <>
::prpc::VideoFormat* Arena::CreateMaybeMessage<::prpc::VideoFormat>(Arena*);
template <>
::prpc::VideoMetadata* Arena::CreateMaybeMessage<::prpc::VideoMetadata>(Arena*);
template <>
::prpc::VideoStream* Arena::CreateMaybeMessage<::prpc::VideoStream>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace prpc {

// ===================================================================


// -------------------------------------------------------------------

class VideoStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prpc.VideoStream) */ {
 public:
  inline VideoStream() : VideoStream(nullptr) {}
  ~VideoStream() override;
  explicit PROTOBUF_CONSTEXPR VideoStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoStream(const VideoStream& from);
  VideoStream(VideoStream&& from) noexcept
    : VideoStream() {
    *this = ::std::move(from);
  }

  inline VideoStream& operator=(const VideoStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStream& operator=(VideoStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoStream* internal_default_instance() {
    return reinterpret_cast<const VideoStream*>(
               &_VideoStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoStream& a, VideoStream& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoStream& from) {
    VideoStream::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.VideoStream";
  }
  protected:
  explicit VideoStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecNameFieldNumber = 2,
    kCodecLongNameFieldNumber = 3,
    kProfileFieldNumber = 4,
    kCodecTypeFieldNumber = 5,
    kRFrameRateFieldNumber = 9,
    kIndexFieldNumber = 1,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
  };
  // string codec_name = 2;
  void clear_codec_name() ;
  const std::string& codec_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codec_name(Arg_&& arg, Args_... args);
  std::string* mutable_codec_name();
  PROTOBUF_NODISCARD std::string* release_codec_name();
  void set_allocated_codec_name(std::string* ptr);

  private:
  const std::string& _internal_codec_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec_name(
      const std::string& value);
  std::string* _internal_mutable_codec_name();

  public:
  // string codec_long_name = 3;
  void clear_codec_long_name() ;
  const std::string& codec_long_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codec_long_name(Arg_&& arg, Args_... args);
  std::string* mutable_codec_long_name();
  PROTOBUF_NODISCARD std::string* release_codec_long_name();
  void set_allocated_codec_long_name(std::string* ptr);

  private:
  const std::string& _internal_codec_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec_long_name(
      const std::string& value);
  std::string* _internal_mutable_codec_long_name();

  public:
  // string profile = 4;
  void clear_profile() ;
  const std::string& profile() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profile(Arg_&& arg, Args_... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* ptr);

  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(
      const std::string& value);
  std::string* _internal_mutable_profile();

  public:
  // string codec_type = 5;
  void clear_codec_type() ;
  const std::string& codec_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codec_type(Arg_&& arg, Args_... args);
  std::string* mutable_codec_type();
  PROTOBUF_NODISCARD std::string* release_codec_type();
  void set_allocated_codec_type(std::string* ptr);

  private:
  const std::string& _internal_codec_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec_type(
      const std::string& value);
  std::string* _internal_mutable_codec_type();

  public:
  // string r_frame_rate = 9;
  void clear_r_frame_rate() ;
  const std::string& r_frame_rate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_r_frame_rate(Arg_&& arg, Args_... args);
  std::string* mutable_r_frame_rate();
  PROTOBUF_NODISCARD std::string* release_r_frame_rate();
  void set_allocated_r_frame_rate(std::string* ptr);

  private:
  const std::string& _internal_r_frame_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r_frame_rate(
      const std::string& value);
  std::string* _internal_mutable_r_frame_rate();

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 width = 6;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 7;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.VideoStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_long_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_frame_rate_;
    ::int32_t index_;
    ::int32_t width_;
    ::int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_video_2eproto;
};// -------------------------------------------------------------------

class VideoFormat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prpc.VideoFormat) */ {
 public:
  inline VideoFormat() : VideoFormat(nullptr) {}
  ~VideoFormat() override;
  explicit PROTOBUF_CONSTEXPR VideoFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoFormat(const VideoFormat& from);
  VideoFormat(VideoFormat&& from) noexcept
    : VideoFormat() {
    *this = ::std::move(from);
  }

  inline VideoFormat& operator=(const VideoFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFormat& operator=(VideoFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoFormat* internal_default_instance() {
    return reinterpret_cast<const VideoFormat*>(
               &_VideoFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VideoFormat& a, VideoFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFormat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFormat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoFormat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoFormat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoFormat& from) {
    VideoFormat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFormat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.VideoFormat";
  }
  protected:
  explicit VideoFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFormatNameFieldNumber = 3,
    kFormatLongNameFieldNumber = 4,
    kStartTimeFieldNumber = 5,
    kDurationFieldNumber = 6,
    kSizeFieldNumber = 7,
    kBitRateFieldNumber = 8,
    kNbStreamsFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* ptr);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // string format_name = 3;
  void clear_format_name() ;
  const std::string& format_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format_name(Arg_&& arg, Args_... args);
  std::string* mutable_format_name();
  PROTOBUF_NODISCARD std::string* release_format_name();
  void set_allocated_format_name(std::string* ptr);

  private:
  const std::string& _internal_format_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format_name(
      const std::string& value);
  std::string* _internal_mutable_format_name();

  public:
  // string format_long_name = 4;
  void clear_format_long_name() ;
  const std::string& format_long_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format_long_name(Arg_&& arg, Args_... args);
  std::string* mutable_format_long_name();
  PROTOBUF_NODISCARD std::string* release_format_long_name();
  void set_allocated_format_long_name(std::string* ptr);

  private:
  const std::string& _internal_format_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format_long_name(
      const std::string& value);
  std::string* _internal_mutable_format_long_name();

  public:
  // string start_time = 5;
  void clear_start_time() ;
  const std::string& start_time() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* ptr);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string duration = 6;
  void clear_duration() ;
  const std::string& duration() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_duration(Arg_&& arg, Args_... args);
  std::string* mutable_duration();
  PROTOBUF_NODISCARD std::string* release_duration();
  void set_allocated_duration(std::string* ptr);

  private:
  const std::string& _internal_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration(
      const std::string& value);
  std::string* _internal_mutable_duration();

  public:
  // string size = 7;
  void clear_size() ;
  const std::string& size() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_size(Arg_&& arg, Args_... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* ptr);

  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(
      const std::string& value);
  std::string* _internal_mutable_size();

  public:
  // string bit_rate = 8;
  void clear_bit_rate() ;
  const std::string& bit_rate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bit_rate(Arg_&& arg, Args_... args);
  std::string* mutable_bit_rate();
  PROTOBUF_NODISCARD std::string* release_bit_rate();
  void set_allocated_bit_rate(std::string* ptr);

  private:
  const std::string& _internal_bit_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bit_rate(
      const std::string& value);
  std::string* _internal_mutable_bit_rate();

  public:
  // int32 nb_streams = 2;
  void clear_nb_streams() ;
  ::int32_t nb_streams() const;
  void set_nb_streams(::int32_t value);

  private:
  ::int32_t _internal_nb_streams() const;
  void _internal_set_nb_streams(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.VideoFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_long_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bit_rate_;
    ::int32_t nb_streams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_video_2eproto;
};// -------------------------------------------------------------------

class VideoMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prpc.VideoMetadata) */ {
 public:
  inline VideoMetadata() : VideoMetadata(nullptr) {}
  ~VideoMetadata() override;
  explicit PROTOBUF_CONSTEXPR VideoMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoMetadata(const VideoMetadata& from);
  VideoMetadata(VideoMetadata&& from) noexcept
    : VideoMetadata() {
    *this = ::std::move(from);
  }

  inline VideoMetadata& operator=(const VideoMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMetadata& operator=(VideoMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoMetadata* internal_default_instance() {
    return reinterpret_cast<const VideoMetadata*>(
               &_VideoMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoMetadata& a, VideoMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoMetadata& from) {
    VideoMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.VideoMetadata";
  }
  protected:
  explicit VideoMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // repeated .prpc.VideoStream streams = 1;
  int streams_size() const;
  private:
  int _internal_streams_size() const;

  public:
  void clear_streams() ;
  ::prpc::VideoStream* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prpc::VideoStream >*
      mutable_streams();
  private:
  const ::prpc::VideoStream& _internal_streams(int index) const;
  ::prpc::VideoStream* _internal_add_streams();
  public:
  const ::prpc::VideoStream& streams(int index) const;
  ::prpc::VideoStream* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prpc::VideoStream >&
      streams() const;
  // .prpc.VideoFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;

  public:
  void clear_format() ;
  const ::prpc::VideoFormat& format() const;
  PROTOBUF_NODISCARD ::prpc::VideoFormat* release_format();
  ::prpc::VideoFormat* mutable_format();
  void set_allocated_format(::prpc::VideoFormat* format);
  private:
  const ::prpc::VideoFormat& _internal_format() const;
  ::prpc::VideoFormat* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::prpc::VideoFormat* format);
  ::prpc::VideoFormat* unsafe_arena_release_format();
  // @@protoc_insertion_point(class_scope:prpc.VideoMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prpc::VideoStream > streams_;
    ::prpc::VideoFormat* format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_video_2eproto;
};// -------------------------------------------------------------------

class Video final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prpc.Video) */ {
 public:
  inline Video() : Video(nullptr) {}
  ~Video() override;
  explicit PROTOBUF_CONSTEXPR Video(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Video& default_instance() {
    return *internal_default_instance();
  }
  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Video* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Video& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Video& from) {
    Video::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "prpc.Video";
  }
  protected:
  explicit Video(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIntroduceFieldNumber = 3,
    kPosterPathFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string introduce = 3;
  void clear_introduce() ;
  const std::string& introduce() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_introduce(Arg_&& arg, Args_... args);
  std::string* mutable_introduce();
  PROTOBUF_NODISCARD std::string* release_introduce();
  void set_allocated_introduce(std::string* ptr);

  private:
  const std::string& _internal_introduce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_introduce(
      const std::string& value);
  std::string* _internal_mutable_introduce();

  public:
  // string poster_path = 4;
  void clear_poster_path() ;
  const std::string& poster_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_poster_path(Arg_&& arg, Args_... args);
  std::string* mutable_poster_path();
  PROTOBUF_NODISCARD std::string* release_poster_path();
  void set_allocated_poster_path(std::string* ptr);

  private:
  const std::string& _internal_poster_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poster_path(
      const std::string& value);
  std::string* _internal_mutable_poster_path();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:prpc.Video)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introduce_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poster_path_;
    ::int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_video_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VideoStream

// int32 index = 1;
inline void VideoStream::clear_index() {
  _impl_.index_ = 0;
}
inline ::int32_t VideoStream::index() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.index)
  return _internal_index();
}
inline void VideoStream::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:prpc.VideoStream.index)
}
inline ::int32_t VideoStream::_internal_index() const {
  return _impl_.index_;
}
inline void VideoStream::_internal_set_index(::int32_t value) {
  ;
  _impl_.index_ = value;
}

// string codec_name = 2;
inline void VideoStream::clear_codec_name() {
  _impl_.codec_name_.ClearToEmpty();
}
inline const std::string& VideoStream::codec_name() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.codec_name)
  return _internal_codec_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoStream::set_codec_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.codec_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoStream.codec_name)
}
inline std::string* VideoStream::mutable_codec_name() {
  std::string* _s = _internal_mutable_codec_name();
  // @@protoc_insertion_point(field_mutable:prpc.VideoStream.codec_name)
  return _s;
}
inline const std::string& VideoStream::_internal_codec_name() const {
  return _impl_.codec_name_.Get();
}
inline void VideoStream::_internal_set_codec_name(const std::string& value) {
  ;


  _impl_.codec_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStream::_internal_mutable_codec_name() {
  ;
  return _impl_.codec_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoStream::release_codec_name() {
  // @@protoc_insertion_point(field_release:prpc.VideoStream.codec_name)
  return _impl_.codec_name_.Release();
}
inline void VideoStream::set_allocated_codec_name(std::string* value) {
  _impl_.codec_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.codec_name_.IsDefault()) {
          _impl_.codec_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoStream.codec_name)
}

// string codec_long_name = 3;
inline void VideoStream::clear_codec_long_name() {
  _impl_.codec_long_name_.ClearToEmpty();
}
inline const std::string& VideoStream::codec_long_name() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.codec_long_name)
  return _internal_codec_long_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoStream::set_codec_long_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.codec_long_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoStream.codec_long_name)
}
inline std::string* VideoStream::mutable_codec_long_name() {
  std::string* _s = _internal_mutable_codec_long_name();
  // @@protoc_insertion_point(field_mutable:prpc.VideoStream.codec_long_name)
  return _s;
}
inline const std::string& VideoStream::_internal_codec_long_name() const {
  return _impl_.codec_long_name_.Get();
}
inline void VideoStream::_internal_set_codec_long_name(const std::string& value) {
  ;


  _impl_.codec_long_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStream::_internal_mutable_codec_long_name() {
  ;
  return _impl_.codec_long_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoStream::release_codec_long_name() {
  // @@protoc_insertion_point(field_release:prpc.VideoStream.codec_long_name)
  return _impl_.codec_long_name_.Release();
}
inline void VideoStream::set_allocated_codec_long_name(std::string* value) {
  _impl_.codec_long_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.codec_long_name_.IsDefault()) {
          _impl_.codec_long_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoStream.codec_long_name)
}

// string profile = 4;
inline void VideoStream::clear_profile() {
  _impl_.profile_.ClearToEmpty();
}
inline const std::string& VideoStream::profile() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.profile)
  return _internal_profile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoStream::set_profile(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.profile_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoStream.profile)
}
inline std::string* VideoStream::mutable_profile() {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:prpc.VideoStream.profile)
  return _s;
}
inline const std::string& VideoStream::_internal_profile() const {
  return _impl_.profile_.Get();
}
inline void VideoStream::_internal_set_profile(const std::string& value) {
  ;


  _impl_.profile_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStream::_internal_mutable_profile() {
  ;
  return _impl_.profile_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoStream::release_profile() {
  // @@protoc_insertion_point(field_release:prpc.VideoStream.profile)
  return _impl_.profile_.Release();
}
inline void VideoStream::set_allocated_profile(std::string* value) {
  _impl_.profile_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profile_.IsDefault()) {
          _impl_.profile_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoStream.profile)
}

// string codec_type = 5;
inline void VideoStream::clear_codec_type() {
  _impl_.codec_type_.ClearToEmpty();
}
inline const std::string& VideoStream::codec_type() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.codec_type)
  return _internal_codec_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoStream::set_codec_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.codec_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoStream.codec_type)
}
inline std::string* VideoStream::mutable_codec_type() {
  std::string* _s = _internal_mutable_codec_type();
  // @@protoc_insertion_point(field_mutable:prpc.VideoStream.codec_type)
  return _s;
}
inline const std::string& VideoStream::_internal_codec_type() const {
  return _impl_.codec_type_.Get();
}
inline void VideoStream::_internal_set_codec_type(const std::string& value) {
  ;


  _impl_.codec_type_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStream::_internal_mutable_codec_type() {
  ;
  return _impl_.codec_type_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoStream::release_codec_type() {
  // @@protoc_insertion_point(field_release:prpc.VideoStream.codec_type)
  return _impl_.codec_type_.Release();
}
inline void VideoStream::set_allocated_codec_type(std::string* value) {
  _impl_.codec_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.codec_type_.IsDefault()) {
          _impl_.codec_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoStream.codec_type)
}

// int32 width = 6;
inline void VideoStream::clear_width() {
  _impl_.width_ = 0;
}
inline ::int32_t VideoStream::width() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.width)
  return _internal_width();
}
inline void VideoStream::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:prpc.VideoStream.width)
}
inline ::int32_t VideoStream::_internal_width() const {
  return _impl_.width_;
}
inline void VideoStream::_internal_set_width(::int32_t value) {
  ;
  _impl_.width_ = value;
}

// int32 height = 7;
inline void VideoStream::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t VideoStream::height() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.height)
  return _internal_height();
}
inline void VideoStream::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:prpc.VideoStream.height)
}
inline ::int32_t VideoStream::_internal_height() const {
  return _impl_.height_;
}
inline void VideoStream::_internal_set_height(::int32_t value) {
  ;
  _impl_.height_ = value;
}

// string r_frame_rate = 9;
inline void VideoStream::clear_r_frame_rate() {
  _impl_.r_frame_rate_.ClearToEmpty();
}
inline const std::string& VideoStream::r_frame_rate() const {
  // @@protoc_insertion_point(field_get:prpc.VideoStream.r_frame_rate)
  return _internal_r_frame_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoStream::set_r_frame_rate(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.r_frame_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoStream.r_frame_rate)
}
inline std::string* VideoStream::mutable_r_frame_rate() {
  std::string* _s = _internal_mutable_r_frame_rate();
  // @@protoc_insertion_point(field_mutable:prpc.VideoStream.r_frame_rate)
  return _s;
}
inline const std::string& VideoStream::_internal_r_frame_rate() const {
  return _impl_.r_frame_rate_.Get();
}
inline void VideoStream::_internal_set_r_frame_rate(const std::string& value) {
  ;


  _impl_.r_frame_rate_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoStream::_internal_mutable_r_frame_rate() {
  ;
  return _impl_.r_frame_rate_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoStream::release_r_frame_rate() {
  // @@protoc_insertion_point(field_release:prpc.VideoStream.r_frame_rate)
  return _impl_.r_frame_rate_.Release();
}
inline void VideoStream::set_allocated_r_frame_rate(std::string* value) {
  _impl_.r_frame_rate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.r_frame_rate_.IsDefault()) {
          _impl_.r_frame_rate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoStream.r_frame_rate)
}

// -------------------------------------------------------------------

// VideoFormat

// string filename = 1;
inline void VideoFormat::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& VideoFormat::filename() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.filename)
}
inline std::string* VideoFormat::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.filename)
  return _s;
}
inline const std::string& VideoFormat::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void VideoFormat::_internal_set_filename(const std::string& value) {
  ;


  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_filename() {
  ;
  return _impl_.filename_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_filename() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.filename)
  return _impl_.filename_.Release();
}
inline void VideoFormat::set_allocated_filename(std::string* value) {
  _impl_.filename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.filename)
}

// int32 nb_streams = 2;
inline void VideoFormat::clear_nb_streams() {
  _impl_.nb_streams_ = 0;
}
inline ::int32_t VideoFormat::nb_streams() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.nb_streams)
  return _internal_nb_streams();
}
inline void VideoFormat::set_nb_streams(::int32_t value) {
  _internal_set_nb_streams(value);
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.nb_streams)
}
inline ::int32_t VideoFormat::_internal_nb_streams() const {
  return _impl_.nb_streams_;
}
inline void VideoFormat::_internal_set_nb_streams(::int32_t value) {
  ;
  _impl_.nb_streams_ = value;
}

// string format_name = 3;
inline void VideoFormat::clear_format_name() {
  _impl_.format_name_.ClearToEmpty();
}
inline const std::string& VideoFormat::format_name() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.format_name)
  return _internal_format_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_format_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.format_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.format_name)
}
inline std::string* VideoFormat::mutable_format_name() {
  std::string* _s = _internal_mutable_format_name();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.format_name)
  return _s;
}
inline const std::string& VideoFormat::_internal_format_name() const {
  return _impl_.format_name_.Get();
}
inline void VideoFormat::_internal_set_format_name(const std::string& value) {
  ;


  _impl_.format_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_format_name() {
  ;
  return _impl_.format_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_format_name() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.format_name)
  return _impl_.format_name_.Release();
}
inline void VideoFormat::set_allocated_format_name(std::string* value) {
  _impl_.format_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_name_.IsDefault()) {
          _impl_.format_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.format_name)
}

// string format_long_name = 4;
inline void VideoFormat::clear_format_long_name() {
  _impl_.format_long_name_.ClearToEmpty();
}
inline const std::string& VideoFormat::format_long_name() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.format_long_name)
  return _internal_format_long_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_format_long_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.format_long_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.format_long_name)
}
inline std::string* VideoFormat::mutable_format_long_name() {
  std::string* _s = _internal_mutable_format_long_name();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.format_long_name)
  return _s;
}
inline const std::string& VideoFormat::_internal_format_long_name() const {
  return _impl_.format_long_name_.Get();
}
inline void VideoFormat::_internal_set_format_long_name(const std::string& value) {
  ;


  _impl_.format_long_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_format_long_name() {
  ;
  return _impl_.format_long_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_format_long_name() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.format_long_name)
  return _impl_.format_long_name_.Release();
}
inline void VideoFormat::set_allocated_format_long_name(std::string* value) {
  _impl_.format_long_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_long_name_.IsDefault()) {
          _impl_.format_long_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.format_long_name)
}

// string start_time = 5;
inline void VideoFormat::clear_start_time() {
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& VideoFormat::start_time() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.start_time)
}
inline std::string* VideoFormat::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.start_time)
  return _s;
}
inline const std::string& VideoFormat::_internal_start_time() const {
  return _impl_.start_time_.Get();
}
inline void VideoFormat::_internal_set_start_time(const std::string& value) {
  ;


  _impl_.start_time_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_start_time() {
  ;
  return _impl_.start_time_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_start_time() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.start_time)
  return _impl_.start_time_.Release();
}
inline void VideoFormat::set_allocated_start_time(std::string* value) {
  _impl_.start_time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_time_.IsDefault()) {
          _impl_.start_time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.start_time)
}

// string duration = 6;
inline void VideoFormat::clear_duration() {
  _impl_.duration_.ClearToEmpty();
}
inline const std::string& VideoFormat::duration() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.duration)
  return _internal_duration();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_duration(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.duration_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.duration)
}
inline std::string* VideoFormat::mutable_duration() {
  std::string* _s = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.duration)
  return _s;
}
inline const std::string& VideoFormat::_internal_duration() const {
  return _impl_.duration_.Get();
}
inline void VideoFormat::_internal_set_duration(const std::string& value) {
  ;


  _impl_.duration_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_duration() {
  ;
  return _impl_.duration_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_duration() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.duration)
  return _impl_.duration_.Release();
}
inline void VideoFormat::set_allocated_duration(std::string* value) {
  _impl_.duration_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.duration_.IsDefault()) {
          _impl_.duration_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.duration)
}

// string size = 7;
inline void VideoFormat::clear_size() {
  _impl_.size_.ClearToEmpty();
}
inline const std::string& VideoFormat::size() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.size)
  return _internal_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_size(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.size_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.size)
}
inline std::string* VideoFormat::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.size)
  return _s;
}
inline const std::string& VideoFormat::_internal_size() const {
  return _impl_.size_.Get();
}
inline void VideoFormat::_internal_set_size(const std::string& value) {
  ;


  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_size() {
  ;
  return _impl_.size_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_size() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.size)
  return _impl_.size_.Release();
}
inline void VideoFormat::set_allocated_size(std::string* value) {
  _impl_.size_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.size_.IsDefault()) {
          _impl_.size_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.size)
}

// string bit_rate = 8;
inline void VideoFormat::clear_bit_rate() {
  _impl_.bit_rate_.ClearToEmpty();
}
inline const std::string& VideoFormat::bit_rate() const {
  // @@protoc_insertion_point(field_get:prpc.VideoFormat.bit_rate)
  return _internal_bit_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFormat::set_bit_rate(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bit_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.VideoFormat.bit_rate)
}
inline std::string* VideoFormat::mutable_bit_rate() {
  std::string* _s = _internal_mutable_bit_rate();
  // @@protoc_insertion_point(field_mutable:prpc.VideoFormat.bit_rate)
  return _s;
}
inline const std::string& VideoFormat::_internal_bit_rate() const {
  return _impl_.bit_rate_.Get();
}
inline void VideoFormat::_internal_set_bit_rate(const std::string& value) {
  ;


  _impl_.bit_rate_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoFormat::_internal_mutable_bit_rate() {
  ;
  return _impl_.bit_rate_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoFormat::release_bit_rate() {
  // @@protoc_insertion_point(field_release:prpc.VideoFormat.bit_rate)
  return _impl_.bit_rate_.Release();
}
inline void VideoFormat::set_allocated_bit_rate(std::string* value) {
  _impl_.bit_rate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bit_rate_.IsDefault()) {
          _impl_.bit_rate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoFormat.bit_rate)
}

// -------------------------------------------------------------------

// VideoMetadata

// repeated .prpc.VideoStream streams = 1;
inline int VideoMetadata::_internal_streams_size() const {
  return _impl_.streams_.size();
}
inline int VideoMetadata::streams_size() const {
  return _internal_streams_size();
}
inline void VideoMetadata::clear_streams() {
  _impl_.streams_.Clear();
}
inline ::prpc::VideoStream* VideoMetadata::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:prpc.VideoMetadata.streams)
  return _impl_.streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prpc::VideoStream >*
VideoMetadata::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:prpc.VideoMetadata.streams)
  return &_impl_.streams_;
}
inline const ::prpc::VideoStream& VideoMetadata::_internal_streams(int index) const {
  return _impl_.streams_.Get(index);
}
inline const ::prpc::VideoStream& VideoMetadata::streams(int index) const {
  // @@protoc_insertion_point(field_get:prpc.VideoMetadata.streams)
  return _internal_streams(index);
}
inline ::prpc::VideoStream* VideoMetadata::_internal_add_streams() {
  return _impl_.streams_.Add();
}
inline ::prpc::VideoStream* VideoMetadata::add_streams() {
  ::prpc::VideoStream* _add = _internal_add_streams();
  // @@protoc_insertion_point(field_add:prpc.VideoMetadata.streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prpc::VideoStream >&
VideoMetadata::streams() const {
  // @@protoc_insertion_point(field_list:prpc.VideoMetadata.streams)
  return _impl_.streams_;
}

// .prpc.VideoFormat format = 2;
inline bool VideoMetadata::_internal_has_format() const {
  return this != internal_default_instance() && _impl_.format_ != nullptr;
}
inline bool VideoMetadata::has_format() const {
  return _internal_has_format();
}
inline void VideoMetadata::clear_format() {
  if (GetArenaForAllocation() == nullptr && _impl_.format_ != nullptr) {
    delete _impl_.format_;
  }
  _impl_.format_ = nullptr;
}
inline const ::prpc::VideoFormat& VideoMetadata::_internal_format() const {
  const ::prpc::VideoFormat* p = _impl_.format_;
  return p != nullptr ? *p : reinterpret_cast<const ::prpc::VideoFormat&>(
      ::prpc::_VideoFormat_default_instance_);
}
inline const ::prpc::VideoFormat& VideoMetadata::format() const {
  // @@protoc_insertion_point(field_get:prpc.VideoMetadata.format)
  return _internal_format();
}
inline void VideoMetadata::unsafe_arena_set_allocated_format(
    ::prpc::VideoFormat* format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.format_);
  }
  _impl_.format_ = format;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prpc.VideoMetadata.format)
}
inline ::prpc::VideoFormat* VideoMetadata::release_format() {
  
  ::prpc::VideoFormat* temp = _impl_.format_;
  _impl_.format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prpc::VideoFormat* VideoMetadata::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:prpc.VideoMetadata.format)
  
  ::prpc::VideoFormat* temp = _impl_.format_;
  _impl_.format_ = nullptr;
  return temp;
}
inline ::prpc::VideoFormat* VideoMetadata::_internal_mutable_format() {
  
  if (_impl_.format_ == nullptr) {
    auto* p = CreateMaybeMessage<::prpc::VideoFormat>(GetArenaForAllocation());
    _impl_.format_ = p;
  }
  return _impl_.format_;
}
inline ::prpc::VideoFormat* VideoMetadata::mutable_format() {
  ::prpc::VideoFormat* _msg = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:prpc.VideoMetadata.format)
  return _msg;
}
inline void VideoMetadata::set_allocated_format(::prpc::VideoFormat* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.format_;
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(format);
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }

  } else {

  }
  _impl_.format_ = format;
  // @@protoc_insertion_point(field_set_allocated:prpc.VideoMetadata.format)
}

// -------------------------------------------------------------------

// Video

// int64 id = 1;
inline void Video::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t Video::id() const {
  // @@protoc_insertion_point(field_get:prpc.Video.id)
  return _internal_id();
}
inline void Video::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:prpc.Video.id)
}
inline ::int64_t Video::_internal_id() const {
  return _impl_.id_;
}
inline void Video::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void Video::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Video::name() const {
  // @@protoc_insertion_point(field_get:prpc.Video.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Video::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.Video.name)
}
inline std::string* Video::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:prpc.Video.name)
  return _s;
}
inline const std::string& Video::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Video::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Video::release_name() {
  // @@protoc_insertion_point(field_release:prpc.Video.name)
  return _impl_.name_.Release();
}
inline void Video::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.Video.name)
}

// string introduce = 3;
inline void Video::clear_introduce() {
  _impl_.introduce_.ClearToEmpty();
}
inline const std::string& Video::introduce() const {
  // @@protoc_insertion_point(field_get:prpc.Video.introduce)
  return _internal_introduce();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Video::set_introduce(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.introduce_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.Video.introduce)
}
inline std::string* Video::mutable_introduce() {
  std::string* _s = _internal_mutable_introduce();
  // @@protoc_insertion_point(field_mutable:prpc.Video.introduce)
  return _s;
}
inline const std::string& Video::_internal_introduce() const {
  return _impl_.introduce_.Get();
}
inline void Video::_internal_set_introduce(const std::string& value) {
  ;


  _impl_.introduce_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_introduce() {
  ;
  return _impl_.introduce_.Mutable( GetArenaForAllocation());
}
inline std::string* Video::release_introduce() {
  // @@protoc_insertion_point(field_release:prpc.Video.introduce)
  return _impl_.introduce_.Release();
}
inline void Video::set_allocated_introduce(std::string* value) {
  _impl_.introduce_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.introduce_.IsDefault()) {
          _impl_.introduce_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.Video.introduce)
}

// string poster_path = 4;
inline void Video::clear_poster_path() {
  _impl_.poster_path_.ClearToEmpty();
}
inline const std::string& Video::poster_path() const {
  // @@protoc_insertion_point(field_get:prpc.Video.poster_path)
  return _internal_poster_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Video::set_poster_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.poster_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prpc.Video.poster_path)
}
inline std::string* Video::mutable_poster_path() {
  std::string* _s = _internal_mutable_poster_path();
  // @@protoc_insertion_point(field_mutable:prpc.Video.poster_path)
  return _s;
}
inline const std::string& Video::_internal_poster_path() const {
  return _impl_.poster_path_.Get();
}
inline void Video::_internal_set_poster_path(const std::string& value) {
  ;


  _impl_.poster_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_poster_path() {
  ;
  return _impl_.poster_path_.Mutable( GetArenaForAllocation());
}
inline std::string* Video::release_poster_path() {
  // @@protoc_insertion_point(field_release:prpc.Video.poster_path)
  return _impl_.poster_path_.Release();
}
inline void Video::set_allocated_poster_path(std::string* value) {
  _impl_.poster_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.poster_path_.IsDefault()) {
          _impl_.poster_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prpc.Video.poster_path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace prpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_video_2eproto_2epb_2eh
