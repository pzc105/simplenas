// source: video.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.prpc.Video', null, global);
goog.exportSymbol('proto.prpc.VideoFormat', null, global);
goog.exportSymbol('proto.prpc.VideoMetadata', null, global);
goog.exportSymbol('proto.prpc.VideoStream', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.VideoStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.VideoStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.VideoStream.displayName = 'proto.prpc.VideoStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.VideoFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.VideoFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.VideoFormat.displayName = 'proto.prpc.VideoFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.VideoMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.VideoMetadata.repeatedFields_, null);
};
goog.inherits(proto.prpc.VideoMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.VideoMetadata.displayName = 'proto.prpc.VideoMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.Video = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.Video, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.Video.displayName = 'proto.prpc.Video';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.VideoStream.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.VideoStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.VideoStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    codecName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    codecLongName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    profile: jspb.Message.getFieldWithDefault(msg, 4, ""),
    codecType: jspb.Message.getFieldWithDefault(msg, 5, ""),
    width: jspb.Message.getFieldWithDefault(msg, 6, 0),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rFrameRate: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.VideoStream}
 */
proto.prpc.VideoStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.VideoStream;
  return proto.prpc.VideoStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.VideoStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.VideoStream}
 */
proto.prpc.VideoStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodecName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodecLongName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfile(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodecType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRFrameRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.VideoStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.VideoStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.VideoStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCodecName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCodecLongName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProfile();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCodecType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getRFrameRate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.prpc.VideoStream.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string codec_name = 2;
 * @return {string}
 */
proto.prpc.VideoStream.prototype.getCodecName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setCodecName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string codec_long_name = 3;
 * @return {string}
 */
proto.prpc.VideoStream.prototype.getCodecLongName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setCodecLongName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string profile = 4;
 * @return {string}
 */
proto.prpc.VideoStream.prototype.getProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string codec_type = 5;
 * @return {string}
 */
proto.prpc.VideoStream.prototype.getCodecType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setCodecType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 width = 6;
 * @return {number}
 */
proto.prpc.VideoStream.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 height = 7;
 * @return {number}
 */
proto.prpc.VideoStream.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string r_frame_rate = 9;
 * @return {string}
 */
proto.prpc.VideoStream.prototype.getRFrameRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoStream} returns this
 */
proto.prpc.VideoStream.prototype.setRFrameRate = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.VideoFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.VideoFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.VideoFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nbStreams: jspb.Message.getFieldWithDefault(msg, 2, 0),
    formatName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    formatLongName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 6, ""),
    size: jspb.Message.getFieldWithDefault(msg, 7, ""),
    bitRate: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.VideoFormat}
 */
proto.prpc.VideoFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.VideoFormat;
  return proto.prpc.VideoFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.VideoFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.VideoFormat}
 */
proto.prpc.VideoFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNbStreams(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormatName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormatLongName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBitRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.VideoFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.VideoFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.VideoFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNbStreams();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFormatName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFormatLongName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStartTime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSize();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBitRate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 nb_streams = 2;
 * @return {number}
 */
proto.prpc.VideoFormat.prototype.getNbStreams = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setNbStreams = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string format_name = 3;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getFormatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setFormatName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string format_long_name = 4;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getFormatLongName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setFormatLongName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string start_time = 5;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string duration = 6;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string size = 7;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setSize = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string bit_rate = 8;
 * @return {string}
 */
proto.prpc.VideoFormat.prototype.getBitRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.VideoFormat} returns this
 */
proto.prpc.VideoFormat.prototype.setBitRate = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.VideoMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.VideoMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.VideoMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.VideoMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.prpc.VideoStream.toObject, includeInstance),
    format: (f = msg.getFormat()) && proto.prpc.VideoFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.VideoMetadata}
 */
proto.prpc.VideoMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.VideoMetadata;
  return proto.prpc.VideoMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.VideoMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.VideoMetadata}
 */
proto.prpc.VideoMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.VideoStream;
      reader.readMessage(value,proto.prpc.VideoStream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    case 2:
      var value = new proto.prpc.VideoFormat;
      reader.readMessage(value,proto.prpc.VideoFormat.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.VideoMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.VideoMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.VideoMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.VideoMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prpc.VideoStream.serializeBinaryToWriter
    );
  }
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prpc.VideoFormat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VideoStream streams = 1;
 * @return {!Array<!proto.prpc.VideoStream>}
 */
proto.prpc.VideoMetadata.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.prpc.VideoStream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.VideoStream, 1));
};


/**
 * @param {!Array<!proto.prpc.VideoStream>} value
 * @return {!proto.prpc.VideoMetadata} returns this
*/
proto.prpc.VideoMetadata.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prpc.VideoStream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.VideoStream}
 */
proto.prpc.VideoMetadata.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prpc.VideoStream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.VideoMetadata} returns this
 */
proto.prpc.VideoMetadata.prototype.clearStreamsList = function() {
  return this.setStreamsList([]);
};


/**
 * optional VideoFormat format = 2;
 * @return {?proto.prpc.VideoFormat}
 */
proto.prpc.VideoMetadata.prototype.getFormat = function() {
  return /** @type{?proto.prpc.VideoFormat} */ (
    jspb.Message.getWrapperField(this, proto.prpc.VideoFormat, 2));
};


/**
 * @param {?proto.prpc.VideoFormat|undefined} value
 * @return {!proto.prpc.VideoMetadata} returns this
*/
proto.prpc.VideoMetadata.prototype.setFormat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.VideoMetadata} returns this
 */
proto.prpc.VideoMetadata.prototype.clearFormat = function() {
  return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.VideoMetadata.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.Video.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.Video.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.Video} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.Video.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    introduce: jspb.Message.getFieldWithDefault(msg, 3, ""),
    posterPath: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.Video}
 */
proto.prpc.Video.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.Video;
  return proto.prpc.Video.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.Video} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.Video}
 */
proto.prpc.Video.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroduce(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosterPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.Video.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.Video.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.Video} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.Video.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIntroduce();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosterPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.prpc.Video.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.Video} returns this
 */
proto.prpc.Video.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.prpc.Video.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.Video} returns this
 */
proto.prpc.Video.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string introduce = 3;
 * @return {string}
 */
proto.prpc.Video.prototype.getIntroduce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.Video} returns this
 */
proto.prpc.Video.prototype.setIntroduce = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string poster_path = 4;
 * @return {string}
 */
proto.prpc.Video.prototype.getPosterPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.Video} returns this
 */
proto.prpc.Video.prototype.setPosterPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.prpc);
