// source: raft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.prpc.NewNodeAction', null, global);
goog.exportSymbol('proto.prpc.RaftActionRet', null, global);
goog.exportSymbol('proto.prpc.RaftMsg', null, global);
goog.exportSymbol('proto.prpc.RaftMsg.Type', null, global);
goog.exportSymbol('proto.prpc.RaftPing', null, global);
goog.exportSymbol('proto.prpc.RaftPong', null, global);
goog.exportSymbol('proto.prpc.RaftTransaction', null, global);
goog.exportSymbol('proto.prpc.RaftTransaction.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.NewNodeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.NewNodeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.NewNodeAction.displayName = 'proto.prpc.NewNodeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftTransaction.displayName = 'proto.prpc.RaftTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftActionRet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftActionRet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftActionRet.displayName = 'proto.prpc.RaftActionRet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftPing.displayName = 'proto.prpc.RaftPing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftPong.displayName = 'proto.prpc.RaftPong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.RaftMsg.repeatedFields_, null);
};
goog.inherits(proto.prpc.RaftMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftMsg.displayName = 'proto.prpc.RaftMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.NewNodeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.NewNodeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.NewNodeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NewNodeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    myAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.NewNodeAction}
 */
proto.prpc.NewNodeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.NewNodeAction;
  return proto.prpc.NewNodeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.NewNodeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.NewNodeAction}
 */
proto.prpc.NewNodeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.NewNodeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.NewNodeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.NewNodeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NewNodeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMyAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.NewNodeAction.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string my_address = 2;
 * @return {string}
 */
proto.prpc.NewNodeAction.prototype.getMyAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setMyAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 role = 3;
 * @return {number}
 */
proto.prpc.NewNodeAction.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userRef: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newNode: (f = msg.getNewNode()) && proto.prpc.NewNodeAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftTransaction;
  return proto.prpc.RaftTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {!proto.prpc.RaftTransaction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserRef(value);
      break;
    case 5:
      var value = new proto.prpc.NewNodeAction;
      reader.readMessage(value,proto.prpc.NewNodeAction.deserializeBinaryFromReader);
      msg.setNewNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUserRef();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prpc.NewNodeAction.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.RaftTransaction.Type = {
  UNKNOWN: 0,
  NEWNODE: 1
};

/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftTransaction.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.prpc.RaftTransaction.Type}
 */
proto.prpc.RaftTransaction.prototype.getType = function() {
  return /** @type {!proto.prpc.RaftTransaction.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prpc.RaftTransaction.Type} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 epoch = 3;
 * @return {number}
 */
proto.prpc.RaftTransaction.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string user_ref = 4;
 * @return {string}
 */
proto.prpc.RaftTransaction.prototype.getUserRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setUserRef = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional NewNodeAction new_node = 5;
 * @return {?proto.prpc.NewNodeAction}
 */
proto.prpc.RaftTransaction.prototype.getNewNode = function() {
  return /** @type{?proto.prpc.NewNodeAction} */ (
    jspb.Message.getWrapperField(this, proto.prpc.NewNodeAction, 5));
};


/**
 * @param {?proto.prpc.NewNodeAction|undefined} value
 * @return {!proto.prpc.RaftTransaction} returns this
*/
proto.prpc.RaftTransaction.prototype.setNewNode = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.clearNewNode = function() {
  return this.setNewNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftTransaction.prototype.hasNewNode = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftActionRet.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftActionRet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftActionRet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftActionRet.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftActionRet}
 */
proto.prpc.RaftActionRet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftActionRet;
  return proto.prpc.RaftActionRet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftActionRet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftActionRet}
 */
proto.prpc.RaftActionRet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftActionRet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftActionRet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftActionRet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftActionRet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftActionRet.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftActionRet} returns this
 */
proto.prpc.RaftActionRet.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.prpc.RaftActionRet.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftActionRet} returns this
 */
proto.prpc.RaftActionRet.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool success = 3;
 * @return {boolean}
 */
proto.prpc.RaftActionRet.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.prpc.RaftActionRet} returns this
 */
proto.prpc.RaftActionRet.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftPing.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftPing}
 */
proto.prpc.RaftPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftPing;
  return proto.prpc.RaftPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftPing}
 */
proto.prpc.RaftPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftPing.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 role = 2;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 epoch = 3;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftPong.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftPong}
 */
proto.prpc.RaftPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftPong;
  return proto.prpc.RaftPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftPong}
 */
proto.prpc.RaftPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.RaftMsg.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: (f = msg.getAction()) && proto.prpc.RaftTransaction.toObject(includeInstance, f),
    syncActionsList: jspb.Message.toObjectList(msg.getSyncActionsList(),
    proto.prpc.RaftTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftMsg}
 */
proto.prpc.RaftMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftMsg;
  return proto.prpc.RaftMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftMsg}
 */
proto.prpc.RaftMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prpc.RaftMsg.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.prpc.RaftTransaction;
      reader.readMessage(value,proto.prpc.RaftTransaction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.prpc.RaftTransaction;
      reader.readMessage(value,proto.prpc.RaftTransaction.deserializeBinaryFromReader);
      msg.addSyncActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prpc.RaftTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSyncActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.prpc.RaftTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.RaftMsg.Type = {
  UNKNOWN: 0,
  ACTION: 1,
  SYNCACTION: 2,
  PING: 3,
  PONG: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.prpc.RaftMsg.Type}
 */
proto.prpc.RaftMsg.prototype.getType = function() {
  return /** @type {!proto.prpc.RaftMsg.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prpc.RaftMsg.Type} value
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RaftTransaction action = 2;
 * @return {?proto.prpc.RaftTransaction}
 */
proto.prpc.RaftMsg.prototype.getAction = function() {
  return /** @type{?proto.prpc.RaftTransaction} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftTransaction, 2));
};


/**
 * @param {?proto.prpc.RaftTransaction|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated RaftTransaction sync_actions = 3;
 * @return {!Array<!proto.prpc.RaftTransaction>}
 */
proto.prpc.RaftMsg.prototype.getSyncActionsList = function() {
  return /** @type{!Array<!proto.prpc.RaftTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.RaftTransaction, 3));
};


/**
 * @param {!Array<!proto.prpc.RaftTransaction>} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setSyncActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.prpc.RaftTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftMsg.prototype.addSyncActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.prpc.RaftTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearSyncActionsList = function() {
  return this.setSyncActionsList([]);
};


goog.object.extend(exports, proto.prpc);
