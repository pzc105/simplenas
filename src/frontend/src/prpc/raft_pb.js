// source: raft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.prpc.HashSlotAction', null, global);
goog.exportSymbol('proto.prpc.NewNodeAction', null, global);
goog.exportSymbol('proto.prpc.NodeState', null, global);
goog.exportSymbol('proto.prpc.RaftElection', null, global);
goog.exportSymbol('proto.prpc.RaftElectionRet', null, global);
goog.exportSymbol('proto.prpc.RaftMsg', null, global);
goog.exportSymbol('proto.prpc.RaftMsg.Type', null, global);
goog.exportSymbol('proto.prpc.RaftPing', null, global);
goog.exportSymbol('proto.prpc.RaftPong', null, global);
goog.exportSymbol('proto.prpc.RaftReqActions', null, global);
goog.exportSymbol('proto.prpc.RaftSyncActions', null, global);
goog.exportSymbol('proto.prpc.RaftSyncActionsRet', null, global);
goog.exportSymbol('proto.prpc.RaftTransaction', null, global);
goog.exportSymbol('proto.prpc.RaftTransaction.Type', null, global);
goog.exportSymbol('proto.prpc.SlotMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.NewNodeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.NewNodeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.NewNodeAction.displayName = 'proto.prpc.NewNodeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.HashSlotAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.HashSlotAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.HashSlotAction.displayName = 'proto.prpc.HashSlotAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftTransaction.displayName = 'proto.prpc.RaftTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.NodeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.NodeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.NodeState.displayName = 'proto.prpc.NodeState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.RaftPing.repeatedFields_, null);
};
goog.inherits(proto.prpc.RaftPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftPing.displayName = 'proto.prpc.RaftPing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftPong.displayName = 'proto.prpc.RaftPong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftElection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftElection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftElection.displayName = 'proto.prpc.RaftElection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftElectionRet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftElectionRet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftElectionRet.displayName = 'proto.prpc.RaftElectionRet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftSyncActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.RaftSyncActions.repeatedFields_, null);
};
goog.inherits(proto.prpc.RaftSyncActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftSyncActions.displayName = 'proto.prpc.RaftSyncActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftSyncActionsRet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftSyncActionsRet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftSyncActionsRet.displayName = 'proto.prpc.RaftSyncActionsRet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftReqActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftReqActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftReqActions.displayName = 'proto.prpc.RaftReqActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.SlotMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.SlotMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.SlotMsg.displayName = 'proto.prpc.SlotMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RaftMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RaftMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RaftMsg.displayName = 'proto.prpc.RaftMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.NewNodeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.NewNodeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.NewNodeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NewNodeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    myAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    role: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.NewNodeAction}
 */
proto.prpc.NewNodeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.NewNodeAction;
  return proto.prpc.NewNodeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.NewNodeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.NewNodeAction}
 */
proto.prpc.NewNodeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.NewNodeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.NewNodeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.NewNodeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NewNodeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMyAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.NewNodeAction.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string my_address = 2;
 * @return {string}
 */
proto.prpc.NewNodeAction.prototype.getMyAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setMyAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 role = 3;
 * @return {number}
 */
proto.prpc.NewNodeAction.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.NewNodeAction} returns this
 */
proto.prpc.NewNodeAction.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.HashSlotAction.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.HashSlotAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.HashSlotAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.HashSlotAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    step: jspb.Message.getFieldWithDefault(msg, 2, 0),
    slots: msg.getSlots_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.HashSlotAction}
 */
proto.prpc.HashSlotAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.HashSlotAction;
  return proto.prpc.HashSlotAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.HashSlotAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.HashSlotAction}
 */
proto.prpc.HashSlotAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStep(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSlots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.HashSlotAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.HashSlotAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.HashSlotAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.HashSlotAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStep();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSlots_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.HashSlotAction.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.HashSlotAction} returns this
 */
proto.prpc.HashSlotAction.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 step = 2;
 * @return {number}
 */
proto.prpc.HashSlotAction.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.HashSlotAction} returns this
 */
proto.prpc.HashSlotAction.prototype.setStep = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes slots = 3;
 * @return {!(string|Uint8Array)}
 */
proto.prpc.HashSlotAction.prototype.getSlots = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes slots = 3;
 * This is a type-conversion wrapper around `getSlots()`
 * @return {string}
 */
proto.prpc.HashSlotAction.prototype.getSlots_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSlots()));
};


/**
 * optional bytes slots = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSlots()`
 * @return {!Uint8Array}
 */
proto.prpc.HashSlotAction.prototype.getSlots_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSlots()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prpc.HashSlotAction} returns this
 */
proto.prpc.HashSlotAction.prototype.setSlots = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userRef: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newNode: (f = msg.getNewNode()) && proto.prpc.NewNodeAction.toObject(includeInstance, f),
    hashSlot: (f = msg.getHashSlot()) && proto.prpc.HashSlotAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftTransaction;
  return proto.prpc.RaftTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {!proto.prpc.RaftTransaction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEpoch(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserRef(value);
      break;
    case 5:
      var value = new proto.prpc.NewNodeAction;
      reader.readMessage(value,proto.prpc.NewNodeAction.deserializeBinaryFromReader);
      msg.setNewNode(value);
      break;
    case 6:
      var value = new proto.prpc.HashSlotAction;
      reader.readMessage(value,proto.prpc.HashSlotAction.deserializeBinaryFromReader);
      msg.setHashSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUserRef();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewNode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prpc.NewNodeAction.serializeBinaryToWriter
    );
  }
  f = message.getHashSlot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.prpc.HashSlotAction.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.RaftTransaction.Type = {
  UNKNOWN: 0,
  NEWNODE: 1,
  HASHSLOTACTION: 2
};

/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftTransaction.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.prpc.RaftTransaction.Type}
 */
proto.prpc.RaftTransaction.prototype.getType = function() {
  return /** @type {!proto.prpc.RaftTransaction.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.prpc.RaftTransaction.Type} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 epoch = 3;
 * @return {number}
 */
proto.prpc.RaftTransaction.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string user_ref = 4;
 * @return {string}
 */
proto.prpc.RaftTransaction.prototype.getUserRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.setUserRef = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional NewNodeAction new_node = 5;
 * @return {?proto.prpc.NewNodeAction}
 */
proto.prpc.RaftTransaction.prototype.getNewNode = function() {
  return /** @type{?proto.prpc.NewNodeAction} */ (
    jspb.Message.getWrapperField(this, proto.prpc.NewNodeAction, 5));
};


/**
 * @param {?proto.prpc.NewNodeAction|undefined} value
 * @return {!proto.prpc.RaftTransaction} returns this
*/
proto.prpc.RaftTransaction.prototype.setNewNode = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.clearNewNode = function() {
  return this.setNewNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftTransaction.prototype.hasNewNode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HashSlotAction hash_slot = 6;
 * @return {?proto.prpc.HashSlotAction}
 */
proto.prpc.RaftTransaction.prototype.getHashSlot = function() {
  return /** @type{?proto.prpc.HashSlotAction} */ (
    jspb.Message.getWrapperField(this, proto.prpc.HashSlotAction, 6));
};


/**
 * @param {?proto.prpc.HashSlotAction|undefined} value
 * @return {!proto.prpc.RaftTransaction} returns this
*/
proto.prpc.RaftTransaction.prototype.setHashSlot = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftTransaction} returns this
 */
proto.prpc.RaftTransaction.prototype.clearHashSlot = function() {
  return this.setHashSlot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftTransaction.prototype.hasHashSlot = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.NodeState.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.NodeState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.NodeState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NodeState.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.NodeState}
 */
proto.prpc.NodeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.NodeState;
  return proto.prpc.NodeState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.NodeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.NodeState}
 */
proto.prpc.NodeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.NodeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.NodeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.NodeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.NodeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.NodeState.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.NodeState} returns this
 */
proto.prpc.NodeState.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 state = 2;
 * @return {number}
 */
proto.prpc.NodeState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.NodeState} returns this
 */
proto.prpc.NodeState.prototype.setState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.RaftPing.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftPing.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentEpoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    commitedEpoch: jspb.Message.getFieldWithDefault(msg, 4, 0),
    voteEpoch: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nodeStatesList: jspb.Message.toObjectList(msg.getNodeStatesList(),
    proto.prpc.NodeState.toObject, includeInstance),
    masterAddress: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftPing}
 */
proto.prpc.RaftPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftPing;
  return proto.prpc.RaftPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftPing}
 */
proto.prpc.RaftPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentEpoch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitedEpoch(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVoteEpoch(value);
      break;
    case 6:
      var value = new proto.prpc.NodeState;
      reader.readMessage(value,proto.prpc.NodeState.deserializeBinaryFromReader);
      msg.addNodeStates(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurrentEpoch();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCommitedEpoch();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getVoteEpoch();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNodeStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.prpc.NodeState.serializeBinaryToWriter
    );
  }
  f = message.getMasterAddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftPing.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 role = 2;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 current_epoch = 3;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getCurrentEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setCurrentEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 commited_epoch = 4;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getCommitedEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setCommitedEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 vote_epoch = 5;
 * @return {number}
 */
proto.prpc.RaftPing.prototype.getVoteEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setVoteEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated NodeState node_states = 6;
 * @return {!Array<!proto.prpc.NodeState>}
 */
proto.prpc.RaftPing.prototype.getNodeStatesList = function() {
  return /** @type{!Array<!proto.prpc.NodeState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.NodeState, 6));
};


/**
 * @param {!Array<!proto.prpc.NodeState>} value
 * @return {!proto.prpc.RaftPing} returns this
*/
proto.prpc.RaftPing.prototype.setNodeStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.prpc.NodeState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.NodeState}
 */
proto.prpc.RaftPing.prototype.addNodeStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.prpc.NodeState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.clearNodeStatesList = function() {
  return this.setNodeStatesList([]);
};


/**
 * optional string master_address = 7;
 * @return {string}
 */
proto.prpc.RaftPing.prototype.getMasterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftPing} returns this
 */
proto.prpc.RaftPing.prototype.setMasterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftPong.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPong.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftPong}
 */
proto.prpc.RaftPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftPong;
  return proto.prpc.RaftPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftPong}
 */
proto.prpc.RaftPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftPong.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftPong} returns this
 */
proto.prpc.RaftPong.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 role = 2;
 * @return {number}
 */
proto.prpc.RaftPong.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftPong} returns this
 */
proto.prpc.RaftPong.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftElection.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftElection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftElection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftElection.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    voteEpoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftElection}
 */
proto.prpc.RaftElection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftElection;
  return proto.prpc.RaftElection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftElection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftElection}
 */
proto.prpc.RaftElection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVoteEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftElection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftElection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftElection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftElection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVoteEpoch();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftElection.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftElection} returns this
 */
proto.prpc.RaftElection.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 vote_epoch = 2;
 * @return {number}
 */
proto.prpc.RaftElection.prototype.getVoteEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftElection} returns this
 */
proto.prpc.RaftElection.prototype.setVoteEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftElectionRet.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftElectionRet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftElectionRet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftElectionRet.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gotVoteId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    voteEpoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftElectionRet}
 */
proto.prpc.RaftElectionRet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftElectionRet;
  return proto.prpc.RaftElectionRet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftElectionRet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftElectionRet}
 */
proto.prpc.RaftElectionRet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGotVoteId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVoteEpoch(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftElectionRet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftElectionRet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftElectionRet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftElectionRet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGotVoteId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVoteEpoch();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftElectionRet.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftElectionRet} returns this
 */
proto.prpc.RaftElectionRet.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string got_vote_id = 2;
 * @return {string}
 */
proto.prpc.RaftElectionRet.prototype.getGotVoteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftElectionRet} returns this
 */
proto.prpc.RaftElectionRet.prototype.setGotVoteId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 vote_epoch = 3;
 * @return {number}
 */
proto.prpc.RaftElectionRet.prototype.getVoteEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftElectionRet} returns this
 */
proto.prpc.RaftElectionRet.prototype.setVoteEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool success = 4;
 * @return {boolean}
 */
proto.prpc.RaftElectionRet.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.prpc.RaftElectionRet} returns this
 */
proto.prpc.RaftElectionRet.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.RaftSyncActions.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftSyncActions.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftSyncActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftSyncActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftSyncActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentEpoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    commitedEpoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.prpc.RaftTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftSyncActions}
 */
proto.prpc.RaftSyncActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftSyncActions;
  return proto.prpc.RaftSyncActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftSyncActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftSyncActions}
 */
proto.prpc.RaftSyncActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitedEpoch(value);
      break;
    case 4:
      var value = new proto.prpc.RaftTransaction;
      reader.readMessage(value,proto.prpc.RaftTransaction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftSyncActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftSyncActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftSyncActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftSyncActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentEpoch();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCommitedEpoch();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.prpc.RaftTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftSyncActions.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftSyncActions} returns this
 */
proto.prpc.RaftSyncActions.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 current_epoch = 2;
 * @return {number}
 */
proto.prpc.RaftSyncActions.prototype.getCurrentEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftSyncActions} returns this
 */
proto.prpc.RaftSyncActions.prototype.setCurrentEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 commited_epoch = 3;
 * @return {number}
 */
proto.prpc.RaftSyncActions.prototype.getCommitedEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftSyncActions} returns this
 */
proto.prpc.RaftSyncActions.prototype.setCommitedEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated RaftTransaction actions = 4;
 * @return {!Array<!proto.prpc.RaftTransaction>}
 */
proto.prpc.RaftSyncActions.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.prpc.RaftTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.RaftTransaction, 4));
};


/**
 * @param {!Array<!proto.prpc.RaftTransaction>} value
 * @return {!proto.prpc.RaftSyncActions} returns this
*/
proto.prpc.RaftSyncActions.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.prpc.RaftTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.RaftTransaction}
 */
proto.prpc.RaftSyncActions.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.prpc.RaftTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.RaftSyncActions} returns this
 */
proto.prpc.RaftSyncActions.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftSyncActionsRet.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftSyncActionsRet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftSyncActionsRet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftSyncActionsRet.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentEpoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftSyncActionsRet}
 */
proto.prpc.RaftSyncActionsRet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftSyncActionsRet;
  return proto.prpc.RaftSyncActionsRet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftSyncActionsRet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftSyncActionsRet}
 */
proto.prpc.RaftSyncActionsRet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftSyncActionsRet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftSyncActionsRet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftSyncActionsRet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftSyncActionsRet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentEpoch();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftSyncActionsRet.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftSyncActionsRet} returns this
 */
proto.prpc.RaftSyncActionsRet.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 current_epoch = 2;
 * @return {number}
 */
proto.prpc.RaftSyncActionsRet.prototype.getCurrentEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftSyncActionsRet} returns this
 */
proto.prpc.RaftSyncActionsRet.prototype.setCurrentEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftReqActions.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftReqActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftReqActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftReqActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commitedEpoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftReqActions}
 */
proto.prpc.RaftReqActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftReqActions;
  return proto.prpc.RaftReqActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftReqActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftReqActions}
 */
proto.prpc.RaftReqActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMyId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommitedEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftReqActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftReqActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftReqActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftReqActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommitedEpoch();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string my_id = 1;
 * @return {string}
 */
proto.prpc.RaftReqActions.prototype.getMyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.RaftReqActions} returns this
 */
proto.prpc.RaftReqActions.prototype.setMyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 commited_epoch = 2;
 * @return {number}
 */
proto.prpc.RaftReqActions.prototype.getCommitedEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.RaftReqActions} returns this
 */
proto.prpc.RaftReqActions.prototype.setCommitedEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.SlotMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.SlotMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.SlotMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.SlotMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.SlotMsg}
 */
proto.prpc.SlotMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.SlotMsg;
  return proto.prpc.SlotMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.SlotMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.SlotMsg}
 */
proto.prpc.SlotMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.SlotMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.SlotMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.SlotMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.SlotMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 slot = 1;
 * @return {number}
 */
proto.prpc.SlotMsg.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.SlotMsg} returns this
 */
proto.prpc.SlotMsg.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.prpc.SlotMsg.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.SlotMsg} returns this
 */
proto.prpc.SlotMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RaftMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RaftMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RaftMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: (f = msg.getAction()) && proto.prpc.RaftTransaction.toObject(includeInstance, f),
    syncActions: (f = msg.getSyncActions()) && proto.prpc.RaftSyncActions.toObject(includeInstance, f),
    syncActionsRet: (f = msg.getSyncActionsRet()) && proto.prpc.RaftSyncActionsRet.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.prpc.RaftPing.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && proto.prpc.RaftPong.toObject(includeInstance, f),
    election: (f = msg.getElection()) && proto.prpc.RaftElection.toObject(includeInstance, f),
    electionRet: (f = msg.getElectionRet()) && proto.prpc.RaftElectionRet.toObject(includeInstance, f),
    reqActions: (f = msg.getReqActions()) && proto.prpc.RaftReqActions.toObject(includeInstance, f),
    slotMsg: (f = msg.getSlotMsg()) && proto.prpc.SlotMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RaftMsg}
 */
proto.prpc.RaftMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RaftMsg;
  return proto.prpc.RaftMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RaftMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RaftMsg}
 */
proto.prpc.RaftMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prpc.RaftMsg.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.prpc.RaftTransaction;
      reader.readMessage(value,proto.prpc.RaftTransaction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 3:
      var value = new proto.prpc.RaftSyncActions;
      reader.readMessage(value,proto.prpc.RaftSyncActions.deserializeBinaryFromReader);
      msg.setSyncActions(value);
      break;
    case 4:
      var value = new proto.prpc.RaftSyncActionsRet;
      reader.readMessage(value,proto.prpc.RaftSyncActionsRet.deserializeBinaryFromReader);
      msg.setSyncActionsRet(value);
      break;
    case 5:
      var value = new proto.prpc.RaftPing;
      reader.readMessage(value,proto.prpc.RaftPing.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 6:
      var value = new proto.prpc.RaftPong;
      reader.readMessage(value,proto.prpc.RaftPong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 7:
      var value = new proto.prpc.RaftElection;
      reader.readMessage(value,proto.prpc.RaftElection.deserializeBinaryFromReader);
      msg.setElection(value);
      break;
    case 8:
      var value = new proto.prpc.RaftElectionRet;
      reader.readMessage(value,proto.prpc.RaftElectionRet.deserializeBinaryFromReader);
      msg.setElectionRet(value);
      break;
    case 9:
      var value = new proto.prpc.RaftReqActions;
      reader.readMessage(value,proto.prpc.RaftReqActions.deserializeBinaryFromReader);
      msg.setReqActions(value);
      break;
    case 10:
      var value = new proto.prpc.SlotMsg;
      reader.readMessage(value,proto.prpc.SlotMsg.deserializeBinaryFromReader);
      msg.setSlotMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RaftMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RaftMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RaftMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RaftMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.prpc.RaftTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSyncActions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.prpc.RaftSyncActions.serializeBinaryToWriter
    );
  }
  f = message.getSyncActionsRet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.prpc.RaftSyncActionsRet.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.prpc.RaftPing.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.prpc.RaftPong.serializeBinaryToWriter
    );
  }
  f = message.getElection();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.prpc.RaftElection.serializeBinaryToWriter
    );
  }
  f = message.getElectionRet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.prpc.RaftElectionRet.serializeBinaryToWriter
    );
  }
  f = message.getReqActions();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.prpc.RaftReqActions.serializeBinaryToWriter
    );
  }
  f = message.getSlotMsg();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.prpc.SlotMsg.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.RaftMsg.Type = {
  UNKNOWN: 0,
  ACTION: 1,
  SYNCACTION: 2,
  SYNCACTIONRET: 3,
  PING: 4,
  PONG: 5,
  ELECTION: 6,
  ELECTIONRET: 7,
  REQACTIONS: 8,
  SENDMSG2SLOT: 9
};

/**
 * optional Type type = 1;
 * @return {!proto.prpc.RaftMsg.Type}
 */
proto.prpc.RaftMsg.prototype.getType = function() {
  return /** @type {!proto.prpc.RaftMsg.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prpc.RaftMsg.Type} value
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RaftTransaction action = 2;
 * @return {?proto.prpc.RaftTransaction}
 */
proto.prpc.RaftMsg.prototype.getAction = function() {
  return /** @type{?proto.prpc.RaftTransaction} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftTransaction, 2));
};


/**
 * @param {?proto.prpc.RaftTransaction|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RaftSyncActions sync_actions = 3;
 * @return {?proto.prpc.RaftSyncActions}
 */
proto.prpc.RaftMsg.prototype.getSyncActions = function() {
  return /** @type{?proto.prpc.RaftSyncActions} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftSyncActions, 3));
};


/**
 * @param {?proto.prpc.RaftSyncActions|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setSyncActions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearSyncActions = function() {
  return this.setSyncActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasSyncActions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RaftSyncActionsRet sync_actions_ret = 4;
 * @return {?proto.prpc.RaftSyncActionsRet}
 */
proto.prpc.RaftMsg.prototype.getSyncActionsRet = function() {
  return /** @type{?proto.prpc.RaftSyncActionsRet} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftSyncActionsRet, 4));
};


/**
 * @param {?proto.prpc.RaftSyncActionsRet|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setSyncActionsRet = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearSyncActionsRet = function() {
  return this.setSyncActionsRet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasSyncActionsRet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RaftPing ping = 5;
 * @return {?proto.prpc.RaftPing}
 */
proto.prpc.RaftMsg.prototype.getPing = function() {
  return /** @type{?proto.prpc.RaftPing} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftPing, 5));
};


/**
 * @param {?proto.prpc.RaftPing|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setPing = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasPing = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RaftPong pong = 6;
 * @return {?proto.prpc.RaftPong}
 */
proto.prpc.RaftMsg.prototype.getPong = function() {
  return /** @type{?proto.prpc.RaftPong} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftPong, 6));
};


/**
 * @param {?proto.prpc.RaftPong|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setPong = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasPong = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RaftElection election = 7;
 * @return {?proto.prpc.RaftElection}
 */
proto.prpc.RaftMsg.prototype.getElection = function() {
  return /** @type{?proto.prpc.RaftElection} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftElection, 7));
};


/**
 * @param {?proto.prpc.RaftElection|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setElection = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearElection = function() {
  return this.setElection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasElection = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RaftElectionRet election_ret = 8;
 * @return {?proto.prpc.RaftElectionRet}
 */
proto.prpc.RaftMsg.prototype.getElectionRet = function() {
  return /** @type{?proto.prpc.RaftElectionRet} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftElectionRet, 8));
};


/**
 * @param {?proto.prpc.RaftElectionRet|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setElectionRet = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearElectionRet = function() {
  return this.setElectionRet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasElectionRet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RaftReqActions req_actions = 9;
 * @return {?proto.prpc.RaftReqActions}
 */
proto.prpc.RaftMsg.prototype.getReqActions = function() {
  return /** @type{?proto.prpc.RaftReqActions} */ (
    jspb.Message.getWrapperField(this, proto.prpc.RaftReqActions, 9));
};


/**
 * @param {?proto.prpc.RaftReqActions|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setReqActions = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearReqActions = function() {
  return this.setReqActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasReqActions = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SlotMsg slot_msg = 10;
 * @return {?proto.prpc.SlotMsg}
 */
proto.prpc.RaftMsg.prototype.getSlotMsg = function() {
  return /** @type{?proto.prpc.SlotMsg} */ (
    jspb.Message.getWrapperField(this, proto.prpc.SlotMsg, 10));
};


/**
 * @param {?proto.prpc.SlotMsg|undefined} value
 * @return {!proto.prpc.RaftMsg} returns this
*/
proto.prpc.RaftMsg.prototype.setSlotMsg = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RaftMsg} returns this
 */
proto.prpc.RaftMsg.prototype.clearSlotMsg = function() {
  return this.setSlotMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RaftMsg.prototype.hasSlotMsg = function() {
  return jspb.Message.getField(this, 10) != null;
};


goog.object.extend(exports, proto.prpc);
