// source: bt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.prpc.BtFile', null, global);
goog.exportSymbol('proto.prpc.BtFile.State', null, global);
goog.exportSymbol('proto.prpc.BtStateEnum', null, global);
goog.exportSymbol('proto.prpc.DownloadRequest', null, global);
goog.exportSymbol('proto.prpc.DownloadRequest.ReqType', null, global);
goog.exportSymbol('proto.prpc.DownloadRespone', null, global);
goog.exportSymbol('proto.prpc.FileCompletedReq', null, global);
goog.exportSymbol('proto.prpc.FileCompletedRes', null, global);
goog.exportSymbol('proto.prpc.FileProgressReq', null, global);
goog.exportSymbol('proto.prpc.FileProgressRes', null, global);
goog.exportSymbol('proto.prpc.GetMagnetUriReq', null, global);
goog.exportSymbol('proto.prpc.GetMagnetUriReq.ReqType', null, global);
goog.exportSymbol('proto.prpc.GetMagnetUriRsp', null, global);
goog.exportSymbol('proto.prpc.InfoHash', null, global);
goog.exportSymbol('proto.prpc.RemoveTorrentReq', null, global);
goog.exportSymbol('proto.prpc.RemoveTorrentRes', null, global);
goog.exportSymbol('proto.prpc.StatusRequest', null, global);
goog.exportSymbol('proto.prpc.StatusRespone', null, global);
goog.exportSymbol('proto.prpc.TorrentInfo', null, global);
goog.exportSymbol('proto.prpc.TorrentInfoReq', null, global);
goog.exportSymbol('proto.prpc.TorrentInfoRes', null, global);
goog.exportSymbol('proto.prpc.TorrentStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.DownloadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.DownloadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.DownloadRequest.displayName = 'proto.prpc.DownloadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.InfoHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.InfoHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.InfoHash.displayName = 'proto.prpc.InfoHash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.DownloadRespone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.DownloadRespone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.DownloadRespone.displayName = 'proto.prpc.DownloadRespone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.GetMagnetUriReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.GetMagnetUriReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.GetMagnetUriReq.displayName = 'proto.prpc.GetMagnetUriReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.GetMagnetUriRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.GetMagnetUriRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.GetMagnetUriRsp.displayName = 'proto.prpc.GetMagnetUriRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.StatusRequest.repeatedFields_, null);
};
goog.inherits(proto.prpc.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.StatusRequest.displayName = 'proto.prpc.StatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.TorrentStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.TorrentStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.TorrentStatus.displayName = 'proto.prpc.TorrentStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.StatusRespone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.StatusRespone.repeatedFields_, null);
};
goog.inherits(proto.prpc.StatusRespone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.StatusRespone.displayName = 'proto.prpc.StatusRespone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.TorrentInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.TorrentInfoReq.repeatedFields_, null);
};
goog.inherits(proto.prpc.TorrentInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.TorrentInfoReq.displayName = 'proto.prpc.TorrentInfoReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.BtFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.BtFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.BtFile.displayName = 'proto.prpc.BtFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.TorrentInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.TorrentInfo.repeatedFields_, null);
};
goog.inherits(proto.prpc.TorrentInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.TorrentInfo.displayName = 'proto.prpc.TorrentInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.TorrentInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.TorrentInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.TorrentInfoRes.displayName = 'proto.prpc.TorrentInfoRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RemoveTorrentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RemoveTorrentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RemoveTorrentReq.displayName = 'proto.prpc.RemoveTorrentReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.RemoveTorrentRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.RemoveTorrentRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.RemoveTorrentRes.displayName = 'proto.prpc.RemoveTorrentRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.FileProgressReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.FileProgressReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.FileProgressReq.displayName = 'proto.prpc.FileProgressReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.FileProgressRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.prpc.FileProgressRes.repeatedFields_, null);
};
goog.inherits(proto.prpc.FileProgressRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.FileProgressRes.displayName = 'proto.prpc.FileProgressRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.FileCompletedReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.FileCompletedReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.FileCompletedReq.displayName = 'proto.prpc.FileCompletedReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.prpc.FileCompletedRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.prpc.FileCompletedRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.prpc.FileCompletedRes.displayName = 'proto.prpc.FileCompletedRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.DownloadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.DownloadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.DownloadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.DownloadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: msg.getContent_asB64(),
    savePath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.DownloadRequest}
 */
proto.prpc.DownloadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.DownloadRequest;
  return proto.prpc.DownloadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.DownloadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.DownloadRequest}
 */
proto.prpc.DownloadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prpc.DownloadRequest.ReqType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSavePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.DownloadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.DownloadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.DownloadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.DownloadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSavePath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.DownloadRequest.ReqType = {
  MAGNETURI: 0,
  TORRENT: 1,
  RESUME: 2
};

/**
 * optional ReqType type = 1;
 * @return {!proto.prpc.DownloadRequest.ReqType}
 */
proto.prpc.DownloadRequest.prototype.getType = function() {
  return /** @type {!proto.prpc.DownloadRequest.ReqType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prpc.DownloadRequest.ReqType} value
 * @return {!proto.prpc.DownloadRequest} returns this
 */
proto.prpc.DownloadRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.prpc.DownloadRequest.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.prpc.DownloadRequest.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.prpc.DownloadRequest.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prpc.DownloadRequest} returns this
 */
proto.prpc.DownloadRequest.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string save_path = 3;
 * @return {string}
 */
proto.prpc.DownloadRequest.prototype.getSavePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.DownloadRequest} returns this
 */
proto.prpc.DownloadRequest.prototype.setSavePath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.InfoHash.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.InfoHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.InfoHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.InfoHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.InfoHash}
 */
proto.prpc.InfoHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.InfoHash;
  return proto.prpc.InfoHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.InfoHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.InfoHash}
 */
proto.prpc.InfoHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.InfoHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.InfoHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.InfoHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.InfoHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.prpc.InfoHash.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.InfoHash} returns this
 */
proto.prpc.InfoHash.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.prpc.InfoHash.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.prpc.InfoHash.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.prpc.InfoHash.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prpc.InfoHash} returns this
 */
proto.prpc.InfoHash.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.DownloadRespone.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.DownloadRespone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.DownloadRespone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.DownloadRespone.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.DownloadRespone}
 */
proto.prpc.DownloadRespone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.DownloadRespone;
  return proto.prpc.DownloadRespone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.DownloadRespone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.DownloadRespone}
 */
proto.prpc.DownloadRespone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.DownloadRespone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.DownloadRespone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.DownloadRespone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.DownloadRespone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.DownloadRespone.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.DownloadRespone} returns this
*/
proto.prpc.DownloadRespone.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.DownloadRespone} returns this
 */
proto.prpc.DownloadRespone.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.DownloadRespone.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.GetMagnetUriReq.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.GetMagnetUriReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.GetMagnetUriReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.GetMagnetUriReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: msg.getContent_asB64(),
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.GetMagnetUriReq}
 */
proto.prpc.GetMagnetUriReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.GetMagnetUriReq;
  return proto.prpc.GetMagnetUriReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.GetMagnetUriReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.GetMagnetUriReq}
 */
proto.prpc.GetMagnetUriReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.prpc.GetMagnetUriReq.ReqType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 3:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.GetMagnetUriReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.GetMagnetUriReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.GetMagnetUriReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.GetMagnetUriReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.GetMagnetUriReq.ReqType = {
  TORRENT: 0,
  INFOHASH: 1
};

/**
 * optional ReqType type = 1;
 * @return {!proto.prpc.GetMagnetUriReq.ReqType}
 */
proto.prpc.GetMagnetUriReq.prototype.getType = function() {
  return /** @type {!proto.prpc.GetMagnetUriReq.ReqType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.prpc.GetMagnetUriReq.ReqType} value
 * @return {!proto.prpc.GetMagnetUriReq} returns this
 */
proto.prpc.GetMagnetUriReq.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.prpc.GetMagnetUriReq.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content = 2;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.prpc.GetMagnetUriReq.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.prpc.GetMagnetUriReq.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prpc.GetMagnetUriReq} returns this
 */
proto.prpc.GetMagnetUriReq.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional InfoHash info_hash = 3;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.GetMagnetUriReq.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 3));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.GetMagnetUriReq} returns this
*/
proto.prpc.GetMagnetUriReq.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.GetMagnetUriReq} returns this
 */
proto.prpc.GetMagnetUriReq.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.GetMagnetUriReq.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.GetMagnetUriRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.GetMagnetUriRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.GetMagnetUriRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.GetMagnetUriRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f),
    magnetUri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.GetMagnetUriRsp}
 */
proto.prpc.GetMagnetUriRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.GetMagnetUriRsp;
  return proto.prpc.GetMagnetUriRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.GetMagnetUriRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.GetMagnetUriRsp}
 */
proto.prpc.GetMagnetUriRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMagnetUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.GetMagnetUriRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.GetMagnetUriRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.GetMagnetUriRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.GetMagnetUriRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
  f = message.getMagnetUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.GetMagnetUriRsp.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.GetMagnetUriRsp} returns this
*/
proto.prpc.GetMagnetUriRsp.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.GetMagnetUriRsp} returns this
 */
proto.prpc.GetMagnetUriRsp.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.GetMagnetUriRsp.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string magnet_uri = 2;
 * @return {string}
 */
proto.prpc.GetMagnetUriRsp.prototype.getMagnetUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.GetMagnetUriRsp} returns this
 */
proto.prpc.GetMagnetUriRsp.prototype.setMagnetUri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.StatusRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHashList: jspb.Message.toObjectList(msg.getInfoHashList(),
    proto.prpc.InfoHash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.StatusRequest}
 */
proto.prpc.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.StatusRequest;
  return proto.prpc.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.StatusRequest}
 */
proto.prpc.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.addInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHashList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InfoHash info_hash = 1;
 * @return {!Array<!proto.prpc.InfoHash>}
 */
proto.prpc.StatusRequest.prototype.getInfoHashList = function() {
  return /** @type{!Array<!proto.prpc.InfoHash>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {!Array<!proto.prpc.InfoHash>} value
 * @return {!proto.prpc.StatusRequest} returns this
*/
proto.prpc.StatusRequest.prototype.setInfoHashList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prpc.InfoHash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.InfoHash}
 */
proto.prpc.StatusRequest.prototype.addInfoHash = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prpc.InfoHash, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.StatusRequest} returns this
 */
proto.prpc.StatusRequest.prototype.clearInfoHashList = function() {
  return this.setInfoHashList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.TorrentStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.TorrentStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.TorrentStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    downloadPayloadRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalDone: jspb.Message.getFieldWithDefault(msg, 4, 0),
    total: jspb.Message.getFieldWithDefault(msg, 5, 0),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    numPeers: jspb.Message.getFieldWithDefault(msg, 7, 0),
    state: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.TorrentStatus}
 */
proto.prpc.TorrentStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.TorrentStatus;
  return proto.prpc.TorrentStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.TorrentStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.TorrentStatus}
 */
proto.prpc.TorrentStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownloadPayloadRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalDone(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumPeers(value);
      break;
    case 8:
      var value = /** @type {!proto.prpc.BtStateEnum} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.TorrentStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.TorrentStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.TorrentStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDownloadPayloadRate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalDone();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getNumPeers();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.TorrentStatus.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.TorrentStatus} returns this
*/
proto.prpc.TorrentStatus.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.TorrentStatus.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.prpc.TorrentStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 download_payload_rate = 3;
 * @return {number}
 */
proto.prpc.TorrentStatus.prototype.getDownloadPayloadRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setDownloadPayloadRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total_done = 4;
 * @return {number}
 */
proto.prpc.TorrentStatus.prototype.getTotalDone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setTotalDone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 total = 5;
 * @return {number}
 */
proto.prpc.TorrentStatus.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float progress = 6;
 * @return {number}
 */
proto.prpc.TorrentStatus.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 num_peers = 7;
 * @return {number}
 */
proto.prpc.TorrentStatus.prototype.getNumPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setNumPeers = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional BtStateEnum state = 8;
 * @return {!proto.prpc.BtStateEnum}
 */
proto.prpc.TorrentStatus.prototype.getState = function() {
  return /** @type {!proto.prpc.BtStateEnum} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.prpc.BtStateEnum} value
 * @return {!proto.prpc.TorrentStatus} returns this
 */
proto.prpc.TorrentStatus.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.StatusRespone.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.StatusRespone.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.StatusRespone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.StatusRespone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.StatusRespone.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusArrayList: jspb.Message.toObjectList(msg.getStatusArrayList(),
    proto.prpc.TorrentStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.StatusRespone}
 */
proto.prpc.StatusRespone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.StatusRespone;
  return proto.prpc.StatusRespone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.StatusRespone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.StatusRespone}
 */
proto.prpc.StatusRespone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.TorrentStatus;
      reader.readMessage(value,proto.prpc.TorrentStatus.deserializeBinaryFromReader);
      msg.addStatusArray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.StatusRespone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.StatusRespone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.StatusRespone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.StatusRespone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusArrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prpc.TorrentStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TorrentStatus status_array = 1;
 * @return {!Array<!proto.prpc.TorrentStatus>}
 */
proto.prpc.StatusRespone.prototype.getStatusArrayList = function() {
  return /** @type{!Array<!proto.prpc.TorrentStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.TorrentStatus, 1));
};


/**
 * @param {!Array<!proto.prpc.TorrentStatus>} value
 * @return {!proto.prpc.StatusRespone} returns this
*/
proto.prpc.StatusRespone.prototype.setStatusArrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prpc.TorrentStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.TorrentStatus}
 */
proto.prpc.StatusRespone.prototype.addStatusArray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prpc.TorrentStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.StatusRespone} returns this
 */
proto.prpc.StatusRespone.prototype.clearStatusArrayList = function() {
  return this.setStatusArrayList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.TorrentInfoReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.TorrentInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.TorrentInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.TorrentInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHashList: jspb.Message.toObjectList(msg.getInfoHashList(),
    proto.prpc.InfoHash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.TorrentInfoReq}
 */
proto.prpc.TorrentInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.TorrentInfoReq;
  return proto.prpc.TorrentInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.TorrentInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.TorrentInfoReq}
 */
proto.prpc.TorrentInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.addInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.TorrentInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.TorrentInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.TorrentInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHashList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InfoHash info_hash = 1;
 * @return {!Array<!proto.prpc.InfoHash>}
 */
proto.prpc.TorrentInfoReq.prototype.getInfoHashList = function() {
  return /** @type{!Array<!proto.prpc.InfoHash>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {!Array<!proto.prpc.InfoHash>} value
 * @return {!proto.prpc.TorrentInfoReq} returns this
*/
proto.prpc.TorrentInfoReq.prototype.setInfoHashList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.prpc.InfoHash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.InfoHash}
 */
proto.prpc.TorrentInfoReq.prototype.addInfoHash = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.prpc.InfoHash, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.TorrentInfoReq} returns this
 */
proto.prpc.TorrentInfoReq.prototype.clearInfoHashList = function() {
  return this.setInfoHashList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.BtFile.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.BtFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.BtFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.BtFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    st: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    downloaded: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.BtFile}
 */
proto.prpc.BtFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.BtFile;
  return proto.prpc.BtFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.BtFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.BtFile}
 */
proto.prpc.BtFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!proto.prpc.BtFile.State} */ (reader.readEnum());
      msg.setSt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDownloaded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.BtFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.BtFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.BtFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.BtFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSt();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTotalSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getDownloaded();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.prpc.BtFile.State = {
  STOP: 0,
  DOWNLOADING: 1,
  COMPLETED: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.prpc.BtFile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.BtFile} returns this
 */
proto.prpc.BtFile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.prpc.BtFile.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.BtFile} returns this
 */
proto.prpc.BtFile.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional State st = 3;
 * @return {!proto.prpc.BtFile.State}
 */
proto.prpc.BtFile.prototype.getSt = function() {
  return /** @type {!proto.prpc.BtFile.State} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.prpc.BtFile.State} value
 * @return {!proto.prpc.BtFile} returns this
 */
proto.prpc.BtFile.prototype.setSt = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 total_size = 4;
 * @return {number}
 */
proto.prpc.BtFile.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.BtFile} returns this
 */
proto.prpc.BtFile.prototype.setTotalSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 downloaded = 5;
 * @return {number}
 */
proto.prpc.BtFile.prototype.getDownloaded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.BtFile} returns this
 */
proto.prpc.BtFile.prototype.setDownloaded = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.TorrentInfo.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.TorrentInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.TorrentInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.TorrentInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    savePath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.prpc.BtFile.toObject, includeInstance),
    totalSize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pieceLength: jspb.Message.getFieldWithDefault(msg, 7, 0),
    numPieces: jspb.Message.getFieldWithDefault(msg, 8, 0),
    resumeData: msg.getResumeData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.TorrentInfo}
 */
proto.prpc.TorrentInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.TorrentInfo;
  return proto.prpc.TorrentInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.TorrentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.TorrentInfo}
 */
proto.prpc.TorrentInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.prpc.BtStateEnum} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSavePath(value);
      break;
    case 5:
      var value = new proto.prpc.BtFile;
      reader.readMessage(value,proto.prpc.BtFile.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPieceLength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumPieces(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResumeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.TorrentInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.TorrentInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.TorrentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSavePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.prpc.BtFile.serializeBinaryToWriter
    );
  }
  f = message.getTotalSize();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPieceLength();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNumPieces();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getResumeData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.TorrentInfo.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.TorrentInfo} returns this
*/
proto.prpc.TorrentInfo.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.TorrentInfo.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.prpc.TorrentInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BtStateEnum state = 3;
 * @return {!proto.prpc.BtStateEnum}
 */
proto.prpc.TorrentInfo.prototype.getState = function() {
  return /** @type {!proto.prpc.BtStateEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.prpc.BtStateEnum} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string save_path = 4;
 * @return {string}
 */
proto.prpc.TorrentInfo.prototype.getSavePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setSavePath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated BtFile files = 5;
 * @return {!Array<!proto.prpc.BtFile>}
 */
proto.prpc.TorrentInfo.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.prpc.BtFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.BtFile, 5));
};


/**
 * @param {!Array<!proto.prpc.BtFile>} value
 * @return {!proto.prpc.TorrentInfo} returns this
*/
proto.prpc.TorrentInfo.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.prpc.BtFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.BtFile}
 */
proto.prpc.TorrentInfo.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.prpc.BtFile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional int64 total_size = 6;
 * @return {number}
 */
proto.prpc.TorrentInfo.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setTotalSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 piece_length = 7;
 * @return {number}
 */
proto.prpc.TorrentInfo.prototype.getPieceLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setPieceLength = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 num_pieces = 8;
 * @return {number}
 */
proto.prpc.TorrentInfo.prototype.getNumPieces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setNumPieces = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes resume_data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.prpc.TorrentInfo.prototype.getResumeData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes resume_data = 9;
 * This is a type-conversion wrapper around `getResumeData()`
 * @return {string}
 */
proto.prpc.TorrentInfo.prototype.getResumeData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResumeData()));
};


/**
 * optional bytes resume_data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResumeData()`
 * @return {!Uint8Array}
 */
proto.prpc.TorrentInfo.prototype.getResumeData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResumeData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.prpc.TorrentInfo} returns this
 */
proto.prpc.TorrentInfo.prototype.setResumeData = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.TorrentInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.TorrentInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.TorrentInfoRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    ti: (f = msg.getTi()) && proto.prpc.TorrentInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.TorrentInfoRes}
 */
proto.prpc.TorrentInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.TorrentInfoRes;
  return proto.prpc.TorrentInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.TorrentInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.TorrentInfoRes}
 */
proto.prpc.TorrentInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.TorrentInfo;
      reader.readMessage(value,proto.prpc.TorrentInfo.deserializeBinaryFromReader);
      msg.setTi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.TorrentInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.TorrentInfoRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.TorrentInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.TorrentInfoRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTi();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.TorrentInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TorrentInfo ti = 1;
 * @return {?proto.prpc.TorrentInfo}
 */
proto.prpc.TorrentInfoRes.prototype.getTi = function() {
  return /** @type{?proto.prpc.TorrentInfo} */ (
    jspb.Message.getWrapperField(this, proto.prpc.TorrentInfo, 1));
};


/**
 * @param {?proto.prpc.TorrentInfo|undefined} value
 * @return {!proto.prpc.TorrentInfoRes} returns this
*/
proto.prpc.TorrentInfoRes.prototype.setTi = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.TorrentInfoRes} returns this
 */
proto.prpc.TorrentInfoRes.prototype.clearTi = function() {
  return this.setTi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.TorrentInfoRes.prototype.hasTi = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RemoveTorrentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RemoveTorrentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RemoveTorrentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RemoveTorrentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RemoveTorrentReq}
 */
proto.prpc.RemoveTorrentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RemoveTorrentReq;
  return proto.prpc.RemoveTorrentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RemoveTorrentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RemoveTorrentReq}
 */
proto.prpc.RemoveTorrentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RemoveTorrentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RemoveTorrentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RemoveTorrentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RemoveTorrentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.RemoveTorrentReq.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.RemoveTorrentReq} returns this
*/
proto.prpc.RemoveTorrentReq.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.RemoveTorrentReq} returns this
 */
proto.prpc.RemoveTorrentReq.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.RemoveTorrentReq.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.RemoveTorrentRes.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.RemoveTorrentRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.RemoveTorrentRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RemoveTorrentRes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.RemoveTorrentRes}
 */
proto.prpc.RemoveTorrentRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.RemoveTorrentRes;
  return proto.prpc.RemoveTorrentRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.RemoveTorrentRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.RemoveTorrentRes}
 */
proto.prpc.RemoveTorrentRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.RemoveTorrentRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.RemoveTorrentRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.RemoveTorrentRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.RemoveTorrentRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.FileProgressReq.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.FileProgressReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.FileProgressReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileProgressReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.FileProgressReq}
 */
proto.prpc.FileProgressReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.FileProgressReq;
  return proto.prpc.FileProgressReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.FileProgressReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.FileProgressReq}
 */
proto.prpc.FileProgressReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.FileProgressReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.FileProgressReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.FileProgressReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileProgressReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.FileProgressReq.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.FileProgressReq} returns this
*/
proto.prpc.FileProgressReq.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.FileProgressReq} returns this
 */
proto.prpc.FileProgressReq.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.FileProgressReq.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.prpc.FileProgressRes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.FileProgressRes.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.FileProgressRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.FileProgressRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileProgressRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f),
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.prpc.BtFile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.FileProgressRes}
 */
proto.prpc.FileProgressRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.FileProgressRes;
  return proto.prpc.FileProgressRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.FileProgressRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.FileProgressRes}
 */
proto.prpc.FileProgressRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    case 2:
      var value = new proto.prpc.BtFile;
      reader.readMessage(value,proto.prpc.BtFile.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.FileProgressRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.FileProgressRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.FileProgressRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileProgressRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.prpc.BtFile.serializeBinaryToWriter
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.FileProgressRes.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.FileProgressRes} returns this
*/
proto.prpc.FileProgressRes.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.FileProgressRes} returns this
 */
proto.prpc.FileProgressRes.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.FileProgressRes.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated BtFile files = 2;
 * @return {!Array<!proto.prpc.BtFile>}
 */
proto.prpc.FileProgressRes.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.prpc.BtFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.prpc.BtFile, 2));
};


/**
 * @param {!Array<!proto.prpc.BtFile>} value
 * @return {!proto.prpc.FileProgressRes} returns this
*/
proto.prpc.FileProgressRes.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.prpc.BtFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.prpc.BtFile}
 */
proto.prpc.FileProgressRes.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.prpc.BtFile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.prpc.FileProgressRes} returns this
 */
proto.prpc.FileProgressRes.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.FileCompletedReq.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.FileCompletedReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.FileCompletedReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileCompletedReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.FileCompletedReq}
 */
proto.prpc.FileCompletedReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.FileCompletedReq;
  return proto.prpc.FileCompletedReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.FileCompletedReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.FileCompletedReq}
 */
proto.prpc.FileCompletedReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.FileCompletedReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.FileCompletedReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.FileCompletedReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileCompletedReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.prpc.FileCompletedRes.prototype.toObject = function(opt_includeInstance) {
  return proto.prpc.FileCompletedRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.prpc.FileCompletedRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileCompletedRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    infoHash: (f = msg.getInfoHash()) && proto.prpc.InfoHash.toObject(includeInstance, f),
    fileIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.prpc.FileCompletedRes}
 */
proto.prpc.FileCompletedRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.prpc.FileCompletedRes;
  return proto.prpc.FileCompletedRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.prpc.FileCompletedRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.prpc.FileCompletedRes}
 */
proto.prpc.FileCompletedRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.prpc.InfoHash;
      reader.readMessage(value,proto.prpc.InfoHash.deserializeBinaryFromReader);
      msg.setInfoHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFileIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.prpc.FileCompletedRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.prpc.FileCompletedRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.prpc.FileCompletedRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.prpc.FileCompletedRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfoHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.prpc.InfoHash.serializeBinaryToWriter
    );
  }
  f = message.getFileIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional InfoHash info_hash = 1;
 * @return {?proto.prpc.InfoHash}
 */
proto.prpc.FileCompletedRes.prototype.getInfoHash = function() {
  return /** @type{?proto.prpc.InfoHash} */ (
    jspb.Message.getWrapperField(this, proto.prpc.InfoHash, 1));
};


/**
 * @param {?proto.prpc.InfoHash|undefined} value
 * @return {!proto.prpc.FileCompletedRes} returns this
*/
proto.prpc.FileCompletedRes.prototype.setInfoHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.prpc.FileCompletedRes} returns this
 */
proto.prpc.FileCompletedRes.prototype.clearInfoHash = function() {
  return this.setInfoHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.prpc.FileCompletedRes.prototype.hasInfoHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 file_index = 2;
 * @return {number}
 */
proto.prpc.FileCompletedRes.prototype.getFileIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.prpc.FileCompletedRes} returns this
 */
proto.prpc.FileCompletedRes.prototype.setFileIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.prpc.BtStateEnum = {
  UNKNOWN: 0,
  CHECKING_FILES: 1,
  DOWNLOADING_METADATA: 2,
  DOWNLOADING: 3,
  FINISHED: 4,
  SEEDING: 5,
  CHECKING_RESUME_DATA: 7
};

goog.object.extend(exports, proto.prpc);
