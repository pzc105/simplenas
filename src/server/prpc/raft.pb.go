// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v4.24.3
// source: raft.proto

package prpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftTransaction_Type int32

const (
	RaftTransaction_Unknown        RaftTransaction_Type = 0
	RaftTransaction_NewNode        RaftTransaction_Type = 1
	RaftTransaction_HashSlotAction RaftTransaction_Type = 2
)

// Enum value maps for RaftTransaction_Type.
var (
	RaftTransaction_Type_name = map[int32]string{
		0: "Unknown",
		1: "NewNode",
		2: "HashSlotAction",
	}
	RaftTransaction_Type_value = map[string]int32{
		"Unknown":        0,
		"NewNode":        1,
		"HashSlotAction": 2,
	}
)

func (x RaftTransaction_Type) Enum() *RaftTransaction_Type {
	p := new(RaftTransaction_Type)
	*p = x
	return p
}

func (x RaftTransaction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftTransaction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[0].Descriptor()
}

func (RaftTransaction_Type) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[0]
}

func (x RaftTransaction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftTransaction_Type.Descriptor instead.
func (RaftTransaction_Type) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2, 0}
}

type RaftMsg_Type int32

const (
	RaftMsg_Unknown       RaftMsg_Type = 0
	RaftMsg_Action        RaftMsg_Type = 1
	RaftMsg_SyncAction    RaftMsg_Type = 2
	RaftMsg_SyncActionRet RaftMsg_Type = 3
	RaftMsg_Ping          RaftMsg_Type = 4
	RaftMsg_Pong          RaftMsg_Type = 5
	RaftMsg_Election      RaftMsg_Type = 6
	RaftMsg_ElectionRet   RaftMsg_Type = 7
	RaftMsg_ReqActions    RaftMsg_Type = 8
	RaftMsg_SendMsg2Slot  RaftMsg_Type = 9
)

// Enum value maps for RaftMsg_Type.
var (
	RaftMsg_Type_name = map[int32]string{
		0: "Unknown",
		1: "Action",
		2: "SyncAction",
		3: "SyncActionRet",
		4: "Ping",
		5: "Pong",
		6: "Election",
		7: "ElectionRet",
		8: "ReqActions",
		9: "SendMsg2Slot",
	}
	RaftMsg_Type_value = map[string]int32{
		"Unknown":       0,
		"Action":        1,
		"SyncAction":    2,
		"SyncActionRet": 3,
		"Ping":          4,
		"Pong":          5,
		"Election":      6,
		"ElectionRet":   7,
		"ReqActions":    8,
		"SendMsg2Slot":  9,
	}
)

func (x RaftMsg_Type) Enum() *RaftMsg_Type {
	p := new(RaftMsg_Type)
	*p = x
	return p
}

func (x RaftMsg_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftMsg_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[1].Descriptor()
}

func (RaftMsg_Type) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[1]
}

func (x RaftMsg_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftMsg_Type.Descriptor instead.
func (RaftMsg_Type) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{12, 0}
}

type NewNodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId      string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	MyAddress string `protobuf:"bytes,2,opt,name=my_address,json=myAddress,proto3" json:"my_address,omitempty"`
	Role      int32  `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *NewNodeAction) Reset() {
	*x = NewNodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNodeAction) ProtoMessage() {}

func (x *NewNodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNodeAction.ProtoReflect.Descriptor instead.
func (*NewNodeAction) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

func (x *NewNodeAction) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *NewNodeAction) GetMyAddress() string {
	if x != nil {
		return x.MyAddress
	}
	return ""
}

func (x *NewNodeAction) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type HashSlotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId  string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	Step  int32  `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	Slots []byte `protobuf:"bytes,3,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *HashSlotAction) Reset() {
	*x = HashSlotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashSlotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashSlotAction) ProtoMessage() {}

func (x *HashSlotAction) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashSlotAction.ProtoReflect.Descriptor instead.
func (*HashSlotAction) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

func (x *HashSlotAction) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *HashSlotAction) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *HashSlotAction) GetSlots() []byte {
	if x != nil {
		return x.Slots
	}
	return nil
}

type RaftTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId     string               `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	Type     RaftTransaction_Type `protobuf:"varint,2,opt,name=type,proto3,enum=prpc.RaftTransaction_Type" json:"type,omitempty"`
	Epoch    int64                `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	UserRef  string               `protobuf:"bytes,4,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
	NewNode  *NewNodeAction       `protobuf:"bytes,5,opt,name=new_node,json=newNode,proto3" json:"new_node,omitempty"`
	HashSlot *HashSlotAction      `protobuf:"bytes,6,opt,name=hash_slot,json=hashSlot,proto3" json:"hash_slot,omitempty"`
}

func (x *RaftTransaction) Reset() {
	*x = RaftTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftTransaction) ProtoMessage() {}

func (x *RaftTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftTransaction.ProtoReflect.Descriptor instead.
func (*RaftTransaction) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

func (x *RaftTransaction) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftTransaction) GetType() RaftTransaction_Type {
	if x != nil {
		return x.Type
	}
	return RaftTransaction_Unknown
}

func (x *RaftTransaction) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RaftTransaction) GetUserRef() string {
	if x != nil {
		return x.UserRef
	}
	return ""
}

func (x *RaftTransaction) GetNewNode() *NewNodeAction {
	if x != nil {
		return x.NewNode
	}
	return nil
}

func (x *RaftTransaction) GetHashSlot() *HashSlotAction {
	if x != nil {
		return x.HashSlot
	}
	return nil
}

type NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId  string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	State int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NodeState) Reset() {
	*x = NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeState) ProtoMessage() {}

func (x *NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeState.ProtoReflect.Descriptor instead.
func (*NodeState) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

func (x *NodeState) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *NodeState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type RaftPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId          string       `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	Role          int32        `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	CurrentEpoch  int64        `protobuf:"varint,3,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	CommitedEpoch int64        `protobuf:"varint,4,opt,name=commited_epoch,json=commitedEpoch,proto3" json:"commited_epoch,omitempty"`
	VoteEpoch     int64        `protobuf:"varint,5,opt,name=vote_epoch,json=voteEpoch,proto3" json:"vote_epoch,omitempty"`
	NodeStates    []*NodeState `protobuf:"bytes,6,rep,name=node_states,json=nodeStates,proto3" json:"node_states,omitempty"`
	MasterAddress string       `protobuf:"bytes,7,opt,name=master_address,json=masterAddress,proto3" json:"master_address,omitempty"`
}

func (x *RaftPing) Reset() {
	*x = RaftPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPing) ProtoMessage() {}

func (x *RaftPing) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPing.ProtoReflect.Descriptor instead.
func (*RaftPing) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{4}
}

func (x *RaftPing) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftPing) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *RaftPing) GetCurrentEpoch() int64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *RaftPing) GetCommitedEpoch() int64 {
	if x != nil {
		return x.CommitedEpoch
	}
	return 0
}

func (x *RaftPing) GetVoteEpoch() int64 {
	if x != nil {
		return x.VoteEpoch
	}
	return 0
}

func (x *RaftPing) GetNodeStates() []*NodeState {
	if x != nil {
		return x.NodeStates
	}
	return nil
}

func (x *RaftPing) GetMasterAddress() string {
	if x != nil {
		return x.MasterAddress
	}
	return ""
}

type RaftPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	Role int32  `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RaftPong) Reset() {
	*x = RaftPong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPong) ProtoMessage() {}

func (x *RaftPong) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPong.ProtoReflect.Descriptor instead.
func (*RaftPong) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{5}
}

func (x *RaftPong) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftPong) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type RaftElection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId      string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	VoteEpoch int64  `protobuf:"varint,2,opt,name=vote_epoch,json=voteEpoch,proto3" json:"vote_epoch,omitempty"`
}

func (x *RaftElection) Reset() {
	*x = RaftElection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftElection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftElection) ProtoMessage() {}

func (x *RaftElection) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftElection.ProtoReflect.Descriptor instead.
func (*RaftElection) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{6}
}

func (x *RaftElection) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftElection) GetVoteEpoch() int64 {
	if x != nil {
		return x.VoteEpoch
	}
	return 0
}

type RaftElectionRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId      string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	GotVoteId string `protobuf:"bytes,2,opt,name=got_vote_id,json=gotVoteId,proto3" json:"got_vote_id,omitempty"`
	VoteEpoch int64  `protobuf:"varint,3,opt,name=vote_epoch,json=voteEpoch,proto3" json:"vote_epoch,omitempty"`
	Success   bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RaftElectionRet) Reset() {
	*x = RaftElectionRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftElectionRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftElectionRet) ProtoMessage() {}

func (x *RaftElectionRet) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftElectionRet.ProtoReflect.Descriptor instead.
func (*RaftElectionRet) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{7}
}

func (x *RaftElectionRet) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftElectionRet) GetGotVoteId() string {
	if x != nil {
		return x.GotVoteId
	}
	return ""
}

func (x *RaftElectionRet) GetVoteEpoch() int64 {
	if x != nil {
		return x.VoteEpoch
	}
	return 0
}

func (x *RaftElectionRet) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RaftSyncActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId          string             `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	CurrentEpoch  int64              `protobuf:"varint,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	CommitedEpoch int64              `protobuf:"varint,3,opt,name=commited_epoch,json=commitedEpoch,proto3" json:"commited_epoch,omitempty"`
	Actions       []*RaftTransaction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *RaftSyncActions) Reset() {
	*x = RaftSyncActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftSyncActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftSyncActions) ProtoMessage() {}

func (x *RaftSyncActions) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftSyncActions.ProtoReflect.Descriptor instead.
func (*RaftSyncActions) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{8}
}

func (x *RaftSyncActions) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftSyncActions) GetCurrentEpoch() int64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *RaftSyncActions) GetCommitedEpoch() int64 {
	if x != nil {
		return x.CommitedEpoch
	}
	return 0
}

func (x *RaftSyncActions) GetActions() []*RaftTransaction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type RaftSyncActionsRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId         string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	CurrentEpoch int64  `protobuf:"varint,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
}

func (x *RaftSyncActionsRet) Reset() {
	*x = RaftSyncActionsRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftSyncActionsRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftSyncActionsRet) ProtoMessage() {}

func (x *RaftSyncActionsRet) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftSyncActionsRet.ProtoReflect.Descriptor instead.
func (*RaftSyncActionsRet) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{9}
}

func (x *RaftSyncActionsRet) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftSyncActionsRet) GetCurrentEpoch() int64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

type RaftReqActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyId          string `protobuf:"bytes,1,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	CommitedEpoch int64  `protobuf:"varint,2,opt,name=commited_epoch,json=commitedEpoch,proto3" json:"commited_epoch,omitempty"`
}

func (x *RaftReqActions) Reset() {
	*x = RaftReqActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftReqActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftReqActions) ProtoMessage() {}

func (x *RaftReqActions) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftReqActions.ProtoReflect.Descriptor instead.
func (*RaftReqActions) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{10}
}

func (x *RaftReqActions) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *RaftReqActions) GetCommitedEpoch() int64 {
	if x != nil {
		return x.CommitedEpoch
	}
	return 0
}

type SlotMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot int32  `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SlotMsg) Reset() {
	*x = SlotMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotMsg) ProtoMessage() {}

func (x *SlotMsg) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotMsg.ProtoReflect.Descriptor instead.
func (*SlotMsg) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{11}
}

func (x *SlotMsg) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SlotMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RaftMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           RaftMsg_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=prpc.RaftMsg_Type" json:"type,omitempty"`
	Action         *RaftTransaction    `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	SyncActions    *RaftSyncActions    `protobuf:"bytes,3,opt,name=sync_actions,json=syncActions,proto3" json:"sync_actions,omitempty"`
	SyncActionsRet *RaftSyncActionsRet `protobuf:"bytes,4,opt,name=sync_actions_ret,json=syncActionsRet,proto3" json:"sync_actions_ret,omitempty"`
	Ping           *RaftPing           `protobuf:"bytes,5,opt,name=ping,proto3" json:"ping,omitempty"`
	Pong           *RaftPong           `protobuf:"bytes,6,opt,name=pong,proto3" json:"pong,omitempty"`
	Election       *RaftElection       `protobuf:"bytes,7,opt,name=election,proto3" json:"election,omitempty"`
	ElectionRet    *RaftElectionRet    `protobuf:"bytes,8,opt,name=election_ret,json=electionRet,proto3" json:"election_ret,omitempty"`
	ReqActions     *RaftReqActions     `protobuf:"bytes,9,opt,name=req_actions,json=reqActions,proto3" json:"req_actions,omitempty"`
	SlotMsg        *SlotMsg            `protobuf:"bytes,10,opt,name=slot_msg,json=slotMsg,proto3" json:"slot_msg,omitempty"`
}

func (x *RaftMsg) Reset() {
	*x = RaftMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMsg) ProtoMessage() {}

func (x *RaftMsg) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMsg.ProtoReflect.Descriptor instead.
func (*RaftMsg) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{12}
}

func (x *RaftMsg) GetType() RaftMsg_Type {
	if x != nil {
		return x.Type
	}
	return RaftMsg_Unknown
}

func (x *RaftMsg) GetAction() *RaftTransaction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RaftMsg) GetSyncActions() *RaftSyncActions {
	if x != nil {
		return x.SyncActions
	}
	return nil
}

func (x *RaftMsg) GetSyncActionsRet() *RaftSyncActionsRet {
	if x != nil {
		return x.SyncActionsRet
	}
	return nil
}

func (x *RaftMsg) GetPing() *RaftPing {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *RaftMsg) GetPong() *RaftPong {
	if x != nil {
		return x.Pong
	}
	return nil
}

func (x *RaftMsg) GetElection() *RaftElection {
	if x != nil {
		return x.Election
	}
	return nil
}

func (x *RaftMsg) GetElectionRet() *RaftElectionRet {
	if x != nil {
		return x.ElectionRet
	}
	return nil
}

func (x *RaftMsg) GetReqActions() *RaftReqActions {
	if x != nil {
		return x.ReqActions
	}
	return nil
}

func (x *RaftMsg) GetSlotMsg() *SlotMsg {
	if x != nil {
		return x.SlotMsg
	}
	return nil
}

var File_raft_proto protoreflect.FileDescriptor

var file_raft_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x72,
	0x70, 0x63, 0x22, 0x57, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x48,
	0x61, 0x73, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a,
	0x0f, 0x52, 0x61, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x61, 0x73, 0x68, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x22,
	0x36, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x66, 0x74,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76,
	0x6f, 0x74, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x33, 0x0a, 0x08, 0x52, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x13, 0x0a,
	0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x61,
	0x66, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x6f, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0f,
	0x52, 0x61, 0x66, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x61, 0x66, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x2f, 0x0a, 0x07, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x8b, 0x05, 0x0a, 0x07, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x74, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50,
	0x6f, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x4d, 0x73, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x65, 0x71, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x32, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x09, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x2f, 0x70, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raft_proto_rawDescOnce sync.Once
	file_raft_proto_rawDescData = file_raft_proto_rawDesc
)

func file_raft_proto_rawDescGZIP() []byte {
	file_raft_proto_rawDescOnce.Do(func() {
		file_raft_proto_rawDescData = protoimpl.X.CompressGZIP(file_raft_proto_rawDescData)
	})
	return file_raft_proto_rawDescData
}

var file_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_raft_proto_goTypes = []interface{}{
	(RaftTransaction_Type)(0),  // 0: prpc.RaftTransaction.Type
	(RaftMsg_Type)(0),          // 1: prpc.RaftMsg.Type
	(*NewNodeAction)(nil),      // 2: prpc.NewNodeAction
	(*HashSlotAction)(nil),     // 3: prpc.HashSlotAction
	(*RaftTransaction)(nil),    // 4: prpc.RaftTransaction
	(*NodeState)(nil),          // 5: prpc.NodeState
	(*RaftPing)(nil),           // 6: prpc.RaftPing
	(*RaftPong)(nil),           // 7: prpc.RaftPong
	(*RaftElection)(nil),       // 8: prpc.RaftElection
	(*RaftElectionRet)(nil),    // 9: prpc.RaftElectionRet
	(*RaftSyncActions)(nil),    // 10: prpc.RaftSyncActions
	(*RaftSyncActionsRet)(nil), // 11: prpc.RaftSyncActionsRet
	(*RaftReqActions)(nil),     // 12: prpc.RaftReqActions
	(*SlotMsg)(nil),            // 13: prpc.SlotMsg
	(*RaftMsg)(nil),            // 14: prpc.RaftMsg
}
var file_raft_proto_depIdxs = []int32{
	0,  // 0: prpc.RaftTransaction.type:type_name -> prpc.RaftTransaction.Type
	2,  // 1: prpc.RaftTransaction.new_node:type_name -> prpc.NewNodeAction
	3,  // 2: prpc.RaftTransaction.hash_slot:type_name -> prpc.HashSlotAction
	5,  // 3: prpc.RaftPing.node_states:type_name -> prpc.NodeState
	4,  // 4: prpc.RaftSyncActions.actions:type_name -> prpc.RaftTransaction
	1,  // 5: prpc.RaftMsg.type:type_name -> prpc.RaftMsg.Type
	4,  // 6: prpc.RaftMsg.action:type_name -> prpc.RaftTransaction
	10, // 7: prpc.RaftMsg.sync_actions:type_name -> prpc.RaftSyncActions
	11, // 8: prpc.RaftMsg.sync_actions_ret:type_name -> prpc.RaftSyncActionsRet
	6,  // 9: prpc.RaftMsg.ping:type_name -> prpc.RaftPing
	7,  // 10: prpc.RaftMsg.pong:type_name -> prpc.RaftPong
	8,  // 11: prpc.RaftMsg.election:type_name -> prpc.RaftElection
	9,  // 12: prpc.RaftMsg.election_ret:type_name -> prpc.RaftElectionRet
	12, // 13: prpc.RaftMsg.req_actions:type_name -> prpc.RaftReqActions
	13, // 14: prpc.RaftMsg.slot_msg:type_name -> prpc.SlotMsg
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_raft_proto_init() }
func file_raft_proto_init() {
	if File_raft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashSlotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftPong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftElection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftElectionRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftSyncActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftSyncActionsRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftReqActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raft_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raft_proto_goTypes,
		DependencyIndexes: file_raft_proto_depIdxs,
		EnumInfos:         file_raft_proto_enumTypes,
		MessageInfos:      file_raft_proto_msgTypes,
	}.Build()
	File_raft_proto = out.File
	file_raft_proto_rawDesc = nil
	file_raft_proto_goTypes = nil
	file_raft_proto_depIdxs = nil
}
