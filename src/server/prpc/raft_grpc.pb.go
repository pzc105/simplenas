// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: raft.proto

package prpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeService_Send_FullMethodName = "/prpc.NodeService/Send"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (NodeService_SendClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Send(ctx context.Context, opts ...grpc.CallOption) (NodeService_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], NodeService_Send_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceSendClient{stream}
	return x, nil
}

type NodeService_SendClient interface {
	Send(*SendMsg) error
	Recv() (*SendRet, error)
	grpc.ClientStream
}

type nodeServiceSendClient struct {
	grpc.ClientStream
}

func (x *nodeServiceSendClient) Send(m *SendMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceSendClient) Recv() (*SendRet, error) {
	m := new(SendRet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	Send(NodeService_SendServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) Send(NodeService_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).Send(&nodeServiceSendServer{stream})
}

type NodeService_SendServer interface {
	Send(*SendRet) error
	Recv() (*SendMsg, error)
	grpc.ServerStream
}

type nodeServiceSendServer struct {
	grpc.ServerStream
}

func (x *nodeServiceSendServer) Send(m *SendRet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceSendServer) Recv() (*SendMsg, error) {
	m := new(SendMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prpc.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _NodeService_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "raft.proto",
}
