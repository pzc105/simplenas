// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: chat.proto

package prpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_QueryChatRoomServer_FullMethodName = "/prpc.ChatService/QueryChatRoomServer"
	ChatService_CreateChatRoom_FullMethodName      = "/prpc.ChatService/CreateChatRoom"
	ChatService_QueryChatRoomInfo_FullMethodName   = "/prpc.ChatService/QueryChatRoomInfo"
	ChatService_JoinRoom_FullMethodName            = "/prpc.ChatService/JoinRoom"
	ChatService_LeaveRoom_FullMethodName           = "/prpc.ChatService/LeaveRoom"
	ChatService_Send2ChatRoom_FullMethodName       = "/prpc.ChatService/Send2ChatRoom"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	QueryChatRoomServer(ctx context.Context, in *QueryChatRoomServerReq, opts ...grpc.CallOption) (*QueryChatRoomServerRes, error)
	CreateChatRoom(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomRes, error)
	QueryChatRoomInfo(ctx context.Context, in *QueryChatRoomInfoReq, opts ...grpc.CallOption) (*QueryChatRoomInfoRes, error)
	JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomRes, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomRes, error)
	Send2ChatRoom(ctx context.Context, in *Send2ChatRoomReq, opts ...grpc.CallOption) (*Send2ChatRoomRes, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) QueryChatRoomServer(ctx context.Context, in *QueryChatRoomServerReq, opts ...grpc.CallOption) (*QueryChatRoomServerRes, error) {
	out := new(QueryChatRoomServerRes)
	err := c.cc.Invoke(ctx, ChatService_QueryChatRoomServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChatRoom(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomRes, error) {
	out := new(CreateChatRoomRes)
	err := c.cc.Invoke(ctx, ChatService_CreateChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) QueryChatRoomInfo(ctx context.Context, in *QueryChatRoomInfoReq, opts ...grpc.CallOption) (*QueryChatRoomInfoRes, error) {
	out := new(QueryChatRoomInfoRes)
	err := c.cc.Invoke(ctx, ChatService_QueryChatRoomInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomRes, error) {
	out := new(JoinRoomRes)
	err := c.cc.Invoke(ctx, ChatService_JoinRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomRes, error) {
	out := new(LeaveRoomRes)
	err := c.cc.Invoke(ctx, ChatService_LeaveRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Send2ChatRoom(ctx context.Context, in *Send2ChatRoomReq, opts ...grpc.CallOption) (*Send2ChatRoomRes, error) {
	out := new(Send2ChatRoomRes)
	err := c.cc.Invoke(ctx, ChatService_Send2ChatRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	QueryChatRoomServer(context.Context, *QueryChatRoomServerReq) (*QueryChatRoomServerRes, error)
	CreateChatRoom(context.Context, *CreateChatRoomReq) (*CreateChatRoomRes, error)
	QueryChatRoomInfo(context.Context, *QueryChatRoomInfoReq) (*QueryChatRoomInfoRes, error)
	JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomRes, error)
	LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomRes, error)
	Send2ChatRoom(context.Context, *Send2ChatRoomReq) (*Send2ChatRoomRes, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) QueryChatRoomServer(context.Context, *QueryChatRoomServerReq) (*QueryChatRoomServerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChatRoomServer not implemented")
}
func (UnimplementedChatServiceServer) CreateChatRoom(context.Context, *CreateChatRoomReq) (*CreateChatRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRoom not implemented")
}
func (UnimplementedChatServiceServer) QueryChatRoomInfo(context.Context, *QueryChatRoomInfoReq) (*QueryChatRoomInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChatRoomInfo not implemented")
}
func (UnimplementedChatServiceServer) JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedChatServiceServer) LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedChatServiceServer) Send2ChatRoom(context.Context, *Send2ChatRoomReq) (*Send2ChatRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send2ChatRoom not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_QueryChatRoomServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChatRoomServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).QueryChatRoomServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_QueryChatRoomServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).QueryChatRoomServer(ctx, req.(*QueryChatRoomServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChatRoom(ctx, req.(*CreateChatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_QueryChatRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChatRoomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).QueryChatRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_QueryChatRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).QueryChatRoomInfo(ctx, req.(*QueryChatRoomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinRoom(ctx, req.(*JoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Send2ChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Send2ChatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send2ChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Send2ChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send2ChatRoom(ctx, req.(*Send2ChatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prpc.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryChatRoomServer",
			Handler:    _ChatService_QueryChatRoomServer_Handler,
		},
		{
			MethodName: "CreateChatRoom",
			Handler:    _ChatService_CreateChatRoom_Handler,
		},
		{
			MethodName: "QueryChatRoomInfo",
			Handler:    _ChatService_QueryChatRoomInfo_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _ChatService_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _ChatService_LeaveRoom_Handler,
		},
		{
			MethodName: "Send2ChatRoom",
			Handler:    _ChatService_Send2ChatRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
